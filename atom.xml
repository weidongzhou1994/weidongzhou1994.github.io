<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周卫东的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http%EF%BC%9A//zhouweidong.ml/"/>
  <updated>2020-09-06T15:01:57.474Z</updated>
  <id>http：//zhouweidong.ml/</id>
  
  <author>
    <name>周卫东</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode MySQL Day8</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/09/06/LeetCode-MySQL-Day8/"/>
    <id>http：//zhouweidong.ml/2020/09/06/LeetCode-MySQL-Day8/</id>
    <published>2020-09-06T14:16:34.000Z</published>
    <updated>2020-09-06T15:01:57.474Z</updated>
    
    <content type="html"><![CDATA[<p>   第 8 天：</p><a id="more"></a><p>  Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no &quot;holes&quot; between ranks.</p><table><thead><tr class="header"><th>Id</th><th>Score</th></tr></thead><tbody><tr class="odd"><td>1</td><td>3.50</td></tr><tr class="even"><td>2</td><td>3.65</td></tr><tr class="odd"><td>3</td><td>4.00</td></tr><tr class="even"><td>4</td><td>3.85</td></tr><tr class="odd"><td>5</td><td>4.00</td></tr><tr class="even"><td>6</td><td>3.65</td></tr></tbody></table><p>  For example, given the above Scores table, your query should generate the following report (order by highest score):</p><table><thead><tr class="header"><th>score</th><th>Rank</th></tr></thead><tbody><tr class="odd"><td>4.00</td><td>1</td></tr><tr class="even"><td>4.00</td><td>1</td></tr><tr class="odd"><td>3.85</td><td>2</td></tr><tr class="even"><td>3.65</td><td>3</td></tr><tr class="odd"><td>3.65</td><td>3</td></tr><tr class="even"><td>3.50</td><td>4</td></tr></tbody></table><p>  Important Note: For MySQL solutions, to escape reserved words used as column names, you can use an apostrophe before and after the keyword. For example <code>Rank</code>.</p><p>   解决方案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> score, <span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="string">'Rank'</span> <span class="keyword">from</span> Scores</span><br></pre></td></tr></table></figure><p>   知识点：</p><figure><img src="https://picgo-1258437747.cos.ap-nanjing.myqcloud.com/20200906224250.png" alt="20200906224250"><figcaption>20200906224250</figcaption></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第 8 天：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从瑟尔沃法则看内外双循环</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/09/04/%E4%BB%8E%E7%91%9F%E5%B0%94%E6%B2%83%E6%B3%95%E5%88%99%E7%9C%8B%E5%86%85%E5%A4%96%E5%8F%8C%E5%BE%AA%E7%8E%AF/"/>
    <id>http：//zhouweidong.ml/2020/09/04/从瑟尔沃法则看内外双循环/</id>
    <published>2020-09-04T13:58:37.000Z</published>
    <updated>2020-09-04T14:46:51.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>   在收支均衡约束下的哈罗德模型中，经济增长对外部需求扩张的依赖关系，被称为 “瑟尔沃法则”。<br>    令 M 为进口，X 为出口，Y 为实际 GDP，<span class="math inline">\(\mu\)</span> 为进口倾向，则在内部均衡的前提下，外部均衡为 <span class="math inline">\(X=M=\mu Y\)</span>，则有 <span class="math inline">\(Y=\frac {X}{\mu}\)</span>，得 <span class="math inline">\(g = \frac {\Delta Y}{Y} = \frac {\frac {\Delta X}{X}}{\epsilon}\)</span>。<br></p></blockquote><p>   从分子来看：外部需求的增长与经济增长存在着对应关系。<br>    从分母来看：如果要实现 “内循环”，必须降低国内循环的对外需求，即实现消费品和生产资料的进口替代。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;   在收支均衡约束下的哈罗德模型中，经济增长对外部需求扩张的依赖关系，被称为 “瑟尔沃法则”。&lt;br&gt;    令 M 为进口，X 为出口，Y 为实际 GDP，&lt;span class=&quot;math inline&quot;&gt;\(\mu\)&lt;/span&gt; 为进
      
    
    </summary>
    
      <category term="宏观经济" scheme="http%EF%BC%9A//zhouweidong.ml/categories/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day07</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/09/02/LeetCode-MySql-Day07/"/>
    <id>http：//zhouweidong.ml/2020/09/02/LeetCode-MySql-Day07/</id>
    <published>2020-09-02T15:50:21.000Z</published>
    <updated>2020-09-02T15:54:31.192Z</updated>
    
    <content type="html"><![CDATA[<p>   第 7 天 <br> <a id="more"></a>   Write a SQL query to get the nth highest salary from the Employee table.</p><table><thead><tr class="header"><th>Id</th><th>Salary</th></tr></thead><tbody><tr class="odd"><td>1</td><td>100</td></tr><tr class="even"><td>2</td><td>200</td></tr><tr class="odd"><td>3</td><td>300</td></tr></tbody></table><p>For example, given the above Employee table, the nth highest salary where n = 2 is 200. If there is no nth highest salary, then the query should return null.</p><table><thead><tr class="header"><th>getNthHighestSalary (2)</th></tr></thead><tbody><tr class="odd"><td>200</td></tr></tbody></table><p>   解决方法如下：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary (N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> M <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> M = N<span class="number">-1</span>;</span><br><span class="line">  RETURN (</span><br><span class="line">      # Write your MySQL query statement below.</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary</span><br><span class="line">      <span class="keyword">FROM</span> Employee</span><br><span class="line">      <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">      <span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> M</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>   这里涉及到自定义函数，基本的语法格式如下：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> &lt; 函数名 & gt; ( [ &lt; 参数 < span class="number">1</span>&gt; &lt; 类型 < span class="number">1&gt; [ , &lt; 参数 < span class="number">2&gt; &lt; 类型 < span class="number">2&gt;] ] … )<br><span class="line">    <span class="keyword">RETURNS</span> &lt; 类型 & gt;</span><br><span class="line">    &lt; 函数主体 & gt;</span><br></pre></td></tr></table></figure></p><p>   调用自定义函数的基本语法格式如下：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt; 自定义函数名 & gt; ([&lt; 参数 & gt; [,...]])</span><br></pre></td></tr></table></figure></p><p>   删除自定义函数的基本语法格式如下：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> [ <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ] &lt; 自定义函数名 & gt;</span><br></pre></td></tr></table></figure></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第 7 天 &lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http%EF%BC%9A//zhouweidong.ml/categories/LeetCode/"/>
    
    
      <category term="MySQL" scheme="http%EF%BC%9A//zhouweidong.ml/tags/MySQL/"/>
    
      <category term="Function" scheme="http%EF%BC%9A//zhouweidong.ml/tags/Function/"/>
    
  </entry>
  
  <entry>
    <title>灰色预测模型</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/09/02/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>http：//zhouweidong.ml/2020/09/02/灰色预测模型/</id>
    <published>2020-09-02T14:44:02.000Z</published>
    <updated>2020-09-02T15:01:40.129Z</updated>
    
    <content type="html"><![CDATA[<p>   灰色预测模型是在样本较小、信息不完全的情况下，通过挖掘数据的特征进行预测的方法。<br> <a id="more"></a>    首先需要由原始数据序列计算一次累加序列：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x0 &lt;- seq (<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">x1 &lt;- cumsum (x)</span><br></pre></td></tr></table></figure><p>   然后，需要建立矩阵 <span class="math display">\[\pmb {B}=\left [\begin {array}{cc}  -\frac {1}{2}[x^{(1)}(2)+x^{(1)}(1)]&amp;1\\  \vdots&amp;\vdots\\  -\frac {1}{2}[x^{(1)}(k)+x^{(1)}(k-1)]&amp;1  \end {array}\right]\]</span> 和 <span class="math display">\[\pmb {y}=\left [\begin {array}{c}  x^{0}_{2}\\  \vdots \\  x^{0}_{k}\end {array}\right]\]</span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">B = matrix (data = <span class="number">1</span>, nrow = (length (x1) - <span class="number">1</span>), ncol = <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:(length (x1) - <span class="number">1</span>)) &#123;</span><br><span class="line">    B [i, <span class="number">1</span>] = (x1 [i] + x1 [i+<span class="number">1</span>])*(-<span class="number">1.0</span>)/<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">y = as.matrix (x0 [<span class="number">2</span>:length (x0)])</span><br></pre></td></tr></table></figure><p>   之后，可以由 <span class="math inline">\(\hat {U} = (\pmb {B}^{T}\pmb {B})^{-1}\pmb {B}^{T}\pmb {y}=\left [\begin {array}{c} \hat {a} \\ \hat {u} \end {array}\right]\)</span>, 求出 <span class="math inline">\(\hat {a}\)</span> 和 <span class="math inline">\(\hat {u}\)</span>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BT = t (B)</span><br><span class="line">a = sovle (BT %*% B) %*% BT %*% y</span><br></pre></td></tr></table></figure><p>   最后，把 <span class="math inline">\(\hat {a}\)</span> 和 <span class="math inline">\(\hat {u}\)</span> 代入时间响应方程：</p><p><span class="math display">\[x^{(1)}(k+1) = [x^{(1)}_{1} - \frac {\hat {u}}{\hat {a}}] e^{-\hat {a} k} + \frac {\hat {u}}{\hat {a}}\]</span></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">k &lt;- rep (<span class="number">1</span>, length)</span><br><span class="line">xk &lt;- rep (<span class="number">1</span>,(length (x0)+n))</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:length (x0)+n) &#123;</span><br><span class="line">    u = a [<span class="number">2</span>]/a [<span class="number">1</span>]</span><br><span class="line">    xk [i] = (x1 [<span class="number">1</span>] - u)*exp ((-<span class="number">1</span>)*a [<span class="number">1</span>]*(k [i])) + u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   此时得到的结果是拟合值 <span class="math inline">\(\hat {x}^{1}_{i}\)</span> ，需要利用后减运算还原为模型的拟合值 <span class="math inline">\(\hat {x}^{0}_{i}\)</span>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xhat &lt;- rep (<span class="number">1</span>, length (xk))</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:legth (xk)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">        xhat [i] = x0 [<span class="number">1</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhat [i] = xk [i] - xk [i-<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   得出拟合值后，需要评价一下模型的精度，主要评价指标有：</p><ul><li>残差：<span class="math inline">\(e (k)=x^{(0)}_{k}-\hat {x}^{(0)}_{k}\)</span>。</li><li>相对残差：<span class="math inline">\(e (k)=\frac {x^{(0)}_{k}-\hat {x}^{(0)}_{k}}{x^{(0)}_{k}}\)</span>。</li><li>均方差比（后残差比值）：<span class="math inline">\(C=\frac {S_{2}}{S_{1}}=\frac {\sqrt {\frac {1}{N}\sum_{k=1}^{N}[x^{(0)}_k-\bar {X}]^{2}}}{\sqrt {\frac {1}{N-1}\sum_{k=2}^{N}[E (k)-\bar {E}]^{2}}}\)</span>，小于 0.35 表示模型精度相对比较好。</li><li>小误差概率：<span class="math inline">\(P = P {|E (k)-\bar {E}|&lt;0.6745S_{1}}\)</span>，大于 0.95 表示模型精度相对比较好。</li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   灰色预测模型是在样本较小、信息不完全的情况下，通过挖掘数据的特征进行预测的方法。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day6</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/05/13/LeetCode-MySql-Day06/"/>
    <id>http：//zhouweidong.ml/2020/05/13/LeetCode-MySql-Day06/</id>
    <published>2020-05-13T11:36:38.000Z</published>
    <updated>2020-05-13T13:54:21.050Z</updated>
    
    <content type="html"><![CDATA[<p>   第六天：</p><a id="more"></a><h2 id="swap-salary">627. Swap Salary</h2><p>  Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a <strong>single update statement</strong> and no intermediate temp table.</p><p>  Note that you must write a single update statement, <strong>DO NOT</strong> write any select statement for this problem.</p><p>  <strong>Example:</strong></p><table><thead><tr class="header"><th>id</th><th>name</th><th>sex</th><th>salary</th></tr></thead><tbody><tr class="odd"><td>1</td><td>A</td><td>m</td><td>2500</td></tr><tr class="even"><td>2</td><td>B</td><td>f</td><td>1500</td></tr><tr class="odd"><td>3</td><td>C</td><td>m</td><td>5500</td></tr><tr class="even"><td>4</td><td>D</td><td>f</td><td>500</td></tr></tbody></table><p>  After running your <strong>update</strong> statement, the above salary table should have the following rows:</p><table><thead><tr class="header"><th>id</th><th>name</th><th>sex</th><th>salary</th></tr></thead><tbody><tr class="odd"><td>1</td><td>A</td><td>f</td><td>2500</td></tr><tr class="even"><td>2</td><td>B</td><td>m</td><td>1500</td></tr><tr class="odd"><td>3</td><td>C</td><td>f</td><td>5500</td></tr><tr class="even"><td>4</td><td>D</td><td>m</td><td>500</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = (<span class="keyword">case</span> <span class="keyword">when</span> sex = <span class="string">"f"</span> <span class="keyword">then</span> <span class="string">"m"</span> <span class="keyword">else</span> <span class="string">"f"</span> <span class="keyword">end</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = <span class="built_in">char</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) ^ <span class="keyword">ASCII</span>(<span class="string">'m'</span>) ^ <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></table></figure><p>   解法一：利用条件表达式函数 case when … … then … … else … … end，相当于 if … … else 。</p><p>   解法二：利用 XOR (异或) 运算符和 ASCII 编码进行转换：f 和 m 的 ASCII 编码值分别为 102 和 109 ，XOR 运算符 (^) 的作用是舍去二进制的进位，具体而言：首先将十进制转换为二进制，即 bin (102)=0b1100110，bin (109)=0b1101101，易知 0b1100110^0b110110 = 0b1011 ，再将二进制转换为十进制，即 int (str (1011), 2) = 11，同理可知 11^102=109 和 11^109 = 102 。</p><h2 id="reformat-department-table">1179. Reformat Department Table</h2><p>  Table: <code>Department</code></p><table><thead><tr class="header"><th>Column Name</th><th>Type</th></tr></thead><tbody><tr class="odd"><td>id</td><td>int</td></tr><tr class="even"><td>revenue</td><td>int</td></tr><tr class="odd"><td>month</td><td>varchar</td></tr></tbody></table><p>  (id, month) is the primary key of this table.</p><p>  The table has information about the revenue of each department per month.</p><p>  The month has values in [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;].</p><p>  Write an SQL query to reformat the table such that there is a department id column and a revenue column <strong>for each month</strong>.</p><p>  The query result format is in the following example:</p><p>  Department table:</p><table><thead><tr class="header"><th>id</th><th>revenue</th><th>month</th></tr></thead><tbody><tr class="odd"><td>1</td><td>8000</td><td>Jan</td></tr><tr class="even"><td>2</td><td>9000</td><td>Jan</td></tr><tr class="odd"><td>3</td><td>10000</td><td>Feb</td></tr><tr class="even"><td>1</td><td>7000</td><td>Feb</td></tr><tr class="odd"><td>1</td><td>6000</td><td>Mar</td></tr></tbody></table><p>  Result table:</p><table><thead><tr class="header"><th>id</th><th>Jan_Revenue</th><th>Feb_Revenue</th><th>Mar_Revenue</th><th>...</th><th>Dec_Revenue</th></tr></thead><tbody><tr class="odd"><td>1</td><td>8000</td><td>7000</td><td>6000</td><td>...</td><td>null</td></tr><tr class="even"><td>2</td><td>9000</td><td>null</td><td>null</td><td>...</td><td>null</td></tr><tr class="odd"><td>3</td><td>null</td><td>10000</td><td>null</td><td>...</td><td>null</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Jan'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Jan_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Feb'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Feb_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Mar'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Mar_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Apr'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Apr_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'May'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> May_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Jun'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Jun_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Jul'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Jul_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Aug'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Aug_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Sep'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Sep_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Oct'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Oct_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Nov'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Nov_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Dec'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Dec_Revenue</span><br><span class="line"><span class="keyword">FROM</span> Department</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure><p>   知识点：if (expr1,expr2,expr3)，如果 expr1 是 TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL)，则 IF () 的返回值为 expr2; 否则返回值则为 expr3。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第六天：&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http%EF%BC%9A//zhouweidong.ml/categories/LeetCode/"/>
    
    
      <category term="MySql" scheme="http%EF%BC%9A//zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http%EF%BC%9A//zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day5</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/05/12/LeetCode-MySql-Day5/"/>
    <id>http：//zhouweidong.ml/2020/05/12/LeetCode-MySql-Day5/</id>
    <published>2020-05-12T12:38:05.000Z</published>
    <updated>2020-05-12T13:28:06.264Z</updated>
    
    <content type="html"><![CDATA[<p>   第五天：</p><a id="more"></a><h2 id="classes-more-than-5-students">596. Classes More Than 5 Students</h2><p>  There is a table <code>courses</code> with columns: <strong>student</strong> and <strong>class</strong></p><p>  Please list out all classes which have more than or equal to 5 students.</p><p>  For example, the table:</p><table><thead><tr class="header"><th>student</th><th>class</th></tr></thead><tbody><tr class="odd"><td>A</td><td>Math</td></tr><tr class="even"><td>B</td><td>English</td></tr><tr class="odd"><td>C</td><td>Math</td></tr><tr class="even"><td>D</td><td>Biology</td></tr><tr class="odd"><td>E</td><td>Math</td></tr><tr class="even"><td>F</td><td>Computer</td></tr><tr class="odd"><td>G</td><td>Math</td></tr><tr class="even"><td>H</td><td>Math</td></tr><tr class="odd"><td>I</td><td>Math</td></tr></tbody></table><p>  Should output:</p><table><thead><tr class="header"><th>class</th></tr></thead><tbody><tr class="odd"><td>Math</td></tr></tbody></table><p>  <strong>Note:</strong></p><p>  The students should not be counted duplicate in each course.</p><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">class</span> <span class="keyword">from</span> courses <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">class</span> <span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> student) &gt;= <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="not-boring-movies">620. Not Boring Movies</h2><p>  X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.</p><p>  Please write a SQL query to output movies with an odd numbered ID and a description that is not 'boring'. Order the result by rating.</p><p>  For example, table <code>cinema</code>:</p><table><thead><tr class="header"><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr class="odd"><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr><tr class="even"><td>2</td><td>Science</td><td>fiction</td><td>8.5</td></tr><tr class="odd"><td>3</td><td>irish</td><td>boring</td><td>6.2</td></tr><tr class="even"><td>4</td><td>Ice song</td><td>Fantacy</td><td>8.6</td></tr><tr class="odd"><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr></tbody></table><p>  For the example above, the output should be:</p><table><thead><tr class="header"><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr class="odd"><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr><tr class="even"><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cinema <span class="keyword">where</span> <span class="keyword">mod</span>(<span class="keyword">id</span>, <span class="number">2</span>) != <span class="number">0</span> <span class="keyword">and</span> description <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">'boring'</span> <span class="keyword">order</span> <span class="keyword">by</span> rating <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cinema <span class="keyword">where</span> description &lt;&gt; <span class="string">'boring'</span> <span class="keyword">and</span> <span class="keyword">id</span> &amp; <span class="number">1</span> = <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> rating <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>   两个知识点：对于字符串 not like 是模糊查询，&lt;&gt; 则是完整查询，二者的区别是前者要求数据里面不包含某个字段，后者要求数据不是某个字段；&amp; 是位运算符，可以用于判断对 <span class="math inline">\(2^n\)</span> 取余，是一个取巧的办法，加快了运算速度。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第五天：&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http%EF%BC%9A//zhouweidong.ml/categories/LeetCode/"/>
    
    
      <category term="MySql" scheme="http%EF%BC%9A//zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http%EF%BC%9A//zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day4</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/05/08/LeetCode-MySql-Day4/"/>
    <id>http：//zhouweidong.ml/2020/05/08/LeetCode-MySql-Day4/</id>
    <published>2020-05-08T04:57:53.000Z</published>
    <updated>2020-05-08T05:40:29.680Z</updated>
    
    <content type="html"><![CDATA[<p>   第四天：</p><a id="more"></a><h2 id="rising-temperature">197. Rising Temperature</h2><p>  Given a Weather table, write a SQL query to find all dates' Ids with higher temperature compared to its previous (yesterday's) dates.</p><table><thead><tr class="header"><th>Id (INT)</th><th>RecordDate (DATE)</th><th>Temperature (INT)</th></tr></thead><tbody><tr class="odd"><td>1</td><td>2015-01-01</td><td>10</td></tr><tr class="even"><td>2</td><td>2015-01-02</td><td>25</td></tr><tr class="odd"><td>3</td><td>2015-01-03</td><td>20</td></tr><tr class="even"><td>4</td><td>2015-01-04</td><td>30</td></tr></tbody></table><p>  For example, return the following Ids for the above Weather table:title: LeetCode MySql Day4</p><table><thead><tr class="header"><th style="text-align: left;">Id</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">2</td></tr><tr class="even"><td style="text-align: left;">4</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> w1.Id <span class="keyword">from</span> Weather w1, Weather w2 <span class="keyword">where</span> w1.Temperature &gt; w2.Temperature <span class="keyword">and</span> <span class="keyword">DateDiff</span>(w1. RecordDate, w2.RecordDate) = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>   知识点：时间类型的处理 - DataDiff (d1, d2)：计算日期 d1-&gt;d2 之间相隔的天数。</p><h2 id="big-countries">595. Big Countries</h2><p>  There is a table World：</p><table><thead><tr class="header"><th>name</th><th>continent</th><th>area</th><th>population</th><th>gdp</th></tr></thead><tbody><tr class="odd"><td>Afghanistan</td><td>Asia</td><td>652230</td><td>25500100</td><td>20343000</td></tr><tr class="even"><td>Albania</td><td>Europe</td><td>28748</td><td>2831741</td><td>12960000</td></tr><tr class="odd"><td>Algeria</td><td>Africa</td><td>2381741</td><td>37100000</td><td>1.89E+08</td></tr><tr class="even"><td>Andorra</td><td>Europe</td><td>468</td><td>78115</td><td>3712000</td></tr><tr class="odd"><td>Angola</td><td>Africa</td><td>1246700</td><td>20609294</td><td>1.01E+08</td></tr></tbody></table><p>  A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</p><p>  Write a SQL solution to output big countries' name, population and area.</p><p>  For example, according to the above table, we should output:</p><table><thead><tr class="header"><th>name</th><th>population</th><th>area</th></tr></thead><tbody><tr class="odd"><td>Afghanistan</td><td>25500100</td><td>652230</td></tr><tr class="even"><td>Algeria</td><td>37100000</td><td>2381741</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, population, area <span class="keyword">from</span> World <span class="keyword">where</span> population &gt; <span class="number">25000000</span> <span class="keyword">or</span> area &gt; <span class="number">3000000</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, population, area <span class="keyword">from</span> World <span class="keyword">where</span> population &gt; <span class="number">25000000</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">name</span>, population, area <span class="keyword">from</span> World <span class="keyword">where</span> area &gt; <span class="number">3000000</span>;</span><br></pre></td></tr></table></figure><p>  union 替代 or 虽然看起来比较繁琐，但会加快运算速度。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第四天：&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http%EF%BC%9A//zhouweidong.ml/categories/LeetCode/"/>
    
    
      <category term="MySql" scheme="http%EF%BC%9A//zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http%EF%BC%9A//zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day3</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/05/07/LeetCode-MySql-Day3/"/>
    <id>http：//zhouweidong.ml/2020/05/07/LeetCode-MySql-Day3/</id>
    <published>2020-05-07T04:48:04.000Z</published>
    <updated>2020-09-03T12:52:27.461Z</updated>
    
    <content type="html"><![CDATA[<p>   第三天：</p><a id="more"></a><h2 id="customers-who-never-order">183. Customers Who Never Order</h2><p>  Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.</p><p>  Table: Customers.</p><table><thead><tr class="header"><th>Id</th><th>Name</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Joe</td></tr><tr class="even"><td>2</td><td>Henry</td></tr><tr class="odd"><td>3</td><td>Sam</td></tr><tr class="even"><td>4</td><td>Max</td></tr></tbody></table><p>  Table: Orders.</p><table><thead><tr class="header"><th>Id</th><th>CustomerId</th></tr></thead><tbody><tr class="odd"><td>1</td><td>3</td></tr><tr class="even"><td>2</td><td>1</td></tr></tbody></table><p>Using the above tables as example, return the following:</p><table><thead><tr class="header"><th>Customers</th></tr></thead><tbody><tr class="odd"><td>Henry</td></tr><tr class="even"><td>Max</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Name</span> <span class="keyword">as</span> Customers <span class="keyword">from</span> Customers <span class="keyword">where</span> <span class="keyword">Id</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> CustimerId <span class="keyword">from</span> Orders);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c.Name <span class="keyword">from</span> Customers c <span class="keyword">left</span> <span class="keyword">join</span> Orders o <span class="keyword">on</span> c.Id = o.CustormerId <span class="keyword">where</span> o.CustomerId <span class="keyword">is</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>   前者的逻辑清晰，但对于大数据而言运算速度慢于后者。</p><h2 id="delete-duplicate-emails">196. Delete Duplicate Emails</h2><p>  Write a SQL query to delete all duplicate email entries in a table named Person, keeping only unique emails based on its smallest Id.</p><table><thead><tr class="header"><th>Id</th><th>Email</th></tr></thead><tbody><tr class="odd"><td>1</td><td>john@example.com</td></tr><tr class="even"><td>2</td><td>bob@example.com</td></tr><tr class="odd"><td>3</td><td>john@example.com</td></tr></tbody></table><p>  Id is the primary key column for this table.</p><p>  For example, after running your query, the above Person table should have the following rows:</p><table><thead><tr class="header"><th>Id</th><th>Email</th></tr></thead><tbody><tr class="odd"><td>1</td><td>john@example.com</td></tr><tr class="even"><td>2</td><td>bob@example.com</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> p1 <span class="keyword">from</span> Person p1, Person p2 <span class="keyword">where</span> p1.Email = p2.Email <span class="keyword">and</span> p1.Id &gt; p2.Id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> Person <span class="keyword">where</span> <span class="keyword">Id</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">from</span> Person <span class="keyword">group</span> <span class="keyword">by</span> Email) <span class="keyword">as</span> p);</span><br></pre></td></tr></table></figure><p>   前者的逻辑相对比较清晰；后者的逻辑是：无论是否重复，利用 group by 分组 求 Id 的最小值，即需要保留的数据，然后利用 not in 删除剩余部分。</p><p>   值得注意的是：利用 delete 语句删除数据前，务必先使用 select 语句确定删除的数据是否正确，避免误删。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第三天：&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http%EF%BC%9A//zhouweidong.ml/categories/LeetCode/"/>
    
    
      <category term="MySql" scheme="http%EF%BC%9A//zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http%EF%BC%9A//zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day2</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/05/02/LeetCode-MySql-Day2/"/>
    <id>http：//zhouweidong.ml/2020/05/02/LeetCode-MySql-Day2/</id>
    <published>2020-05-02T08:18:58.000Z</published>
    <updated>2020-09-03T12:54:34.944Z</updated>
    
    <content type="html"><![CDATA[<p>   第二天：<br></p><a id="more"></a><h2 id="employees-earning-more-than-their-managers">181. Employees Earning More Than Their Managers<br></h2><p>  The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.<br></p><table><thead><tr class="header"><th>Id</th><th>Name</th><th>Salary</th><th>ManagerId</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Joe</td><td>70000</td><td>3</td></tr><tr class="even"><td>2</td><td>Henry</td><td>80000</td><td>4</td></tr><tr class="odd"><td>3</td><td>Sam</td><td>60000</td><td>NULL</td></tr><tr class="even"><td>4</td><td>Max</td><td>90000</td><td>NULL</td></tr></tbody></table><p>  Given the Employee table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.<br></p><table><thead><tr class="header"><th>Employee</th></tr></thead><tbody><tr class="odd"><td>Joe</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.Name <span class="keyword">as</span> Employee <span class="keyword">from</span> Employee e, Employee m <span class="keyword">where</span> e.ManagerId=m.Id <span class="keyword">and</span> e.Salary &gt; m.Salary;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.Name <span class="keyword">as</span> Employee <span class="keyword">from</span> Employee e <span class="keyword">inner</span> <span class="keyword">join</span> Employee.m <span class="keyword">on</span> e.ManagerId=m.Id <span class="keyword">where</span> e.Salary &gt; m.Salary;</span><br></pre></td></tr></table></figure><p>   前者的逻辑比较清晰，后者稍微有点绕，连接后的表大概是如下模样：<br></p><table><colgroup><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"></colgroup><thead><tr class="header"><th> e.Id </th><th> e.Name  </th><th> e.Salary </th><th> e.ManagerId </th><th> m.Id </th><th> m.Name  </th><th> m.Salary </th><th> m.ManagerId </th></tr></thead><tbody><tr class="odd"><td>1</td><td> Joe   </td><td>70000</td><td>3</td><td>3</td><td> Sam   </td><td>60000</td><td> NULL</td></tr><tr class="even"><td>2</td><td> Henry </td><td>80000</td><td>4</td><td>4</td><td> Max   </td><td>90000</td><td> NULL</td></tr></tbody></table><h2 id="duplicate-emails">182. Duplicate Emails<br></h2><p>  Write a SQL query to find all duplicate emails in a table named Person.<br> | Id | Email | |--|--| |1| a@b.com | |2| c@d.com | |3| a@b.com |</p><p>  For example, your query should return the following for the above table:<br> | Email | |--| | a@b.com |</p><p>   解决方法：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Email <span class="keyword">from</span> Person <span class="keyword">group</span> <span class="keyword">by</span> Email <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Email <span class="keyword">from</span> Person p1 <span class="keyword">inner</span> <span class="keyword">join</span> Person p2 <span class="keyword">on</span> p1.Email=p2.Email <span class="keyword">where</span> p1.Id &lt;&gt; p2.Id;</span><br></pre></td></tr></table></figure><p>   后者只是提供一种思路，太绕了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第二天：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http%EF%BC%9A//zhouweidong.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySql" scheme="http%EF%BC%9A//zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http%EF%BC%9A//zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day1</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/04/30/LeetCode-MySql-Day1/"/>
    <id>http：//zhouweidong.ml/2020/04/30/LeetCode-MySql-Day1/</id>
    <published>2020-04-30T14:25:22.000Z</published>
    <updated>2020-05-07T04:55:04.854Z</updated>
    
    <content type="html"><![CDATA[<p>   从今天开始练习 MySql：</p><a id="more"></a><h2 id="combine-two-tables">175. Combine Two Tables</h2><p>  Table: Person</p><table><thead><tr class="header"><th>Column Name</th><th>Type</th></tr></thead><tbody><tr class="odd"><td>PersonId</td><td>int</td></tr><tr class="even"><td>FirstName</td><td>varchar</td></tr><tr class="odd"><td>LastName</td><td>varchar</td></tr></tbody></table><p>PersonId is the primary key column for this table.</p><p>  Table: Address</p><table><thead><tr class="header"><th>Column Name</th><th>Type</th></tr></thead><tbody><tr class="odd"><td>AddressId</td><td>int</td></tr><tr class="even"><td>PersonId</td><td>int</td></tr><tr class="odd"><td>City</td><td>varchar</td></tr><tr class="even"><td>State</td><td>varchar</td></tr></tbody></table><p>AddressId is the primary key column for this table.</p><p>  Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:</p><p>FirstName, LastName, City, State</p><p>  Data: <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"headers": &#123;"Person": ["PersonId", "LastName", "FirstName"], "Address": ["AddressId", "PersonId", "City", "State"]&#125;, "rows": &#123;"Person": [[1, "Wang", "Allen"]], "Address": [[1, 2, "New York City", "New York"]]&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>   比较一下两个答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> FirstName, LastName, City, State <span class="keyword">from</span> Person, Address <span class="keyword">where</span> Person.PersonId=Address.PersonId;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p.FirstName, p.LastName, a.City, a.State  <span class="keyword">from</span> Person p <span class="keyword">left</span> <span class="keyword">join</span> Address a <span class="keyword">on</span> p.PersonId = a.PersonId;</span><br></pre></td></tr></table></figure><p>   前者不返回任何值，后者只返回 Person 中的值，原因很简单：where 相当于 full join , 返回符合要求的值；left join … … on 返回左表中的值和符合要求的右表中的值。    补充知识：在 select 语句中，可以临时给表起别名： 表名 [as] 表别名。（[] 表示内容可省略）</p><h2 id="second-highest-salary">176. Second Highest Salary</h2><p>  Write a SQL query to get the second highest salary from the Employee table.</p><table><thead><tr class="header"><th>Id</th><th>Salary</th></tr></thead><tbody><tr class="odd"><td>1</td><td>100</td></tr><tr class="even"><td>2</td><td>200</td></tr><tr class="odd"><td>3</td><td>300</td></tr></tbody></table><p>  For example, given the above Employee table, the query should return 200 as the second highest salary. If there is no second highest salary, then the query should return null.</p><table><thead><tr class="header"><th>SecondHighestSalary</th></tr></thead><tbody><tr class="odd"><td>200</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> Salary <span class="keyword">from</span> Employee <span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">Desc</span> <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span></span><br><span class="line">) </span><br><span class="line"><span class="keyword">as</span> SecondHighestSalary</span><br></pre></td></tr></table></figure><p>   去重：distinct；排序：order by —— 降序：DESC (默认为升序)；限制结果：limit 结果数；偏移数：offset 偏移数。</p><p>   重新命名: select as 新名。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   从今天开始练习 MySql：&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http%EF%BC%9A//zhouweidong.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySql" scheme="http%EF%BC%9A//zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http%EF%BC%9A//zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Sql：如何统计连续打卡天数</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/04/14/Sql%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1%E8%BF%9E%E7%BB%AD%E6%89%93%E5%8D%A1%E5%A4%A9%E6%95%B0/"/>
    <id>http：//zhouweidong.ml/2020/04/14/Sql：如何统计连续打卡天数/</id>
    <published>2020-04-14T03:55:57.000Z</published>
    <updated>2020-05-13T13:56:55.745Z</updated>
    
    <content type="html"><![CDATA[<p>   在实际的工作情境中，统计员工的连续打卡天数是一个十分重要的应用。</p><a id="more"></a><h1 id="创建示例数据">创建示例数据</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`打卡`</span> (uid <span class="built_in">INT</span>(<span class="number">5</span>), tdate <span class="built_in">date</span>, is_flag <span class="built_in">INT</span>(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`打卡`</span></span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/1'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/2'</span>, <span class="string">'0'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/3'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/4'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/5'</span>, <span class="string">'0'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/6'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/7'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/8'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/1'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/2'</span>, <span class="string">'0'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/3'</span>, <span class="string">'0'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/4'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/5'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/6'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/7'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/8'</span>, <span class="string">'1'</span> );</span><br></pre></td></tr></table></figure><h1 id="统计连续打卡天数">统计连续打卡天数</h1><p>   总体思路是：首先，判断今日是否打卡；然后，判断是否是连续打卡；最后，统计连续打卡天数。</p><h2 id="判断今日是否打卡">判断今日是否打卡</h2><p>   提取打卡的数据可以用 where is_flag = 1:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">tdate,</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`打卡`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">is_flag = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="判断是否是连续打卡">判断是否是连续打卡</h2><p>   如果是连续打卡，明显日期应该是等差序列，多个等差序列和其公差相同的另一个等差序列相减，则同一等差序列与这个等差序列的差必然相同，简单的例子如下：</p><table><thead><tr class="header"><th>x</th><th>y</th><th>x-y</th></tr></thead><tbody><tr class="odd"><td>1</td><td>1</td><td>0</td></tr><tr class="even"><td>2</td><td>2</td><td>0</td></tr><tr class="odd"><td>4</td><td>3</td><td>1</td></tr><tr class="even"><td>5</td><td>4</td><td>1</td></tr><tr class="odd"><td>6</td><td>5</td><td>1</td></tr><tr class="even"><td>8</td><td>6</td><td>2</td></tr><tr class="odd"><td>9</td><td>7</td><td>2</td></tr></tbody></table><p>   因此，判断是否是连续打卡的方法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">tdate,</span><br><span class="line">row_number () <span class="keyword">over</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> uid <span class="keyword">ORDER</span> <span class="keyword">BY</span> tdate ) date_rank </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`打卡`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">is_flag = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>   在这里，使用 <figure class="highlight plain"><figcaption><span>over ()```方法生成连续数列：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|uid|tdate|date_rank|</span><br><span class="line">|--|--|--|</span><br><span class="line">|1|2020/2/1|1|</span><br><span class="line">|1|2020/2/3|2|</span><br><span class="line">|1|2020/2/4|3|</span><br><span class="line">|1|2020/2/6|4|</span><br><span class="line">|1|2020/2/7|5|</span><br><span class="line">|1|2020/2/8|6|</span><br><span class="line">|2|2020/2/1|1|</span><br><span class="line">|2|2020/2/4|2|</span><br><span class="line">|2|2020/2/5|3|</span><br><span class="line">|2|2020/2/6|4|</span><br><span class="line">|2|2020/2/7|5|</span><br><span class="line">|2|2020/2/8|6|</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">SELECT</span><br><span class="line">uid,</span><br><span class="line">tdate,</span><br><span class="line">date_rank,</span><br><span class="line">( date_format ( tdate, &quot;% e&quot; )- date_rank ) AS day_cha </span><br><span class="line">FROM</span><br><span class="line">( SELECT uid, tdate, row_number () over ( PARTITION BY uid ORDER BY tdate ) date_rank FROM `打卡` WHERE is_flag = 1 ) t1</span><br></pre></td></tr></table></figure></p><table><thead><tr class="header"><th>uid</th><th>tdate</th><th>date_rank</th><th>day_cha</th></tr></thead><tbody><tr class="odd"><td>1</td><td>2020/2/1</td><td>1</td><td>0</td></tr><tr class="even"><td>1</td><td>2020/2/3</td><td>2</td><td>1</td></tr><tr class="odd"><td>1</td><td>2020/2/4</td><td>3</td><td>1</td></tr><tr class="even"><td>1</td><td>2020/2/6</td><td>4</td><td>2</td></tr><tr class="odd"><td>1</td><td>2020/2/7</td><td>5</td><td>2</td></tr><tr class="even"><td>1</td><td>2020/2/8</td><td>6</td><td>2</td></tr><tr class="odd"><td>2</td><td>2020/2/1</td><td>1</td><td>0</td></tr><tr class="even"><td>2</td><td>2020/2/4</td><td>2</td><td>2</td></tr><tr class="odd"><td>2</td><td>2020/2/5</td><td>3</td><td>2</td></tr><tr class="even"><td>2</td><td>2020/2/6</td><td>4</td><td>2</td></tr><tr class="odd"><td>2</td><td>2020/2/7</td><td>5</td><td>2</td></tr><tr class="even"><td>2</td><td>2020/2/8</td><td>6</td><td>2</td></tr></tbody></table><h2 id="统计连续打卡天数-1">统计连续打卡天数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">day_cha,</span><br><span class="line"><span class="keyword">count</span>( tdate ) flag_days </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">tdate,</span><br><span class="line">date_rank,</span><br><span class="line">( <span class="keyword">date_format</span>( tdate, <span class="string">"% e"</span> )- date_rank ) <span class="keyword">AS</span> day_cha </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">( <span class="keyword">SELECT</span> uid, tdate, row_number () <span class="keyword">over</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> uid <span class="keyword">ORDER</span> <span class="keyword">BY</span> tdate ) date_rank <span class="keyword">FROM</span> <span class="string">`打卡`</span> <span class="keyword">WHERE</span> is_flag = <span class="number">1</span> ) t1 </span><br><span class="line">) t2 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">uid,</span><br><span class="line">day_cha</span><br></pre></td></tr></table></figure><table><thead><tr class="header"><th>uid</th><th>day_cha</th><th>flag_days</th></tr></thead><tbody><tr class="odd"><td>1</td><td>0</td><td>1</td></tr><tr class="even"><td>1</td><td>1</td><td>2</td></tr><tr class="odd"><td>1</td><td>2</td><td>3</td></tr><tr class="even"><td>2</td><td>0</td><td>1</td></tr><tr class="odd"><td>2</td><td>2</td><td>5</td></tr></tbody></table><h2 id="区分概念最近连续打卡天数和最长连续打卡天数">区分概念：最近连续打卡天数和最长连续打卡天数</h2><p>   最长连续打卡天数就是取连续打卡天数的最大值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">day_cha,</span><br><span class="line"><span class="keyword">count</span>( tdate ) flag_days </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">tdate,</span><br><span class="line">date_rank,</span><br><span class="line">( <span class="keyword">date_format</span>( tdate, <span class="string">"% e"</span> )- date_rank ) <span class="keyword">AS</span> day_cha </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">( <span class="keyword">SELECT</span> uid, tdate, row_number () <span class="keyword">over</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> uid <span class="keyword">ORDER</span> <span class="keyword">BY</span> tdate ) date_rank <span class="keyword">FROM</span> <span class="string">`打卡`</span> <span class="keyword">WHERE</span> is_flag = <span class="number">1</span> ) t1 </span><br><span class="line">) t2 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">uid,</span><br><span class="line">day_cha</span><br></pre></td></tr></table></figure><p>   最近连续打卡天数是去连续打卡天数的末尾值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   在实际的工作情境中，统计员工的连续打卡天数是一个十分重要的应用。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>lambda 函数</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/04/13/lambda-%E5%87%BD%E6%95%B0/"/>
    <id>http：//zhouweidong.ml/2020/04/13/lambda-函数/</id>
    <published>2020-04-13T03:33:31.000Z</published>
    <updated>2020-04-13T09:19:44.122Z</updated>
    
    <content type="html"><![CDATA[<p>  lambda 函数是 python 数据分析中比较常用的一个函数，属于匿名函数，即无需声明函数名称。<br></p><a id="more"></a><p>   简单示例如下：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> v: len (v)</span><br></pre></td></tr></table></figure></p><p>   在 lambda 函数中，冒号前面填写参数，冒号后面填写表达式，表达式的结果就是返回值，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len (v)</span><br></pre></td></tr></table></figure><p>   明显，因为返回值只能是一个，所以 lambda 函数只能有一个表达式。</p><p>  lambda 函数还可以进一步与 map () 函数和 filter () 函数结合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data [<span class="string">""</span>] = data [<span class="string">""</span>].map (<span class="keyword">lambda</span> x: x**<span class="number">2</span>)</span><br><span class="line">data [<span class="string">""</span>] = data [<span class="string">""</span>].filter (<span class="keyword">lambda</span> x: x%<span class="number">2</span> == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  lambda 函数是 python 数据分析中比较常用的一个函数，属于匿名函数，即无需声明函数名称。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据分析" scheme="http%EF%BC%9A//zhouweidong.ml/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Pandas" scheme="http%EF%BC%9A//zhouweidong.ml/tags/Pandas/"/>
    
      <category term="lambda" scheme="http%EF%BC%9A//zhouweidong.ml/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>粉笔模考经验总结</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/04/01/%E7%B2%89%E7%AC%94%E6%A8%A1%E8%80%83%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>http：//zhouweidong.ml/2020/04/01/粉笔模考经验总结/</id>
    <published>2020-04-01T01:41:50.000Z</published>
    <updated>2020-04-01T04:15:59.385Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19bn9DGmO+YzoAHZrcAn5BX7KqYWQE3UIeikSyQdwQQhwYib2ypTJklC8mRokZ+aV+MkUVHpBoEW2ChUAg2567hxGzHhiWDevQocsWes+30pCZyvZ4W9KkCU36KEcmmvUZ1KfyUUGXvqyUun3RZzTAAjlpPxHL5nFQim6aqULETv0gXEtc8HTk0xYBkFYOg95jzKY3B/k1MWQCwMuDbOG29PBYfnYavMAPK4Q/M9Wn4/VeRoeo92gBfQanhL9405ZMbou9BxUHlIWKgB/ylsVH1960jvSoJRbyDVrY4hyze8TeMgyaOYG5s4mQTi+VPRuYaSukOMwpgEg6B8AcWajkErctW++X6mRHEvtfwlU83JNu1Uz1EvMM3UBjLp+gd4lDR9P6JI0H7Pk/vN8JFAy16Jz/lCH6FFQQXWtl/t+IdCg+YRUd9xV4LCtSjBU0mKUnOPoUTzbQA2YzoqNK+svms4hm7cUbtM4UoVXY+tKXIRqoq0EJE3q5EoyUC0Yiu6QkbiBv1kQ5q5G8748dN35lQwzUgV96rn9NPbNr25+7frfHwLFpO+QAJIHDrKkS/f1AVOuw5XleZc47uR/livnpluSdSbXk0RpliZ1DnbGu3bstbIOYdUQV80niaPG7TjcEBarv6x6lEq0aVIdKEWdRRx46qQjRmBtunbXFa3BVa93HmHUK2JzNDujnjfDtIPJXovlizch7c+hUDjvFRyf9bK5dziQTDqv5JTteCL0WNcxhvDbFj25yKBwF1NVwp4KEUM3hoxPrBLkvnGDZh0QIBeuP8STT1xR7aVg/1D/mzSwyk/qpuEDBTfIu5GQ1k79BTXAyA7hzAxC78TYwBAI3rh4SlYriDBTnQhuvIDDJt73DhVM9pz/LhLSJY5k2krVMth++YOdxLT95c0HStX9Ln5lIBXlA6ddNBorc9udVMWinllSlJXtAlnb4I+rii00FYd8hs6I9DpA4bRfYt65wh8EokAVPs8ovUGw545hzx51Wy7xxcKS0gaawNiOVSRXmrd4TV44iB5Y1uGXLDdemqwkllNYtLq7p8BbaUPMqO6QV/SG2N6NrhatgjelyCo37SdLlW2PA7wRkxqKH1h6CfH5tqD++av/SqRwoo+p9L43rP/TdeKcs/nu314UmPX671Z0+V1rdi4jg4pomZ6vKQ+zjN2lcbaZhK2NQQTq+k6XUuBvSj/kNwb2ip1BFT047rBUVd2omrfOhf+BVzuVT6tJjBA2IosdrFS8u/3QoL+im0b/z2x/xPqGBsi0MOWi/oS3a9hLTBzh1q8pX85ty7qncASCXjBJwpIyVU4pelLM+2zryrqjqGNN8qbpZn8mtAunVGKIRKEtkC/91x98EJCEaO2NYZklR3LtnqPR5e24ED8uINqt5jYyPMCQmMgwFq05y5IkryTQdhlT6UtnVGt9pgJ6Raf4cBM4WEUmCiO7sGtY8K+WuDLhhJsUMqJHzjHCYTWtLUXEPc7f2FLFH3YX+C2AnKFUEDyPsXg50m7CXml1EiPa6T57u3ehRQHsUXO6fhlwFbleIUqOyuxfgM7/ofoqYs1O9MsdEv7/22986LENlnrIldlvovX8HoQhdlUOV2shPpLUk+gBqSTcvkQm4GCGeHYXUAH3b7XywKHZwCb9ntkzHiIc1jkM1VAP0JO4nccE5fTSYUJ1sVnu6jfIkgdw/ryXjP8uDIzh1f5C+8hP7bgPsuqXuJPmh1eVoBxroPV4QZEGwiCoNZj3dD9kfO1e3qHQcaObO5B30BVYGE34xG7DQ9rjdkZuxQKan2MBrF7POA8FU334JSKgn2jsHMlG7waJEEZoEVL+C4az4kVxrLUhCiJpqvxrd1RmlLFb/xYB4k8HSge24/PIbAI6M3ASszmyn1dHPNZ4WBM7eGvSJ+gqUuTTlymqntcFE8vAgjmmnRbGzcjjEtZAxtloYzktwtozqZrR8qX0z2qGzQ3HHEWPSAKCQBGdtuyy0IbqCDWfnQ7RLXFHfqc41Fcp2aCzwA/wzWclLhTMgJnpR2wkiTKuaaR5giclLz8wSVL5UA/7LEwSwyNxN3n0m+KIeYAHP0GsXv9uNPI/10QoNmN7h15SjV3cw0iaTR+Y2dQFXR7kfC3EYHVBllykUmHDai4ZTPBKfUHXcrTq1fKgDvKv2FLgJZbYQ58gRXxMTAwI4PdGgxby4nmTH3NLP2mdVs8kZuDy2t2rGQMkWFyxdFmNspQqol9dMpqJbK8pD97IcqWBWwmIhB09WFAbKOWmSqD6qsTf9Fcs7o9pFunq4V07056wlWUp0DV/dVTOzb7FTVhGngxsKpOWAVf0LnH4EsPV2eNU7Rbsqnm7Iktvp1ENcsScmPhhwKs3FuzFrpu8dIiSHr8IP4sAByaMeCFdakzxHaAl4kiWAOk4w4m3aK+PlIPb29Pc+IYsTmzqT5kTvF0+0xdtC12qL/fe2TfECpQowoRAx9MZZ7kLSoShFPbA877eyH4soJ47N+E6lA1vCkqxNNmueHH7IqNPf1jey7dxBU6Pjh2bOx7+Hr/RKh0xQh4gnNEgiB/+IFV3j9dvk088aeMQ==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>K-means 聚类算法</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/03/31/K-means-%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/"/>
    <id>http：//zhouweidong.ml/2020/03/31/K-means-聚类算法/</id>
    <published>2020-03-31T09:09:11.000Z</published>
    <updated>2020-03-31T11:10:39.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本原理">1. 基本原理</h1><p>  K-Means 聚类算法的目的是：把 n 个点（可以是样本的一次观察或一个实例）划分到 k 个聚类中。工作原理是：</p><ul><li>从数据集中随机选取 k 个点作为初始的类中心点。</li><li>计算每个点与每个类中心点的距离，将每个点分配到最近的类中心点，然后重新计算每个类的中心店。</li><li>重复上一步，直至类中心点不再发生变动或手动设置最大迭代次数。</li></ul><a id="more"></a><h1 id="实例球队分类">2. 实例：球队分类</h1><p>   实例：亚洲球队分类，目的是将球队分成三个梯度：</p><h2 id="python-实现">2.1. Python 实现</h2><p>   第一步：导入和查看数据： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv (<span class="string">"D:\ 代码 \ 数据 \sports team.csv"</span>)</span><br><span class="line">data.head ()</span><br></pre></td></tr></table></figure></p><table border="1" class="dataframe"><thead><tr style="text-align: center;"><th></th><th>国家</th><th>2019 年国际排名</th><th>2018 世界杯</th><th>2015 亚洲杯</th></tr></thead><tbody><tr><th>0</th><td>中国</td><td>73</td><td>40</td><td>7</td></tr><tr><th>1</th><td>日本</td><td>60</td><td>15</td><td>5</td></tr><tr><th>2</th><td>韩国</td><td>61</td><td>19</td><td>2</td></tr><tr><th>3</th><td>伊朗</td><td>34</td><td>18</td><td>6</td></tr><tr><th>4</th><td>沙特</td><td>67</td><td>26</td><td>10</td></tr></tbody></table><p>   第二步：定义训练数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line">train_data = pd.DataFrame (data [[<span class="string">"2019 年国际排名"</span>, <span class="string">"2018 世界杯"</span>, <span class="string">"2015 亚洲杯"</span>]])</span><br><span class="line">kmeans = KMeans (n_clusters=<span class="number">3</span>)</span><br><span class="line">train_data = preprocessing.MinMaxScaler ().fit_transform (train_data)</span><br></pre></td></tr></table></figure><p>   第三步：运行 k-means 聚类 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kmeans.fit (train_data)</span><br><span class="line">predict_result = kmeans.predict (train_data)</span><br><span class="line">result = pd.concat ((data, pd.DataFrame (predict_result)), axis=<span class="number">1</span>)</span><br><span class="line">result.rename (&#123;<span class="number">0</span>:<span class="string">"聚类"</span>&#125;, axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">result.head ()</span><br></pre></td></tr></table></figure></p><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe"><thead><tr style="text-align: right;"><th></th><th>国家</th><th>2019 年国际排名</th><th>2018 世界杯</th><th>2015 亚洲杯</th><th>聚类</th></tr></thead><tbody><tr><th>0</th><td>中国</td><td>73</td><td>40</td><td>7</td><td>1</td></tr><tr><th>1</th><td>日本</td><td>60</td><td>15</td><td>5</td><td>2</td></tr><tr><th>2</th><td>韩国</td><td>61</td><td>19</td><td>2</td><td>2</td></tr><tr><th>3</th><td>伊朗</td><td>34</td><td>18</td><td>6</td><td>2</td></tr><tr><th>4</th><td>沙特</td><td>67</td><td>26</td><td>10</td><td>2</td></tr></tbody></table></div><h2 id="r-实现">2.2. R 实现</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(tidyverse)</span><br><span class="line"></span><br><span class="line">data &lt;- read_csv (<span class="string">"D:/ 代码 / 数据 /sports team.csv"</span>)</span><br><span class="line">result &lt;- kmeans (data [<span class="number">2</span>:<span class="number">4</span>], <span class="number">3</span>)</span><br><span class="line">result$cluster</span><br></pre></td></tr></table></figure><h2 id="stata-实现">2.3. stata 实现</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insheet</span> using <span class="string">"D:/ 代码 / 数据 /sports team.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rename</span> 年国际排名 x1</span><br><span class="line"><span class="keyword">rename</span> 世界杯 x2</span><br><span class="line"><span class="keyword">rename</span> 亚洲杯 x3</span><br><span class="line"><span class="keyword">cluster</span> kmeans x1 x2 x3, k (3)</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本原理&quot;&gt;1. 基本原理&lt;/h1&gt;
&lt;p&gt;  K-Means 聚类算法的目的是：把 n 个点（可以是样本的一次观察或一个实例）划分到 k 个聚类中。工作原理是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从数据集中随机选取 k 个点作为初始的类中心点。&lt;/li&gt;
&lt;li&gt;计算每个点与每个类中心点的距离，将每个点分配到最近的类中心点，然后重新计算每个类的中心店。&lt;/li&gt;
&lt;li&gt;重复上一步，直至类中心点不再发生变动或手动设置最大迭代次数。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2020/03/31/%E6%AC%A2%E8%BF%8E%E8%AF%AD/"/>
    <id>http：//zhouweidong.ml/2020/03/31/欢迎语/</id>
    <published>2020-03-31T06:08:48.021Z</published>
    <updated>2020-09-03T14:34:25.119Z</updated>
    
    <content type="html"><![CDATA[<p>   欢迎来到我的博客，我会不定期地发布我的原创文章以及转载文章，内容涉及各个方面，但是以探讨宏观经济为主。 <a id="more"></a> ## 更新时间</p><h3 id="正常更新时间">1. 正常更新时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> 每周日晚 10：00</span><br></pre></td></tr></table></figure><h3 id="最晚更新时间">2. 最晚更新时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> 每周日晚 12：00</span><br></pre></td></tr></table></figure><h3 id="特殊情况">3. 特殊情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> 如遇到本人懒癌发作，可直接留言催更。</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   欢迎来到我的博客，我会不定期地发布我的原创文章以及转载文章，内容涉及各个方面，但是以探讨宏观经济为主。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ttrss</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2019/12/03/ttrss/"/>
    <id>http：//zhouweidong.ml/2019/12/03/ttrss/</id>
    <published>2019-12-03T02:17:02.000Z</published>
    <updated>2020-09-03T12:56:53.836Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      本篇文章主要是记录我搭建TTRSS以及与此相关的插件等的过程，方便未来复建。&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>线程和进程</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2019/09/12/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
    <id>http：//zhouweidong.ml/2019/09/12/线程和进程/</id>
    <published>2019-09-12T07:39:41.000Z</published>
    <updated>2020-09-03T12:59:22.404Z</updated>
    
    <content type="html"><![CDATA[<p>   线程是任务调度和执行的基本单位，而进程是操作系统资源分配的基本单位。</p><a id="more"></a><h1 id="二者的区别一个简单类比">1. 二者的区别：一个简单类比</h1><p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190912182153.png"></p><h1 id="多进程">2. 多进程</h1><h2 id="使用-pool-创建多进程">2.1 使用 Pool 创建多进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">task_list = [</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/91b702f4f24a'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/8e9e0b1b3a11'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/7ef0f606c10b'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/b117993f5008'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/583d83f1ff81'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/91b702f4f24a'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/8e9e0b1b3a11'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/7ef0f606c10b'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/b117993f5008'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/583d83f1ff81'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span></span><br><span class="line">                      <span class="string">'(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get (url,</span><br><span class="line">                            headers=header,</span><br><span class="line">                            timeout=<span class="number">30</span></span><br><span class="line">                            )</span><br><span class="line">    <span class="keyword">return</span> response.status_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Pool (<span class="number">10</span>)</span><br><span class="line">    time_old = time.time ()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> p.map (download, task_list):</span><br><span class="line">        print (item)</span><br><span class="line">    time_new = time.time ()</span><br><span class="line">    time_cost = time_new - time_old</span><br><span class="line">    print (time_cost)</span><br></pre></td></tr></table></figure><h2 id="使用-process-对象创建多进程">2.2 使用 Process 对象创建多进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多进程，使用 Process 对象 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line">task_list = [</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/91b702f4f24a'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/8e9e0b1b3a11'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/7ef0f606c10b'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/b117993f5008'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/583d83f1ff81'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span></span><br><span class="line">                      <span class="string">'(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get (url,</span><br><span class="line">                            headers=header,</span><br><span class="line">                            timeout=<span class="number">30</span></span><br><span class="line">                            )</span><br><span class="line">    print (response.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> task_list:</span><br><span class="line">        p = Process (target=download, args=(item,))  <span class="comment"># target = 调用的函数名，args=（函数的参数，)</span></span><br><span class="line">        p.start ()</span><br><span class="line">        p.join ()</span><br></pre></td></tr></table></figure><h1 id="多线程">3. 多线程</h1><h2 id="调用-thread-类的构造器创建线程">3.1 调用 Thread 类的构造器创建线程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个普通的 action 函数，该函数准备作为线程执行体 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(max)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (max):</span><br><span class="line">        <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">        <span class="comment"># 线程对象的 getName () 方法获取当前线程的名字 </span></span><br><span class="line">        print (threading.current_thread ().getName () +  <span class="string">""</span> + str (i))</span><br><span class="line"><span class="comment"># 下面是主程序（也就是主线程的执行体）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">100</span>):</span><br><span class="line">    <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">    print (threading.current_thread ().getName () +  <span class="string">" "</span> + str (i))</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">20</span>:</span><br><span class="line">        <span class="comment"># 创建并启动第一个线程 </span></span><br><span class="line">        t1 =threading.Thread (target=action,args=(<span class="number">100</span>,))</span><br><span class="line">        t1.start ()</span><br><span class="line">        <span class="comment"># 创建并启动第二个线程 </span></span><br><span class="line">        t2 =threading.Thread (target=action,args=(<span class="number">100</span>,))</span><br><span class="line">        t2.start ()</span><br><span class="line">print (<span class="string">' 主线程执行完成！'</span>)</span><br></pre></td></tr></table></figure><h2 id="继承-thread-类创建线程类">3.2 继承 Thread 类创建线程类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过继承 threading.Thread 类来创建线程类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FkThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 重写 run () 方法作为线程执行体 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        <span class="keyword">while</span> self.i &lt; <span class="number">100</span>:</span><br><span class="line">            <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">            <span class="comment"># 线程对象的 getName () 方法获取当前线程的名字 </span></span><br><span class="line">            print (threading.current_thread ().getName () +  <span class="string">""</span> + str (self.i))</span><br><span class="line">            self.i += <span class="number">1</span></span><br><span class="line"><span class="comment"># 下面是主程序（也就是主线程的执行体）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">100</span>):</span><br><span class="line">    <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">    print (threading.current_thread ().getName () +  <span class="string">" "</span> + str (i))</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">20</span>:</span><br><span class="line">        <span class="comment"># 创建并启动第一个线程 </span></span><br><span class="line">        ft1 = FkThread ()</span><br><span class="line">        ft1.start ()</span><br><span class="line">        <span class="comment"># 创建并启动第二个线程 </span></span><br><span class="line">        ft2 = FkThread ()</span><br><span class="line">        ft2.start ()</span><br><span class="line">print (<span class="string">' 主线程执行完成！'</span>)</span><br></pre></td></tr></table></figure><h2 id="线程池">3.3 线程池</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个准备作为线程任务的函数 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(max)</span>:</span></span><br><span class="line">    my_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (max):</span><br><span class="line">        print (threading.current_thread ().name + <span class="string">'  '</span> + str (i))</span><br><span class="line">        my_sum += i</span><br><span class="line">    <span class="keyword">return</span> my_sum</span><br><span class="line"><span class="comment"># 创建一个包含 2 条线程的线程池 </span></span><br><span class="line">pool = ThreadPoolExecutor (max_workers=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 向线程池提交一个 task, 50 会作为 action () 函数的参数 </span></span><br><span class="line">future1 = pool.submit (action, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 向线程池再提交一个 task, 100 会作为 action () 函数的参数 </span></span><br><span class="line">future2 = pool.submit (action, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># 判断 future1 代表的任务是否结束 </span></span><br><span class="line">print (future1.done ())</span><br><span class="line">time.sleep (<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 判断 future2 代表的任务是否结束 </span></span><br><span class="line">print (future2.done ())</span><br><span class="line"><span class="comment"># 查看 future1 代表的任务返回的结果 </span></span><br><span class="line">print (future1.result ())</span><br><span class="line"><span class="comment"># 查看 future2 代表的任务返回的结果 </span></span><br><span class="line">print (future2.result ())</span><br><span class="line"><span class="comment"># 关闭线程池 </span></span><br><span class="line">pool.shutdown ()</span><br></pre></td></tr></table></figure><h1 id="协程异步爬虫">4. 协程：异步爬虫</h1><h2 id="await-方法">4.1 await 方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep (n*<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        print (<span class="string">f"数字 < span class="subst">&#123;n&#125;</span> 被取消"</span>)<br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    tasks = [num (i) <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">10</span>)]</span><br><span class="line">    complete, pending = <span class="keyword">await</span> asyncio.wait (tasks, timeout=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> complete:</span><br><span class="line">        print (<span class="string">"当前数字"</span>,i.result ())</span><br><span class="line">    <span class="keyword">if</span> pending:</span><br><span class="line">        print (<span class="string">"取消未完成的任务"</span>)</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> pending:</span><br><span class="line">            p.cancel ()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    loop = asyncio.get_event_loop ()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        loop.run_until_complete (main ())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        loop.close ()</span><br></pre></td></tr></table></figure><h2 id="gather-方法">4.2 gather 方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep (n * <span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        print (<span class="string">f"数字 < span class="subst">&#123;n&#125;</span> 被取消"</span>)<br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    tasks = [num (i) <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">10</span>)]</span><br><span class="line">    complete = <span class="keyword">await</span> asyncio.gather (*tasks)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> complete:</span><br><span class="line">        print (<span class="string">"当前数字"</span>, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    loop = asyncio.get_event_loop ()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        loop.run_until_complete (main ())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        loop.close ()</span><br></pre></td></tr></table></figure><h2 id="create_task-方法">4.3 create_task () 方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(t)</span>:</span></span><br><span class="line">    print (<span class="string">'--&gt;'</span>, t)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep (<span class="number">0.5</span>)</span><br><span class="line">    print (<span class="string">'&lt;--'</span>, t)</span><br><span class="line">    <span class="keyword">return</span> t * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># loop = asyncio.get_event_loop ()</span></span><br><span class="line"></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        cor = a (cnt)   <span class="comment"># coroutine</span></span><br><span class="line">        resp = loop.create_task (cor)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep (<span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># print (resp)</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop ()</span><br><span class="line"></span><br><span class="line">loop.run_until_complete (b ())</span><br></pre></td></tr></table></figure><hr><p><a href="https://zhuanlan.zhihu.com/p/76695507" target="_blank" rel="noopener">如何让你写的爬虫速度像坐火箭一样快</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   线程是任务调度和执行的基本单位，而进程是操作系统资源分配的基本单位。&lt;/p&gt;
    
    </summary>
    
      <category term="Python爬虫" scheme="http%EF%BC%9A//zhouweidong.ml/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http%EF%BC%9A//zhouweidong.ml/tags/Python/"/>
    
      <category term="爬虫" scheme="http%EF%BC%9A//zhouweidong.ml/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="基础知识" scheme="http%EF%BC%9A//zhouweidong.ml/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>ajax：动态加载</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2019/09/09/ajax%EF%BC%9A%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"/>
    <id>http：//zhouweidong.ml/2019/09/09/ajax：动态加载/</id>
    <published>2019-09-09T13:34:41.000Z</published>
    <updated>2020-09-03T12:57:21.519Z</updated>
    
    <content type="html"><![CDATA[<p>  Ajax 可以利用 JavaScript 在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页。</p><a id="more"></a><h1 id="ajax-分析方法">1. Ajax 分析方法</h1><p>   在 Chrome 浏览器中，可以按住 f12，打开开发者工具，切换到 Network 选项卡，直接点击 XHR，清空所有内容后重新加载，分析每个请求的参数信息。然后，可以分析每个请求的响应内容。</p><h1 id="实例抓取抓取肯德基门面信息">2. 实例：抓取抓取肯德基门面信息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 抓取肯德基门面信息 </span></span><br><span class="line"><span class="comment"># http://www.kfc.com.cn/kfccda/storelist/index.aspx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">page = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    url = <span class="string">'http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname'</span></span><br><span class="line">    parmas = &#123;</span><br><span class="line">        <span class="string">'cname'</span>: <span class="string">' 郑州 '</span>,</span><br><span class="line">        <span class="string">'pid'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'pageIndex'</span>: page,</span><br><span class="line">        <span class="string">'pageSize'</span>: <span class="string">'10'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post (url, data=parmas)</span><br><span class="line">    print (response.json ())</span><br><span class="line">    <span class="keyword">if</span> response.json ().get (<span class="string">'Table1'</span>, <span class="string">''</span>):</span><br><span class="line">       page += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">break</span></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  Ajax 可以利用 JavaScript 在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页。&lt;/p&gt;
    
    </summary>
    
      <category term="Python爬虫" scheme="http%EF%BC%9A//zhouweidong.ml/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http%EF%BC%9A//zhouweidong.ml/tags/Python/"/>
    
      <category term="爬虫" scheme="http%EF%BC%9A//zhouweidong.ml/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="基础" scheme="http%EF%BC%9A//zhouweidong.ml/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>scrapy 学习（三）</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2019/09/08/scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http：//zhouweidong.ml/2019/09/08/scrapy学习（三）/</id>
    <published>2019-09-08T12:21:29.000Z</published>
    <updated>2020-09-02T15:48:39.147Z</updated>
    
    <content type="html"><![CDATA[<p>   在 scrapy 爬虫框架中，本身并没有没有 JS engine, 因此它无法爬取 JavaScript 生成的动态网页，只能爬取静态网页，splash 则弥补了这一点。所谓的 Splash, 就是一个 Javascript 渲染服务。它是一个实现了 HTTP API 的轻量级浏览器，Splash 是用 Python 实现的，同时使用 Twisted 和 QT。Twisted（QT）用来让服务具有异步处理能力，以发挥 webkit 的并发能力。 <a id="more"></a></p><h1 id="运行-splash">1. 运行 splash</h1><p>   首先需要运行 docker: <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 第一步：先打开 Docker Desktop</span><br><span class="line"># 第二步：在 < span class="built_in">cmd</span> 中运行相应的命令 <br><span class="line">docker login daocloud.io</span><br><span class="line"># 运行 splash</span><br><span class="line">docker run -p <span class="number">5023</span>:<span class="number">5023</span> -p <span class="number">8050</span>:<span class="number">8050</span> -p <span class="number">8051</span>:<span class="number">8051</span> scrapinghub/splash</span><br></pre></td></tr></table></figure></p><p>   在网页中直接访问：http://localhost:8050，即可代开 splash 服务的网页。</p><h1 id="渲染网页">2. 渲染网页</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://localhost:8050/render.html?url = 要请求的网址 & amp;timeout = 超时时间 & amp;wait = 等待时间  </span></span><br><span class="line"><span class="string"> # url: 必填 timeout 和 wait: 选填 '</span></span><br></pre></td></tr></table></figure><h1 id="在-scrapy-爬虫框架中使用-splash">3. 在 scrapy 爬虫框架中，使用 splash</h1><h2 id="配置-settings.py-文件">3.1 配置 settings.py 文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 Splash 服务的地址 </span></span><br><span class="line">SPLASH_URL = <span class="string">'http://192.168.59.103:8050'</span></span><br><span class="line"><span class="comment"># 在 settings 中的 DOWNLOADER_MIDDLEWARES 加上 splash 的中间件，并设置 HttpCompressionMiddleware 对象的优先级 </span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class="number">723</span>,</span><br><span class="line">    <span class="string">'scrapy_splash.SplashMiddleware'</span>: <span class="number">725</span>,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">810</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 在 SPIDER_MIDDLEWARES 中安装 splash 的 SplashDeduplicateArgsMiddleware 中间件 </span></span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 您还可以设置对应的过滤中间件 ——DUPEFILTER_CLASS</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></span><br><span class="line"><span class="comment"># 您可以设置 scrapy.contrib.httpcache.FilesystemCacheStorage 来使用 Splash 的 HTTP 缓存 </span></span><br><span class="line">HTTPCACHE_STORAGE = <span class="string">'scrapy_splash.SplashAwareFSCacheStorage'</span></span><br></pre></td></tr></table></figure><h2 id="一个简单的实例">3.2 一个简单的实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">lua = <span class="string">'''</span></span><br><span class="line"><span class="string">      function main (splash)</span></span><br><span class="line"><span class="string">          return 'hello'</span></span><br><span class="line"><span class="string">      end</span></span><br><span class="line"><span class="string">      '''</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://localhost:8050/execute?lua_source='</span> + quote (lua)</span><br><span class="line">response = requests.get (url)</span><br><span class="line">print (response.text)</span><br></pre></td></tr></table></figure><h1 id="两个实例">4. 两个实例</h1><h2 id="实例-1-抓取我不是药神的豆瓣评论">4.1 实例 1: 抓取《我不是药神》的豆瓣评论</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决空行问题：newline=''；解决 csv 文档在 excel 中中文乱码问题：encoding='utf_8_sig'</span></span><br><span class="line">fw = open (<span class="string">'F:\\onedrive\\OneDrive - ruc.edu.cn\\ 技能 \\ 爬虫 \\ 资料 \\3\\ 第二节 \\splash\\cases\\douban_comments.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf_8_sig'</span>)   <span class="comment"># 创建和打开文档 </span></span><br><span class="line">writer = csv.writer (fw)  </span><br><span class="line">writer.writerow ([<span class="string">'comment_time'</span>,<span class="string">'comment_content'</span>])  <span class="comment"># 按行写入 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">    url = <span class="string">'http://localhost:8050/render.html?url=https://movie.douban.com/subject/26752088/comments?start=&#123;&#125;&amp;limit=20&amp;sort=new_score&amp;status=P&amp;timeout=30&amp;wait=0.5'</span>.format (i*<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># url = 'https://movie.douban.com/subject/26752088/comments?start=&#123;&#125;&amp;limit=20&amp;sort=new_score&amp;status=P'.format (i*20)</span></span><br><span class="line">    response = requests.get (url)</span><br><span class="line">    tree = etree.HTML (response.text)</span><br><span class="line">    comments = tree.xpath (<span class="string">'//div [@class="comment"]'</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> comments:</span><br><span class="line">        comment_time = item.xpath (<span class="string">'./h3/span [2]/span [contains (@class,"comment-time")]/@title'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># comment_time = int (time.mktime (time.strptime (comment_time,'% Y-% m-% d % H:% M:% S')))</span></span><br><span class="line">        comment_content = item.xpath (<span class="string">'./p/span/text ()'</span>)[<span class="number">0</span>].strip ()</span><br><span class="line">        print (comment_time)</span><br><span class="line">        print (comment_content)</span><br><span class="line">        writer.writerow ([comment_time,comment_content])</span><br></pre></td></tr></table></figure><h2 id="实例-2抓取京东商品信息">4.2 实例 2：抓取京东商品信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">lua = <span class="string">'''</span></span><br><span class="line"><span class="string">      function main (splash, args)</span></span><br><span class="line"><span class="string">          local treat = require ("treat")</span></span><br><span class="line"><span class="string">          local response = splash:http_get ("https://search.jd.com/Search?keyword = 相机 & amp;enc=utf-8")</span></span><br><span class="line"><span class="string">              return &#123;</span></span><br><span class="line"><span class="string">                  html = treat.as_string (response.body),</span></span><br><span class="line"><span class="string">                  url = response.url,</span></span><br><span class="line"><span class="string">                  status = response.status</span></span><br><span class="line"><span class="string">              &#125;    </span></span><br><span class="line"><span class="string">      end</span></span><br><span class="line"><span class="string">      '''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线上部署的服务，需要将 localhost 换成服务器的公网地址（不是内网地址）</span></span><br><span class="line">url = <span class="string">'http://localhost:8050/execute?lua_source='</span> + quote (lua)</span><br><span class="line">response = requests.get (url)</span><br><span class="line"></span><br><span class="line">html = json.loads (response.text)[<span class="string">'html'</span>]</span><br><span class="line"></span><br><span class="line">tree = etree.HTML (html)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单品 </span></span><br><span class="line">products_1 = tree.xpath (<span class="string">'//div [@class="gl-i-wrap"]'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> products_1:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        name_1 = item.xpath (<span class="string">'./div [@class="p-name p-name-type-2"]/a/em/text ()'</span>)[<span class="number">0</span>]</span><br><span class="line">        price_1 = item.xpath (<span class="string">'./div [@class="p-price"]/strong/@data-price | ./div [@class="p-price"]/strong/i/text ()'</span>)[<span class="number">0</span>]</span><br><span class="line">        print (name_1)</span><br><span class="line">        print (price_1)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 套装 </span></span><br><span class="line">products_2 = tree.xpath (<span class="string">'//div [@class="tab-content-item tab-cnt-i-selected"]'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> products_2:</span><br><span class="line">    name_2 = item.xpath (<span class="string">'./div [@class="p-name p-name-type-2"]/a/em/text ()'</span>)[<span class="number">0</span>]</span><br><span class="line">    price_2 = item.xpath (<span class="string">'./div [@class="p-price"]/strong/@data-price | ./div [@class="p-price"]/strong/i/text ()'</span>)[<span class="number">0</span>]</span><br><span class="line">    print (name_2)</span><br><span class="line">    print (price_2)</span><br></pre></td></tr></table></figure><hr><p><a href="https://splash-cn-doc.readthedocs.io/zh_CN/latest/scripting-libs.html#treat" target="_blank" rel="noopener">可使用的 lua 库</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   在 scrapy 爬虫框架中，本身并没有没有 JS engine, 因此它无法爬取 JavaScript 生成的动态网页，只能爬取静态网页，splash 则弥补了这一点。所谓的 Splash, 就是一个 Javascript 渲染服务。它是一个实现了 HTTP API 的轻量级浏览器，Splash 是用 Python 实现的，同时使用 Twisted 和 QT。Twisted（QT）用来让服务具有异步处理能力，以发挥 webkit 的并发能力。
    
    </summary>
    
      <category term="Python爬虫" scheme="http%EF%BC%9A//zhouweidong.ml/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http%EF%BC%9A//zhouweidong.ml/tags/Python/"/>
    
      <category term="爬虫" scheme="http%EF%BC%9A//zhouweidong.ml/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="基础" scheme="http%EF%BC%9A//zhouweidong.ml/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>用 WebScraper 抓取豆瓣电影 Top250</title>
    <link href="http%EF%BC%9A//zhouweidong.ml/2019/09/07/%E7%94%A8WebScraper%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1Top250/"/>
    <id>http：//zhouweidong.ml/2019/09/07/用WebScraper抓取豆瓣电影Top250/</id>
    <published>2019-09-07T15:14:10.000Z</published>
    <updated>2020-09-03T13:01:10.127Z</updated>
    
    <content type="html"><![CDATA[<p>导入设置： <a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;_id&quot;:&quot;dbmovie_top250&quot;,&quot;startUrl&quot;:[&quot;https://movie.douban.com/top250?start=[0-225:25]&amp;filter=&quot;],&quot;selectors&quot;:[&#123;&quot;id&quot;:&quot;Movie_Info&quot;,&quot;type&quot;:&quot;SelectorElement&quot;,&quot;parentSelectors&quot;:[&quot;_root&quot;],&quot;selector&quot;:&quot;.grid_view li&quot;,&quot;multiple&quot;:true,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 电影排名 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;em&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 电影名 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;span.title:nth-of-type (1)&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 电影导演 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;p:nth-of-type (1)&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;(?&lt;= 导演: )(.*)(?= 主)&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 评价分数 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;span.rating_num&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 评价人数 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;span:nth-of-type (4)&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;^.*?(?= 人)&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 上映日期 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;p:nth-of-type (1)&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;[0-9]+&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 电影出品国家 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;p:nth-of-type (1)&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;(?&lt;=/)(.*)(?=/)&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 电影评论 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;span.inq&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;&quot;,&quot;delay&quot;:0&#125;]&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;导入设置：
    
    </summary>
    
      <category term="WebScraper" scheme="http%EF%BC%9A//zhouweidong.ml/categories/WebScraper/"/>
    
    
      <category term="爬虫" scheme="http%EF%BC%9A//zhouweidong.ml/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="chrome插件" scheme="http%EF%BC%9A//zhouweidong.ml/tags/chrome%E6%8F%92%E4%BB%B6/"/>
    
      <category term="WebScraper" scheme="http%EF%BC%9A//zhouweidong.ml/tags/WebScraper/"/>
    
  </entry>
  
</feed>
