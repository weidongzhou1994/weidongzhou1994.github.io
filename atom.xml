<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周卫东的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhouweidong.ml/"/>
  <updated>2020-12-08T13:45:15.960Z</updated>
  <id>http://zhouweidong.ml/</id>
  
  <author>
    <name>周卫东</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Power BI 学习 Day1</title>
    <link href="http://zhouweidong.ml/2020/12/08/Power-BI-%E5%AD%A6%E4%B9%A0-Day1/"/>
    <id>http://zhouweidong.ml/2020/12/08/Power-BI-学习-Day1/</id>
    <published>2020-12-08T13:16:58.000Z</published>
    <updated>2020-12-08T13:45:15.960Z</updated>
    
    <content type="html"><![CDATA[<p>   在 Power BI 中，可以很方便地为报表插入链接。</p><h1 id="a-href-https-docs-microsoft-com-zh-cn-power-bi-create-reports-power-bi-hyperlinks-in-tables-xiang-biao-zhong-cha-ru-chao-lian-jie-a"><a href="https://docs.microsoft.com/zh-cn/power-bi/create-reports/power-bi-hyperlinks-in-tables" target="_blank" rel="noopener">向表中插入超链接</a></h1><p>   如果数据已经包含 URL，可以通过将数据类别转换为 “Web URL” 插入超链接，具体操作如下图所示：</p><p><img src="https://picgo-1258437747.cos.ap-nanjing.myqcloud.com/20201208213456.png" alt="20201208213456"></p><p>   如果数据尚未包含 URL， 可以通过建立自定义列的方式插入超链接。</p><p>   对于长链接，可以在表中显示超链接图表，具体操作如下图所示：</p><p><img src="https://picgo-1258437747.cos.ap-nanjing.myqcloud.com/20201208214252.png" alt="20201208214252"></p><h1 id="a-href-https-docs-microsoft-com-zh-cn-power-bi-create-reports-service-add-hyperlink-to-text-box-xiang-wen-ben-kuang-cha-ru-chao-lian-jie-a"><a href="https://docs.microsoft.com/zh-cn/power-bi/create-reports/service-add-hyperlink-to-text-box" target="_blank" rel="noopener">向文本框插入超链接</a></h1><p>   插入文本框并输入一段文字后，可以选中部分文字插入超链接，具体操作如下：</p><p><img src="https://picgo-1258437747.cos.ap-nanjing.myqcloud.com/20201208214504.png" alt="20201208214504"></p><p><img src="https://picgo-1258437747.cos.ap-nanjing.myqcloud.com/20201208214513.png" alt="20201208214513"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   在 Power BI 中，可以很方便地为报表插入链接。&lt;/p&gt;
&lt;h1 id=&quot;a-href-https-docs-microsoft-com-zh-cn-power-bi-create-reports-power-bi-hyperlinks-in-tables-xi
      
    
    </summary>
    
    
      <category term="Power BI" scheme="http://zhouweidong.ml/tags/Power-BI/"/>
    
      <category term="数据分析" scheme="http://zhouweidong.ml/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="可视化" scheme="http://zhouweidong.ml/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode MySQL Day9</title>
    <link href="http://zhouweidong.ml/2020/09/07/%E2%80%9CLeetCode-MySQL-Day9/"/>
    <id>http://zhouweidong.ml/2020/09/07/“LeetCode-MySQL-Day9/</id>
    <published>2020-09-07T14:34:41.000Z</published>
    <updated>2020-09-07T14:49:43.376Z</updated>
    
    <content type="html"><![CDATA[<p>   第 9 天：<br></p><a id="more"></a><p>Write a SQL query to find all numbers that appear at least three times consecutively.</p><table><thead><tr><th>Id</th><th>Num</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>1</td></tr><tr><td>4</td><td>2</td></tr><tr><td>5</td><td>1</td></tr><tr><td>6</td><td>2</td></tr><tr><td>7</td><td>2</td></tr><tr><td>-</td><td>–</td></tr></tbody></table><p>For example, given the above Logs table, 1 is the only number that appears consecutively for at least three times.</p><table><thead><tr><th>ConsecutiveNums</th></tr></thead><tbody><tr><td>1</td></tr></tbody></table><p>   解决思路：前后相同则表示连续三个数均相同。<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">( a.Num ) <span class="keyword">AS</span> ConsecutiveNums </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">id</span>,</span><br><span class="line"><span class="keyword">num</span>,</span><br><span class="line">lag ( <span class="keyword">num</span>, <span class="number">1</span>, <span class="number">0</span> ) <span class="keyword">over</span> () <span class="keyword">AS</span> pre,</span><br><span class="line"><span class="keyword">lead</span> ( <span class="keyword">num</span>, <span class="number">1</span>, <span class="number">0</span> ) <span class="keyword">over</span> () <span class="keyword">AS</span> nxt </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">LOGS</span> </span><br><span class="line">) a </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">a.Num = a.pre </span><br><span class="line"><span class="keyword">AND</span> a.Num = a.nxt</span><br></pre></td></tr></table></figure><p>   知识点：窗口函数 <a href="https://www.jianshu.com/p/e0d73f8b71ec" target="_blank" rel="noopener">lag () 和 lead ()</a>。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第 9 天：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode MySQL Day8</title>
    <link href="http://zhouweidong.ml/2020/09/06/LeetCode-MySQL-Day8/"/>
    <id>http://zhouweidong.ml/2020/09/06/LeetCode-MySQL-Day8/</id>
    <published>2020-09-06T14:16:34.000Z</published>
    <updated>2020-09-06T15:07:07.672Z</updated>
    
    <content type="html"><![CDATA[<p>   第 8 天：</p><a id="more"></a><p>  Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no “holes” between ranks.</p><table><thead><tr><th>Id</th><th>Score</th></tr></thead><tbody><tr><td>1</td><td>3.50</td></tr><tr><td>2</td><td>3.65</td></tr><tr><td>3</td><td>4.00</td></tr><tr><td>4</td><td>3.85</td></tr><tr><td>5</td><td>4.00</td></tr><tr><td>6</td><td>3.65</td></tr></tbody></table><p>  For example, given the above Scores table, your query should generate the following report (order by highest score):</p><table><thead><tr><th>score</th><th>Rank</th></tr></thead><tbody><tr><td>4.00</td><td>1</td></tr><tr><td>4.00</td><td>1</td></tr><tr><td>3.85</td><td>2</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.50</td><td>4</td></tr></tbody></table><p>  Important Note: For MySQL solutions, to escape reserved words used as column names, you can use an apostrophe before and after the keyword. For example <code>Rank</code>.</p><p>   解决方案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> score, <span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="string">'Rank'</span> <span class="keyword">from</span> Scores</span><br></pre></td></tr></table></figure><p>   知识点：</p><p><img src="https://picgo-1258437747.cos.ap-nanjing.myqcloud.com/20200906224250.png" alt=""></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第 8 天：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从瑟尔沃法则看内外双循环</title>
    <link href="http://zhouweidong.ml/2020/09/04/%E4%BB%8E%E7%91%9F%E5%B0%94%E6%B2%83%E6%B3%95%E5%88%99%E7%9C%8B%E5%86%85%E5%A4%96%E5%8F%8C%E5%BE%AA%E7%8E%AF/"/>
    <id>http://zhouweidong.ml/2020/09/04/从瑟尔沃法则看内外双循环/</id>
    <published>2020-09-04T13:58:37.000Z</published>
    <updated>2020-09-04T14:46:51.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>   在收支均衡约束下的哈罗德模型中，经济增长对外部需求扩张的依赖关系，被称为 “瑟尔沃法则”。<br><br>   令 M 为进口，X 为出口，Y 为实际 GDP，$\mu$ 为进口倾向，则在内部均衡的前提下，外部均衡为 $X=M=\mu Y$，则有 $Y=\frac {X}{\mu}$，得 $g = \frac {\Delta Y}{Y} = \frac {\frac {\Delta X}{X}}{\epsilon}$。<br></p></blockquote><p>   从分子来看：外部需求的增长与经济增长存在着对应关系。<br><br>   从分母来看：如果要实现 “内循环”，必须降低国内循环的对外需求，即实现消费品和生产资料的进口替代。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;   在收支均衡约束下的哈罗德模型中，经济增长对外部需求扩张的依赖关系，被称为 “瑟尔沃法则”。&lt;br&gt;&lt;br&gt;
   令 M 为进口，X 为出口，Y 为实际 GDP，$\mu$ 为进口倾向，则在内部均衡的前提下，外部均衡为 $X=M=\mu Y$
      
    
    </summary>
    
      <category term="宏观经济" scheme="http://zhouweidong.ml/categories/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day07</title>
    <link href="http://zhouweidong.ml/2020/09/02/LeetCode-MySql-Day07/"/>
    <id>http://zhouweidong.ml/2020/09/02/LeetCode-MySql-Day07/</id>
    <published>2020-09-02T15:50:21.000Z</published>
    <updated>2020-09-02T15:54:31.192Z</updated>
    
    <content type="html"><![CDATA[<p>   第 7 天 <br></p><a id="more"></a><p>  Write a SQL query to get the nth highest salary from the Employee table.</p><table><thead><tr><th>Id</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>3</td><td>300</td></tr></tbody></table><p>For example, given the above Employee table, the nth highest salary where n = 2 is 200. If there is no nth highest salary, then the query should return null.</p><table><thead><tr><th>getNthHighestSalary (2)</th></tr></thead><tbody><tr><td>200</td></tr></tbody></table><p>   解决方法如下：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary (N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> M <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> M = N<span class="number">-1</span>;</span><br><span class="line">  RETURN (</span><br><span class="line">      # Write your MySQL query statement below.</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary</span><br><span class="line">      <span class="keyword">FROM</span> Employee</span><br><span class="line">      <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">      <span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> M</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>   这里涉及到自定义函数，基本的语法格式如下：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> &lt; 函数名 & gt; ( [ &lt; 参数 < span class="number">1</span>&gt; &lt; 类型 < span class="number">1&gt; [ , &lt; 参数 < span class="number">2&gt; &lt; 类型 < span class="number">2&gt;] ] … )<br><span class="line">    <span class="keyword">RETURNS</span> &lt; 类型 & gt;</span><br><span class="line">    &lt; 函数主体 & gt;</span><br></pre></td></tr></table></figure><p>   调用自定义函数的基本语法格式如下：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt; 自定义函数名 & gt; ([&lt; 参数 & gt; [,...]])</span><br></pre></td></tr></table></figure><p>   删除自定义函数的基本语法格式如下：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> [ <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ] &lt; 自定义函数名 & gt;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第 7 天 &lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://zhouweidong.ml/categories/LeetCode/"/>
    
    
      <category term="MySQL" scheme="http://zhouweidong.ml/tags/MySQL/"/>
    
      <category term="Function" scheme="http://zhouweidong.ml/tags/Function/"/>
    
  </entry>
  
  <entry>
    <title>灰色预测模型</title>
    <link href="http://zhouweidong.ml/2020/09/02/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>http://zhouweidong.ml/2020/09/02/灰色预测模型/</id>
    <published>2020-09-02T14:44:02.000Z</published>
    <updated>2020-09-02T15:01:40.129Z</updated>
    
    <content type="html"><![CDATA[<p>   灰色预测模型是在样本较小、信息不完全的情况下，通过挖掘数据的特征进行预测的方法。<br></p><a id="more"></a><p>   首先需要由原始数据序列计算一次累加序列：<br></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x0 &lt;- seq (<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">x1 &lt;- cumsum (x)</span><br></pre></td></tr></table></figure><p>   然后，需要建立矩阵<br>$$\pmb {B}=\left [\begin {array}{cc}<br>-\frac {1}{2}[x^{(1)}(2)+x^{(1)}(1)]&amp;1\<br>\vdots&amp;\vdots\<br>-\frac {1}{2}[x^{(1)}(k)+x^{(1)}(k-1)]&amp;1<br>\end {array}\right]<br>$$<br>和<br>$$\pmb {y}=\left [\begin {array}{c}<br>x^{0}<em>{2}\<br>\vdots \<br>x^{0}</em>{k}<br>\end {array}\right]<br>$$</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">B = matrix (data = <span class="number">1</span>, nrow = (length (x1) - <span class="number">1</span>), ncol = <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:(length (x1) - <span class="number">1</span>)) &#123;</span><br><span class="line">    B [i, <span class="number">1</span>] = (x1 [i] + x1 [i+<span class="number">1</span>])*(-<span class="number">1.0</span>)/<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">y = as.matrix (x0 [<span class="number">2</span>:length (x0)])</span><br></pre></td></tr></table></figure><p>   之后，可以由 $\hat {U} = (\pmb {B}^{T}\pmb {B})^{-1}\pmb {B}^{T}\pmb {y}=\left [\begin {array}{c} \hat {a} \ \hat {u} \end {array}\right]$, 求出 $\hat {a}$ 和 $\hat {u}$：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BT = t (B)</span><br><span class="line">a = sovle (BT %*% B) %*% BT %*% y</span><br></pre></td></tr></table></figure><p>   最后，把 $\hat {a}$ 和 $\hat {u}$ 代入时间响应方程：</p><p>$$<br>x^{(1)}(k+1) = [x^{(1)}_{1} - \frac {\hat {u}}{\hat {a}}] e^{-\hat {a} k} + \frac {\hat {u}}{\hat {a}}<br>$$</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">k &lt;- rep (<span class="number">1</span>, length)</span><br><span class="line">xk &lt;- rep (<span class="number">1</span>,(length (x0)+n))</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:length (x0)+n) &#123;</span><br><span class="line">    u = a [<span class="number">2</span>]/a [<span class="number">1</span>]</span><br><span class="line">    xk [i] = (x1 [<span class="number">1</span>] - u)*exp ((-<span class="number">1</span>)*a [<span class="number">1</span>]*(k [i])) + u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   此时得到的结果是拟合值 $\hat {x}^{1}<em>{i}$ ，需要利用后减运算还原为模型的拟合值 $\hat {x}^{0}</em>{i}$：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xhat &lt;- rep (<span class="number">1</span>, length (xk))</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:legth (xk)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">        xhat [i] = x0 [<span class="number">1</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhat [i] = xk [i] - xk [i-<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   得出拟合值后，需要评价一下模型的精度，主要评价指标有：</p><ul><li>残差：$e (k)=x^{(0)}<em>{k}-\hat {x}^{(0)}</em>{k}$。</li><li>相对残差：$e (k)=\frac {x^{(0)}<em>{k}-\hat {x}^{(0)}</em>{k}}{x^{(0)}_{k}}$。</li><li>均方差比（后残差比值）：$C=\frac {S_{2}}{S_{1}}=\frac {\sqrt {\frac {1}{N}\sum_{k=1}^{N}[x^{(0)}<em>k-\bar {X}]^{2}}}{\sqrt {\frac {1}{N-1}\sum</em>{k=2}^{N}[E (k)-\bar {E}]^{2}}}$，小于 0.35 表示模型精度相对比较好。</li><li>小误差概率：$P = P {|E (k)-\bar {E}|&lt;0.6745S_{1}}$，大于 0.95 表示模型精度相对比较好。</li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   灰色预测模型是在样本较小、信息不完全的情况下，通过挖掘数据的特征进行预测的方法。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day6</title>
    <link href="http://zhouweidong.ml/2020/05/13/LeetCode-MySql-Day06/"/>
    <id>http://zhouweidong.ml/2020/05/13/LeetCode-MySql-Day06/</id>
    <published>2020-05-13T11:36:38.000Z</published>
    <updated>2020-05-13T13:54:21.050Z</updated>
    
    <content type="html"><![CDATA[<p>   第六天：</p><a id="more"></a><h2 id="627-swap-salary">627. Swap Salary</h2><p>  Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a <strong>single update statement</strong> and no intermediate temp table.</p><p>  Note that you must write a single update statement, <strong>DO NOT</strong> write any select statement for this problem.</p><p>  <strong>Example:</strong></p><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>m</td><td>2500</td></tr><tr><td>2</td><td>B</td><td>f</td><td>1500</td></tr><tr><td>3</td><td>C</td><td>m</td><td>5500</td></tr><tr><td>4</td><td>D</td><td>f</td><td>500</td></tr></tbody></table><p>  After running your <strong>update</strong> statement, the above salary table should have the following rows:</p><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>f</td><td>2500</td></tr><tr><td>2</td><td>B</td><td>m</td><td>1500</td></tr><tr><td>3</td><td>C</td><td>f</td><td>5500</td></tr><tr><td>4</td><td>D</td><td>m</td><td>500</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = (<span class="keyword">case</span> <span class="keyword">when</span> sex = <span class="string">"f"</span> <span class="keyword">then</span> <span class="string">"m"</span> <span class="keyword">else</span> <span class="string">"f"</span> <span class="keyword">end</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = <span class="built_in">char</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) ^ <span class="keyword">ASCII</span>(<span class="string">'m'</span>) ^ <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></table></figure><p>   解法一：利用条件表达式函数 case when … … then … … else … … end，相当于 if … … else 。</p><p>   解法二：利用 XOR (异或) 运算符和 ASCII 编码进行转换：f 和  m 的 ASCII 编码值分别为 102 和 109 ，XOR 运算符 (^) 的作用是舍去二进制的进位，具体而言：首先将十进制转换为二进制，即 bin (102)=0b1100110，bin (109)=0b1101101，易知 0b1100110^0b110110 = 0b1011 ，再将二进制转换为十进制，即 int (str (1011), 2) = 11，同理可知 11^102=109 和 11^109 = 102 。</p><h2 id="1179-reformat-department-table">1179. Reformat Department Table</h2><p>  Table: <code>Department</code></p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>id</td><td>int</td></tr><tr><td>revenue</td><td>int</td></tr><tr><td>month</td><td>varchar</td></tr></tbody></table><p>  (id, month) is the primary key of this table.</p><p>  The table has information about the revenue of each department per month.</p><p>  The month has values in [“Jan”,“Feb”,“Mar”,“Apr”,“May”,“Jun”,“Jul”,“Aug”,“Sep”,“Oct”,“Nov”,“Dec”].</p><p>  Write an SQL query to reformat the table such that there is a department id column and a revenue column <strong>for each month</strong>.</p><p>  The query result format is in the following example:</p><p>  Department table:</p><table><thead><tr><th>id</th><th>revenue</th><th>month</th></tr></thead><tbody><tr><td>1</td><td>8000</td><td>Jan</td></tr><tr><td>2</td><td>9000</td><td>Jan</td></tr><tr><td>3</td><td>10000</td><td>Feb</td></tr><tr><td>1</td><td>7000</td><td>Feb</td></tr><tr><td>1</td><td>6000</td><td>Mar</td></tr></tbody></table><p>  Result table:</p><table><thead><tr><th>id</th><th>Jan_Revenue</th><th>Feb_Revenue</th><th>Mar_Revenue</th><th>…</th><th>Dec_Revenue</th></tr></thead><tbody><tr><td>1</td><td>8000</td><td>7000</td><td>6000</td><td>…</td><td>null</td></tr><tr><td>2</td><td>9000</td><td>null</td><td>null</td><td>…</td><td>null</td></tr><tr><td>3</td><td>null</td><td>10000</td><td>null</td><td>…</td><td>null</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Jan'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Jan_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Feb'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Feb_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Mar'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Mar_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Apr'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Apr_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'May'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> May_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Jun'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Jun_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Jul'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Jul_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Aug'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Aug_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Sep'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Sep_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Oct'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Oct_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Nov'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Nov_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Dec'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Dec_Revenue</span><br><span class="line"><span class="keyword">FROM</span> Department</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure><p>   知识点：if (expr1,expr2,expr3)，如果 expr1 是 TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL)，则 IF () 的返回值为 expr2; 否则返回值则为 expr3。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第六天：&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://zhouweidong.ml/categories/LeetCode/"/>
    
    
      <category term="MySql" scheme="http://zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http://zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day5</title>
    <link href="http://zhouweidong.ml/2020/05/12/LeetCode-MySql-Day5/"/>
    <id>http://zhouweidong.ml/2020/05/12/LeetCode-MySql-Day5/</id>
    <published>2020-05-12T12:38:05.000Z</published>
    <updated>2020-05-12T13:28:06.264Z</updated>
    
    <content type="html"><![CDATA[<p>   第五天：</p><a id="more"></a><h2 id="596-classes-more-than-5-students">596. Classes More Than 5 Students</h2><p>  There is a table <code>courses</code> with columns: <strong>student</strong> and <strong>class</strong></p><p>  Please list out all classes which have more than or equal to 5 students.</p><p>  For example, the table:</p><table><thead><tr><th>student</th><th>class</th></tr></thead><tbody><tr><td>A</td><td>Math</td></tr><tr><td>B</td><td>English</td></tr><tr><td>C</td><td>Math</td></tr><tr><td>D</td><td>Biology</td></tr><tr><td>E</td><td>Math</td></tr><tr><td>F</td><td>Computer</td></tr><tr><td>G</td><td>Math</td></tr><tr><td>H</td><td>Math</td></tr><tr><td>I</td><td>Math</td></tr></tbody></table><p>  Should output:</p><table><thead><tr><th>class</th></tr></thead><tbody><tr><td>Math</td></tr></tbody></table><p>  <strong>Note:</strong></p><p>  The students should not be counted duplicate in each course.</p><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">class</span> <span class="keyword">from</span> courses <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">class</span> <span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> student) &gt;= <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="620-not-boring-movies">620. Not Boring Movies</h2><p>  X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.</p><p>  Please write a SQL query to output movies with an odd numbered ID and a description that is not ‘boring’. Order the result by rating.</p><p>  For example, table <code>cinema</code>:</p><table><thead><tr><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr><tr><td>2</td><td>Science</td><td>fiction</td><td>8.5</td></tr><tr><td>3</td><td>irish</td><td>boring</td><td>6.2</td></tr><tr><td>4</td><td>Ice song</td><td>Fantacy</td><td>8.6</td></tr><tr><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr></tbody></table><p>  For the example above, the output should be:</p><table><thead><tr><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr><tr><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cinema <span class="keyword">where</span> <span class="keyword">mod</span>(<span class="keyword">id</span>, <span class="number">2</span>) != <span class="number">0</span> <span class="keyword">and</span> description <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">'boring'</span> <span class="keyword">order</span> <span class="keyword">by</span> rating <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cinema <span class="keyword">where</span> description &lt;&gt; <span class="string">'boring'</span> <span class="keyword">and</span> <span class="keyword">id</span> &amp; <span class="number">1</span> = <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> rating <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>   两个知识点：对于字符串 not like 是模糊查询，&lt;&gt; 则是完整查询，二者的区别是前者要求数据里面不包含某个字段，后者要求数据不是某个字段；&amp; 是位运算符，可以用于判断对 $2^n$ 取余，是一个取巧的办法，加快了运算速度。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第五天：&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://zhouweidong.ml/categories/LeetCode/"/>
    
    
      <category term="MySql" scheme="http://zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http://zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day4</title>
    <link href="http://zhouweidong.ml/2020/05/08/LeetCode-MySql-Day4/"/>
    <id>http://zhouweidong.ml/2020/05/08/LeetCode-MySql-Day4/</id>
    <published>2020-05-08T04:57:53.000Z</published>
    <updated>2020-05-08T05:40:29.680Z</updated>
    
    <content type="html"><![CDATA[<p>   第四天：</p><a id="more"></a><h2 id="197-rising-temperature">197. Rising Temperature</h2><p>  Given a Weather table, write a SQL query to find all dates’ Ids with higher temperature compared to its previous (yesterday’s) dates.</p><table><thead><tr><th>Id (INT)</th><th>RecordDate (DATE)</th><th>Temperature (INT)</th></tr></thead><tbody><tr><td>1</td><td>2015-01-01</td><td>10</td></tr><tr><td>2</td><td>2015-01-02</td><td>25</td></tr><tr><td>3</td><td>2015-01-03</td><td>20</td></tr><tr><td>4</td><td>2015-01-04</td><td>30</td></tr></tbody></table><p>  For example, return the following Ids for the above Weather table:title: LeetCode MySql Day4</p><table><thead><tr><th style="text-align:left">Id</th></tr></thead><tbody><tr><td style="text-align:left">2</td></tr><tr><td style="text-align:left">4</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> w1.Id <span class="keyword">from</span> Weather w1, Weather w2 <span class="keyword">where</span> w1.Temperature &gt; w2.Temperature <span class="keyword">and</span> <span class="keyword">DateDiff</span>(w1. RecordDate, w2.RecordDate) = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>   知识点：时间类型的处理 - DataDiff (d1, d2)：计算日期 d1-&gt;d2 之间相隔的天数。</p><h2 id="595-big-countries">595. Big Countries</h2><p>  There is a table World：</p><table><thead><tr><th>name</th><th>continent</th><th>area</th><th>population</th><th>gdp</th></tr></thead><tbody><tr><td>Afghanistan</td><td>Asia</td><td>652230</td><td>25500100</td><td>20343000</td></tr><tr><td>Albania</td><td>Europe</td><td>28748</td><td>2831741</td><td>12960000</td></tr><tr><td>Algeria</td><td>Africa</td><td>2381741</td><td>37100000</td><td>1.89E+08</td></tr><tr><td>Andorra</td><td>Europe</td><td>468</td><td>78115</td><td>3712000</td></tr><tr><td>Angola</td><td>Africa</td><td>1246700</td><td>20609294</td><td>1.01E+08</td></tr></tbody></table><p>  A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</p><p>  Write a SQL solution to output big countries’ name, population and area.</p><p>  For example, according to the above table, we should output:</p><table><thead><tr><th>name</th><th>population</th><th>area</th></tr></thead><tbody><tr><td>Afghanistan</td><td>25500100</td><td>652230</td></tr><tr><td>Algeria</td><td>37100000</td><td>2381741</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, population, area <span class="keyword">from</span> World <span class="keyword">where</span> population &gt; <span class="number">25000000</span> <span class="keyword">or</span> area &gt; <span class="number">3000000</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, population, area <span class="keyword">from</span> World <span class="keyword">where</span> population &gt; <span class="number">25000000</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">name</span>, population, area <span class="keyword">from</span> World <span class="keyword">where</span> area &gt; <span class="number">3000000</span>;</span><br></pre></td></tr></table></figure><p>  union 替代 or 虽然看起来比较繁琐，但会加快运算速度。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第四天：&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://zhouweidong.ml/categories/LeetCode/"/>
    
    
      <category term="MySql" scheme="http://zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http://zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day3</title>
    <link href="http://zhouweidong.ml/2020/05/07/LeetCode-MySql-Day3/"/>
    <id>http://zhouweidong.ml/2020/05/07/LeetCode-MySql-Day3/</id>
    <published>2020-05-07T04:48:04.000Z</published>
    <updated>2020-09-03T12:52:27.461Z</updated>
    
    <content type="html"><![CDATA[<p>   第三天：</p><a id="more"></a><h2 id="183-customers-who-never-order">183. Customers Who Never Order</h2><p>  Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.</p><p>  Table: Customers.</p><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>Joe</td></tr><tr><td>2</td><td>Henry</td></tr><tr><td>3</td><td>Sam</td></tr><tr><td>4</td><td>Max</td></tr></tbody></table><p>  Table: Orders.</p><table><thead><tr><th>Id</th><th>CustomerId</th></tr></thead><tbody><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr></tbody></table><p>Using the above tables as example, return the following:</p><table><thead><tr><th>Customers</th></tr></thead><tbody><tr><td>Henry</td></tr><tr><td>Max</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Name</span> <span class="keyword">as</span> Customers <span class="keyword">from</span> Customers <span class="keyword">where</span> <span class="keyword">Id</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> CustimerId <span class="keyword">from</span> Orders);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c.Name <span class="keyword">from</span> Customers c <span class="keyword">left</span> <span class="keyword">join</span> Orders o <span class="keyword">on</span> c.Id = o.CustormerId <span class="keyword">where</span> o.CustomerId <span class="keyword">is</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>   前者的逻辑清晰，但对于大数据而言运算速度慢于后者。</p><h2 id="196-delete-duplicate-emails">196. Delete Duplicate Emails</h2><p>  Write a SQL query to delete all duplicate email entries in a table named Person, keeping only unique emails based on its smallest Id.</p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:john@example.com" target="_blank" rel="noopener">john@example.com</a></td></tr><tr><td>2</td><td><a href="mailto:bob@example.com" target="_blank" rel="noopener">bob@example.com</a></td></tr><tr><td>3</td><td><a href="mailto:john@example.com" target="_blank" rel="noopener">john@example.com</a></td></tr></tbody></table><p>  Id is the primary key column for this table.</p><p>  For example, after running your query, the above Person table should have the following rows:</p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:john@example.com" target="_blank" rel="noopener">john@example.com</a></td></tr><tr><td>2</td><td><a href="mailto:bob@example.com" target="_blank" rel="noopener">bob@example.com</a></td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> p1 <span class="keyword">from</span> Person p1, Person p2 <span class="keyword">where</span> p1.Email = p2.Email <span class="keyword">and</span> p1.Id &gt; p2.Id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> Person <span class="keyword">where</span> <span class="keyword">Id</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">from</span> Person <span class="keyword">group</span> <span class="keyword">by</span> Email) <span class="keyword">as</span> p);</span><br></pre></td></tr></table></figure><p>   前者的逻辑相对比较清晰；后者的逻辑是：无论是否重复，利用 group by 分组 求 Id 的最小值，即需要保留的数据，然后利用 not in 删除剩余部分。</p><p>   值得注意的是：利用 delete 语句删除数据前，务必先使用 select 语句确定删除的数据是否正确，避免误删。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第三天：&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://zhouweidong.ml/categories/LeetCode/"/>
    
    
      <category term="MySql" scheme="http://zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http://zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day2</title>
    <link href="http://zhouweidong.ml/2020/05/02/LeetCode-MySql-Day2/"/>
    <id>http://zhouweidong.ml/2020/05/02/LeetCode-MySql-Day2/</id>
    <published>2020-05-02T08:18:58.000Z</published>
    <updated>2020-09-03T12:54:34.944Z</updated>
    
    <content type="html"><![CDATA[<p>   第二天：<br></p><a id="more"></a><h2 id="181-employees-earning-more-than-their-managers-br">181. Employees Earning More Than Their Managers<br></h2><p>  The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.<br></p><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>ManagerId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>70000</td><td>3</td></tr><tr><td>2</td><td>Henry</td><td>80000</td><td>4</td></tr><tr><td>3</td><td>Sam</td><td>60000</td><td>NULL</td></tr><tr><td>4</td><td>Max</td><td>90000</td><td>NULL</td></tr></tbody></table><p>  Given the Employee table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.<br></p><table><thead><tr><th>Employee</th></tr></thead><tbody><tr><td>Joe</td></tr></tbody></table><p>   解决方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.Name <span class="keyword">as</span> Employee <span class="keyword">from</span> Employee e, Employee m <span class="keyword">where</span> e.ManagerId=m.Id <span class="keyword">and</span> e.Salary &gt; m.Salary;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.Name <span class="keyword">as</span> Employee <span class="keyword">from</span> Employee e <span class="keyword">inner</span> <span class="keyword">join</span> Employee.m <span class="keyword">on</span> e.ManagerId=m.Id <span class="keyword">where</span> e.Salary &gt; m.Salary;</span><br></pre></td></tr></table></figure><p>   前者的逻辑比较清晰，后者稍微有点绕，连接后的表大概是如下模样：<br></p><table><thead><tr><th><a href="http://e.Id" target="_blank" rel="noopener">e.Id</a></th><th><a href="http://e.Name" target="_blank" rel="noopener">e.Name</a></th><th>e.Salary</th><th>e.ManagerId</th><th><a href="http://m.Id" target="_blank" rel="noopener">m.Id</a></th><th><a href="http://m.Name" target="_blank" rel="noopener">m.Name</a></th><th>m.Salary</th><th>m.ManagerId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>70000</td><td>3</td><td>3</td><td>Sam</td><td>60000</td><td>NULL</td></tr><tr><td>2</td><td>Henry</td><td>80000</td><td>4</td><td>4</td><td>Max</td><td>90000</td><td>NULL</td></tr></tbody></table><h2 id="182-duplicate-emails-br">182. Duplicate Emails<br></h2><p>  Write a SQL query to find all duplicate emails in a table named Person.<br></p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr><tr><td>2</td><td><a href="mailto:c@d.com" target="_blank" rel="noopener">c@d.com</a></td></tr><tr><td>3</td><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr></tbody></table><p>  For example, your query should return the following for the above table:<br></p><table><thead><tr><th>Email</th></tr></thead><tbody><tr><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr></tbody></table><p>   解决方法：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Email <span class="keyword">from</span> Person <span class="keyword">group</span> <span class="keyword">by</span> Email <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Email <span class="keyword">from</span> Person p1 <span class="keyword">inner</span> <span class="keyword">join</span> Person p2 <span class="keyword">on</span> p1.Email=p2.Email <span class="keyword">where</span> p1.Id &lt;&gt; p2.Id;</span><br></pre></td></tr></table></figure><p>   后者只是提供一种思路，太绕了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   第二天：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://zhouweidong.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySql" scheme="http://zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http://zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode MySql Day1</title>
    <link href="http://zhouweidong.ml/2020/04/30/LeetCode-MySql-Day1/"/>
    <id>http://zhouweidong.ml/2020/04/30/LeetCode-MySql-Day1/</id>
    <published>2020-04-30T14:25:22.000Z</published>
    <updated>2020-05-07T04:55:04.854Z</updated>
    
    <content type="html"><![CDATA[<p>   从今天开始练习 MySql：</p><a id="more"></a><h2 id="175-combine-two-tables">175. Combine Two Tables</h2><p>  Table: Person</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>PersonId</td><td>int</td></tr><tr><td>FirstName</td><td>varchar</td></tr><tr><td>LastName</td><td>varchar</td></tr></tbody></table><p>PersonId is the primary key column for this table.</p><p>  Table: Address</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>AddressId</td><td>int</td></tr><tr><td>PersonId</td><td>int</td></tr><tr><td>City</td><td>varchar</td></tr><tr><td>State</td><td>varchar</td></tr></tbody></table><p>AddressId is the primary key column for this table.</p><p>  Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:</p><p>FirstName, LastName, City, State</p><p>  Data:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"headers": &#123;"Person": ["PersonId", "LastName", "FirstName"], "Address": ["AddressId", "PersonId", "City", "State"]&#125;, "rows": &#123;"Person": [[1, "Wang", "Allen"]], "Address": [[1, 2, "New York City", "New York"]]&#125;&#125;</span><br></pre></td></tr></table></figure><p>   比较一下两个答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> FirstName, LastName, City, State <span class="keyword">from</span> Person, Address <span class="keyword">where</span> Person.PersonId=Address.PersonId;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p.FirstName, p.LastName, a.City, a.State  <span class="keyword">from</span> Person p <span class="keyword">left</span> <span class="keyword">join</span> Address a <span class="keyword">on</span> p.PersonId = a.PersonId;</span><br></pre></td></tr></table></figure><p>   前者不返回任何值，后者只返回 Person 中的值，原因很简单：where 相当于 full join , 返回符合要求的值；left join … … on 返回左表中的值和符合要求的右表中的值。<br>   补充知识：在 select 语句中，可以临时给表起别名： 表名 [as] 表别名。（[] 表示内容可省略）</p><h2 id="176-second-highest-salary">176. Second Highest Salary</h2><p>  Write a SQL query to get the second highest salary from the Employee table.</p><table><thead><tr><th>Id</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>3</td><td>300</td></tr></tbody></table><p>  For example, given the above Employee table, the query should return 200 as the second highest salary. If there is no second highest salary, then the query should return null.</p><table><thead><tr><th>SecondHighestSalary</th></tr></thead><tbody><tr><td>200</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> Salary <span class="keyword">from</span> Employee <span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">Desc</span> <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span></span><br><span class="line">) </span><br><span class="line"><span class="keyword">as</span> SecondHighestSalary</span><br></pre></td></tr></table></figure><p>   去重：distinct；排序：order by —— 降序：DESC (默认为升序)；限制结果：limit 结果数；偏移数：offset 偏移数。</p><p>   重新命名: select as 新名。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   从今天开始练习 MySql：&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://zhouweidong.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySql" scheme="http://zhouweidong.ml/tags/MySql/"/>
    
      <category term="LeetCode" scheme="http://zhouweidong.ml/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Sql：如何统计连续打卡天数</title>
    <link href="http://zhouweidong.ml/2020/04/14/Sql%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1%E8%BF%9E%E7%BB%AD%E6%89%93%E5%8D%A1%E5%A4%A9%E6%95%B0/"/>
    <id>http://zhouweidong.ml/2020/04/14/Sql：如何统计连续打卡天数/</id>
    <published>2020-04-14T03:55:57.000Z</published>
    <updated>2020-05-13T13:56:55.745Z</updated>
    
    <content type="html"><![CDATA[<p>   在实际的工作情境中，统计员工的连续打卡天数是一个十分重要的应用。</p><a id="more"></a><h1 id="chuang-jian-shi-li-shu-ju">创建示例数据</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`打卡`</span> (uid <span class="built_in">INT</span>(<span class="number">5</span>), tdate <span class="built_in">date</span>, is_flag <span class="built_in">INT</span>(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`打卡`</span></span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/1'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/2'</span>, <span class="string">'0'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/3'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/4'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/5'</span>, <span class="string">'0'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/6'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/7'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'1'</span>, <span class="string">'2020/2/8'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/1'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/2'</span>, <span class="string">'0'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/3'</span>, <span class="string">'0'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/4'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/5'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/6'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/7'</span>, <span class="string">'1'</span> ),</span><br><span class="line">( <span class="string">'2'</span>, <span class="string">'2020/2/8'</span>, <span class="string">'1'</span> );</span><br></pre></td></tr></table></figure><h1 id="tong-ji-lian-xu-da-qia-tian-shu">统计连续打卡天数</h1><p>   总体思路是：首先，判断今日是否打卡；然后，判断是否是连续打卡；最后，统计连续打卡天数。</p><h2 id="pan-duan-jin-ri-shi-fou-da-qia">判断今日是否打卡</h2><p>   提取打卡的数据可以用 where is_flag = 1:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">tdate,</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`打卡`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">is_flag = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="pan-duan-shi-fou-shi-lian-xu-da-qia">判断是否是连续打卡</h2><p>   如果是连续打卡，明显日期应该是等差序列，多个等差序列和其公差相同的另一个等差序列相减，则同一等差序列与这个等差序列的差必然相同，简单的例子如下：</p><table><thead><tr><th>x</th><th>y</th><th>x-y</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>2</td><td>2</td><td>0</td></tr><tr><td>4</td><td>3</td><td>1</td></tr><tr><td>5</td><td>4</td><td>1</td></tr><tr><td>6</td><td>5</td><td>1</td></tr><tr><td>8</td><td>6</td><td>2</td></tr><tr><td>9</td><td>7</td><td>2</td></tr></tbody></table><p>   因此，判断是否是连续打卡的方法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">tdate,</span><br><span class="line">row_number () <span class="keyword">over</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> uid <span class="keyword">ORDER</span> <span class="keyword">BY</span> tdate ) date_rank </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="string">`打卡`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">is_flag = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>   在这里，使用 <figure class="highlight plain"><figcaption><span>over ()```方法生成连续数列：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|uid|tdate|date_rank|</span><br><span class="line">|--|--|--|</span><br><span class="line">|1|2020/2/1|1|</span><br><span class="line">|1|2020/2/3|2|</span><br><span class="line">|1|2020/2/4|3|</span><br><span class="line">|1|2020/2/6|4|</span><br><span class="line">|1|2020/2/7|5|</span><br><span class="line">|1|2020/2/8|6|</span><br><span class="line">|2|2020/2/1|1|</span><br><span class="line">|2|2020/2/4|2|</span><br><span class="line">|2|2020/2/5|3|</span><br><span class="line">|2|2020/2/6|4|</span><br><span class="line">|2|2020/2/7|5|</span><br><span class="line">|2|2020/2/8|6|</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">SELECT</span><br><span class="line">uid,</span><br><span class="line">tdate,</span><br><span class="line">date_rank,</span><br><span class="line">( date_format ( tdate, &quot;% e&quot; )- date_rank ) AS day_cha </span><br><span class="line">FROM</span><br><span class="line">( SELECT uid, tdate, row_number () over ( PARTITION BY uid ORDER BY tdate ) date_rank FROM `打卡` WHERE is_flag = 1 ) t1</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>uid</th><th>tdate</th><th>date_rank</th><th>day_cha</th></tr></thead><tbody><tr><td>1</td><td>2020/2/1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>2020/2/3</td><td>2</td><td>1</td></tr><tr><td>1</td><td>2020/2/4</td><td>3</td><td>1</td></tr><tr><td>1</td><td>2020/2/6</td><td>4</td><td>2</td></tr><tr><td>1</td><td>2020/2/7</td><td>5</td><td>2</td></tr><tr><td>1</td><td>2020/2/8</td><td>6</td><td>2</td></tr><tr><td>2</td><td>2020/2/1</td><td>1</td><td>0</td></tr><tr><td>2</td><td>2020/2/4</td><td>2</td><td>2</td></tr><tr><td>2</td><td>2020/2/5</td><td>3</td><td>2</td></tr><tr><td>2</td><td>2020/2/6</td><td>4</td><td>2</td></tr><tr><td>2</td><td>2020/2/7</td><td>5</td><td>2</td></tr><tr><td>2</td><td>2020/2/8</td><td>6</td><td>2</td></tr></tbody></table><h2 id="tong-ji-lian-xu-da-qia-tian-shu-1">统计连续打卡天数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">day_cha,</span><br><span class="line"><span class="keyword">count</span>( tdate ) flag_days </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">tdate,</span><br><span class="line">date_rank,</span><br><span class="line">( <span class="keyword">date_format</span>( tdate, <span class="string">"% e"</span> )- date_rank ) <span class="keyword">AS</span> day_cha </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">( <span class="keyword">SELECT</span> uid, tdate, row_number () <span class="keyword">over</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> uid <span class="keyword">ORDER</span> <span class="keyword">BY</span> tdate ) date_rank <span class="keyword">FROM</span> <span class="string">`打卡`</span> <span class="keyword">WHERE</span> is_flag = <span class="number">1</span> ) t1 </span><br><span class="line">) t2 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">uid,</span><br><span class="line">day_cha</span><br></pre></td></tr></table></figure><table><thead><tr><th>uid</th><th>day_cha</th><th>flag_days</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>2</td></tr><tr><td>1</td><td>2</td><td>3</td></tr><tr><td>2</td><td>0</td><td>1</td></tr><tr><td>2</td><td>2</td><td>5</td></tr></tbody></table><h2 id="qu-fen-gai-nian-zui-jin-lian-xu-da-qia-tian-shu-he-zui-chang-lian-xu-da-qia-tian-shu">区分概念：最近连续打卡天数和最长连续打卡天数</h2><p>   最长连续打卡天数就是取连续打卡天数的最大值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">day_cha,</span><br><span class="line"><span class="keyword">count</span>( tdate ) flag_days </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">uid,</span><br><span class="line">tdate,</span><br><span class="line">date_rank,</span><br><span class="line">( <span class="keyword">date_format</span>( tdate, <span class="string">"% e"</span> )- date_rank ) <span class="keyword">AS</span> day_cha </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">( <span class="keyword">SELECT</span> uid, tdate, row_number () <span class="keyword">over</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> uid <span class="keyword">ORDER</span> <span class="keyword">BY</span> tdate ) date_rank <span class="keyword">FROM</span> <span class="string">`打卡`</span> <span class="keyword">WHERE</span> is_flag = <span class="number">1</span> ) t1 </span><br><span class="line">) t2 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">uid,</span><br><span class="line">day_cha</span><br></pre></td></tr></table></figure><p>   最近连续打卡天数是去连续打卡天数的末尾值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   在实际的工作情境中，统计员工的连续打卡天数是一个十分重要的应用。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>lambda 函数</title>
    <link href="http://zhouweidong.ml/2020/04/13/lambda-%E5%87%BD%E6%95%B0/"/>
    <id>http://zhouweidong.ml/2020/04/13/lambda-函数/</id>
    <published>2020-04-13T03:33:31.000Z</published>
    <updated>2020-04-13T09:19:44.122Z</updated>
    
    <content type="html"><![CDATA[<p>  lambda 函数是 python 数据分析中比较常用的一个函数，属于匿名函数，即无需声明函数名称。<br></p><a id="more"></a><p>   简单示例如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> v: len (v)</span><br></pre></td></tr></table></figure><p>   在 lambda 函数中，冒号前面填写参数，冒号后面填写表达式，表达式的结果就是返回值，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len (v)</span><br></pre></td></tr></table></figure><p>   明显，因为返回值只能是一个，所以 lambda 函数只能有一个表达式。</p><p>  lambda 函数还可以进一步与 map () 函数和 filter () 函数结合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data [<span class="string">""</span>] = data [<span class="string">""</span>].map (<span class="keyword">lambda</span> x: x**<span class="number">2</span>)</span><br><span class="line">data [<span class="string">""</span>] = data [<span class="string">""</span>].filter (<span class="keyword">lambda</span> x: x%<span class="number">2</span> == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  lambda 函数是 python 数据分析中比较常用的一个函数，属于匿名函数，即无需声明函数名称。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据分析" scheme="http://zhouweidong.ml/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Pandas" scheme="http://zhouweidong.ml/tags/Pandas/"/>
    
      <category term="lambda" scheme="http://zhouweidong.ml/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>粉笔模考经验总结</title>
    <link href="http://zhouweidong.ml/2020/04/01/%E7%B2%89%E7%AC%94%E6%A8%A1%E8%80%83%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://zhouweidong.ml/2020/04/01/粉笔模考经验总结/</id>
    <published>2020-04-01T01:41:50.000Z</published>
    <updated>2020-04-01T04:15:59.385Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>K-means 聚类算法</title>
    <link href="http://zhouweidong.ml/2020/03/31/K-means-%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/"/>
    <id>http://zhouweidong.ml/2020/03/31/K-means-聚类算法/</id>
    <published>2020-03-31T09:09:11.000Z</published>
    <updated>2020-03-31T11:10:39.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-ji-ben-yuan-li">1. 基本原理</h1><p>  K-Means 聚类算法的目的是：把 n 个点（可以是样本的一次观察或一个实例）划分到 k 个聚类中。工作原理是：</p><ul><li>从数据集中随机选取 k 个点作为初始的类中心点。</li><li>计算每个点与每个类中心点的距离，将每个点分配到最近的类中心点，然后重新计算每个类的中心店。</li><li>重复上一步，直至类中心点不再发生变动或手动设置最大迭代次数。</li></ul><a id="more"></a><h1 id="2-shi-li-qiu-dui-fen-lei">2. 实例：球队分类</h1><p>   实例：亚洲球队分类，目的是将球队分成三个梯度：</p><h2 id="2-1-python-shi-xian">2.1. Python 实现</h2><p>   第一步：导入和查看数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv (<span class="string">"D:\ 代码 \ 数据 \sports team.csv"</span>)</span><br><span class="line">data.head ()</span><br></pre></td></tr></table></figure><table border="1" class="dataframe">  <thead>    <tr style="text-align: center;">      <th></th>      <th> 国家 </th>      <th>2019 年国际排名 </th>      <th>2018 世界杯 </th>      <th>2015 亚洲杯 </th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td> 中国 </td>      <td>73</td>      <td>40</td>      <td>7</td>    </tr>    <tr>      <th>1</th>      <td> 日本 </td>      <td>60</td>      <td>15</td>      <td>5</td>    </tr>    <tr>      <th>2</th>      <td> 韩国 </td>      <td>61</td>      <td>19</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td> 伊朗 </td>      <td>34</td>      <td>18</td>      <td>6</td>    </tr>    <tr>      <th>4</th>      <td> 沙特 </td>      <td>67</td>      <td>26</td>      <td>10</td>    </tr>  </tbody></table><p>   第二步：定义训练数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line">train_data = pd.DataFrame (data [[<span class="string">"2019 年国际排名"</span>, <span class="string">"2018 世界杯"</span>, <span class="string">"2015 亚洲杯"</span>]])</span><br><span class="line">kmeans = KMeans (n_clusters=<span class="number">3</span>)</span><br><span class="line">train_data = preprocessing.MinMaxScaler ().fit_transform (train_data)</span><br></pre></td></tr></table></figure><p>   第三步：运行 k-means 聚类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kmeans.fit (train_data)</span><br><span class="line">predict_result = kmeans.predict (train_data)</span><br><span class="line">result = pd.concat ((data, pd.DataFrame (predict_result)), axis=<span class="number">1</span>)</span><br><span class="line">result.rename (&#123;<span class="number">0</span>:<span class="string">"聚类"</span>&#125;, axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">result.head ()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th> 国家 </th>      <th>2019 年国际排名 </th>      <th>2018 世界杯 </th>      <th>2015 亚洲杯 </th>      <th> 聚类 </th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td> 中国 </td>      <td>73</td>      <td>40</td>      <td>7</td>      <td>1</td>    </tr>    <tr>      <th>1</th>      <td> 日本 </td>      <td>60</td>      <td>15</td>      <td>5</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td> 韩国 </td>      <td>61</td>      <td>19</td>      <td>2</td>      <td>2</td>    </tr>    <tr>      <th>3</th>      <td> 伊朗 </td>      <td>34</td>      <td>18</td>      <td>6</td>      <td>2</td>    </tr>    <tr>      <th>4</th>      <td> 沙特 </td>      <td>67</td>      <td>26</td>      <td>10</td>      <td>2</td>    </tr>  </tbody></table></div><h2 id="2-2-r-shi-xian">2.2. R 实现</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(tidyverse)</span><br><span class="line"></span><br><span class="line">data &lt;- read_csv (<span class="string">"D:/ 代码 / 数据 /sports team.csv"</span>)</span><br><span class="line">result &lt;- kmeans (data [<span class="number">2</span>:<span class="number">4</span>], <span class="number">3</span>)</span><br><span class="line">result$cluster</span><br></pre></td></tr></table></figure><h2 id="2-3-stata-shi-xian">2.3. stata 实现</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insheet</span> using <span class="string">"D:/ 代码 / 数据 /sports team.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rename</span> 年国际排名 x1</span><br><span class="line"><span class="keyword">rename</span> 世界杯 x2</span><br><span class="line"><span class="keyword">rename</span> 亚洲杯 x3</span><br><span class="line"><span class="keyword">cluster</span> kmeans x1 x2 x3, k (3)</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-ji-ben-yuan-li&quot;&gt;1. 基本原理&lt;/h1&gt;
&lt;p&gt;  K-Means 聚类算法的目的是：把 n 个点（可以是样本的一次观察或一个实例）划分到 k 个聚类中。工作原理是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从数据集中随机选取 k 个点作为初始的类中心点。&lt;/li&gt;
&lt;li&gt;计算每个点与每个类中心点的距离，将每个点分配到最近的类中心点，然后重新计算每个类的中心店。&lt;/li&gt;
&lt;li&gt;重复上一步，直至类中心点不再发生变动或手动设置最大迭代次数。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="http://zhouweidong.ml/2020/03/31/%E6%AC%A2%E8%BF%8E%E8%AF%AD/"/>
    <id>http://zhouweidong.ml/2020/03/31/欢迎语/</id>
    <published>2020-03-31T06:08:48.021Z</published>
    <updated>2020-09-03T14:34:25.119Z</updated>
    
    <content type="html"><![CDATA[<p>   欢迎来到我的博客，我会不定期地发布我的原创文章以及转载文章，内容涉及各个方面，但是以探讨宏观经济为主。</p><a id="more"></a><h2 id="geng-xin-shi-jian">更新时间</h2><h3 id="1-zheng-chang-geng-xin-shi-jian">1. 正常更新时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> 每周日晚 10：00</span><br></pre></td></tr></table></figure><h3 id="2-zui-wan-geng-xin-shi-jian">2. 最晚更新时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> 每周日晚 12：00</span><br></pre></td></tr></table></figure><h3 id="3-te-shu-qing-kuang">3. 特殊情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> 如遇到本人懒癌发作，可直接留言催更。</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   欢迎来到我的博客，我会不定期地发布我的原创文章以及转载文章，内容涉及各个方面，但是以探讨宏观经济为主。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ttrss</title>
    <link href="http://zhouweidong.ml/2019/12/03/ttrss/"/>
    <id>http://zhouweidong.ml/2019/12/03/ttrss/</id>
    <published>2019-12-03T02:17:02.000Z</published>
    <updated>2020-09-03T12:56:53.836Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      本篇文章主要是记录我搭建TTRSS以及与此相关的插件等的过程，方便未来复建。&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>线程和进程</title>
    <link href="http://zhouweidong.ml/2019/09/12/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
    <id>http://zhouweidong.ml/2019/09/12/线程和进程/</id>
    <published>2019-09-12T07:39:41.000Z</published>
    <updated>2020-09-03T12:59:22.404Z</updated>
    
    <content type="html"><![CDATA[<p>   线程是任务调度和执行的基本单位，而进程是操作系统资源分配的基本单位。</p><a id="more"></a><h1 id="1-er-zhe-de-qu-bie-yi-ge-jian-dan-lei-bi">1. 二者的区别：一个简单类比</h1><p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190912182153.png" alt=""></p><h1 id="2-duo-jin-cheng">2. 多进程</h1><h2 id="2-1-shi-yong-pool-chuang-jian-duo-jin-cheng">2.1 使用 Pool 创建多进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">task_list = [</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/91b702f4f24a'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/8e9e0b1b3a11'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/7ef0f606c10b'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/b117993f5008'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/583d83f1ff81'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/91b702f4f24a'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/8e9e0b1b3a11'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/7ef0f606c10b'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/b117993f5008'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/583d83f1ff81'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span></span><br><span class="line">                      <span class="string">'(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get (url,</span><br><span class="line">                            headers=header,</span><br><span class="line">                            timeout=<span class="number">30</span></span><br><span class="line">                            )</span><br><span class="line">    <span class="keyword">return</span> response.status_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Pool (<span class="number">10</span>)</span><br><span class="line">    time_old = time.time ()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> p.map (download, task_list):</span><br><span class="line">        print (item)</span><br><span class="line">    time_new = time.time ()</span><br><span class="line">    time_cost = time_new - time_old</span><br><span class="line">    print (time_cost)</span><br></pre></td></tr></table></figure><h2 id="2-2-shi-yong-process-dui-xiang-chuang-jian-duo-jin-cheng">2.2 使用 Process 对象创建多进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多进程，使用 Process 对象 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line">task_list = [</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/91b702f4f24a'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/8e9e0b1b3a11'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/7ef0f606c10b'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/b117993f5008'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/583d83f1ff81'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span></span><br><span class="line">                      <span class="string">'(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get (url,</span><br><span class="line">                            headers=header,</span><br><span class="line">                            timeout=<span class="number">30</span></span><br><span class="line">                            )</span><br><span class="line">    print (response.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> task_list:</span><br><span class="line">        p = Process (target=download, args=(item,))  <span class="comment"># target = 调用的函数名，args=（函数的参数，)</span></span><br><span class="line">        p.start ()</span><br><span class="line">        p.join ()</span><br></pre></td></tr></table></figure><h1 id="3-duo-xian-cheng">3. 多线程</h1><h2 id="3-1-diao-yong-thread-lei-de-gou-zao-qi-chuang-jian-xian-cheng">3.1 调用 Thread 类的构造器创建线程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个普通的 action 函数，该函数准备作为线程执行体 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(max)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (max):</span><br><span class="line">        <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">        <span class="comment"># 线程对象的 getName () 方法获取当前线程的名字 </span></span><br><span class="line">        print (threading.current_thread ().getName () +  <span class="string">""</span> + str (i))</span><br><span class="line"><span class="comment"># 下面是主程序（也就是主线程的执行体）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">100</span>):</span><br><span class="line">    <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">    print (threading.current_thread ().getName () +  <span class="string">" "</span> + str (i))</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">20</span>:</span><br><span class="line">        <span class="comment"># 创建并启动第一个线程 </span></span><br><span class="line">        t1 =threading.Thread (target=action,args=(<span class="number">100</span>,))</span><br><span class="line">        t1.start ()</span><br><span class="line">        <span class="comment"># 创建并启动第二个线程 </span></span><br><span class="line">        t2 =threading.Thread (target=action,args=(<span class="number">100</span>,))</span><br><span class="line">        t2.start ()</span><br><span class="line">print (<span class="string">' 主线程执行完成！'</span>)</span><br></pre></td></tr></table></figure><h2 id="3-2-ji-cheng-thread-lei-chuang-jian-xian-cheng-lei">3.2 继承 Thread 类创建线程类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过继承 threading.Thread 类来创建线程类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FkThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 重写 run () 方法作为线程执行体 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        <span class="keyword">while</span> self.i &lt; <span class="number">100</span>:</span><br><span class="line">            <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">            <span class="comment"># 线程对象的 getName () 方法获取当前线程的名字 </span></span><br><span class="line">            print (threading.current_thread ().getName () +  <span class="string">""</span> + str (self.i))</span><br><span class="line">            self.i += <span class="number">1</span></span><br><span class="line"><span class="comment"># 下面是主程序（也就是主线程的执行体）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">100</span>):</span><br><span class="line">    <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">    print (threading.current_thread ().getName () +  <span class="string">" "</span> + str (i))</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">20</span>:</span><br><span class="line">        <span class="comment"># 创建并启动第一个线程 </span></span><br><span class="line">        ft1 = FkThread ()</span><br><span class="line">        ft1.start ()</span><br><span class="line">        <span class="comment"># 创建并启动第二个线程 </span></span><br><span class="line">        ft2 = FkThread ()</span><br><span class="line">        ft2.start ()</span><br><span class="line">print (<span class="string">' 主线程执行完成！'</span>)</span><br></pre></td></tr></table></figure><h2 id="3-3-xian-cheng-chi">3.3 线程池</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个准备作为线程任务的函数 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(max)</span>:</span></span><br><span class="line">    my_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (max):</span><br><span class="line">        print (threading.current_thread ().name + <span class="string">'  '</span> + str (i))</span><br><span class="line">        my_sum += i</span><br><span class="line">    <span class="keyword">return</span> my_sum</span><br><span class="line"><span class="comment"># 创建一个包含 2 条线程的线程池 </span></span><br><span class="line">pool = ThreadPoolExecutor (max_workers=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 向线程池提交一个 task, 50 会作为 action () 函数的参数 </span></span><br><span class="line">future1 = pool.submit (action, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 向线程池再提交一个 task, 100 会作为 action () 函数的参数 </span></span><br><span class="line">future2 = pool.submit (action, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># 判断 future1 代表的任务是否结束 </span></span><br><span class="line">print (future1.done ())</span><br><span class="line">time.sleep (<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 判断 future2 代表的任务是否结束 </span></span><br><span class="line">print (future2.done ())</span><br><span class="line"><span class="comment"># 查看 future1 代表的任务返回的结果 </span></span><br><span class="line">print (future1.result ())</span><br><span class="line"><span class="comment"># 查看 future2 代表的任务返回的结果 </span></span><br><span class="line">print (future2.result ())</span><br><span class="line"><span class="comment"># 关闭线程池 </span></span><br><span class="line">pool.shutdown ()</span><br></pre></td></tr></table></figure><h1 id="4-xie-cheng-yi-bu-pa-chong">4. 协程：异步爬虫</h1><h2 id="4-1-await-fang-fa">4.1 await 方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep (n*<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        print (<span class="string">f"数字 < span class="subst">&#123;n&#125;</span> 被取消"</span>)<br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    tasks = [num (i) <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">10</span>)]</span><br><span class="line">    complete, pending = <span class="keyword">await</span> asyncio.wait (tasks, timeout=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> complete:</span><br><span class="line">        print (<span class="string">"当前数字"</span>,i.result ())</span><br><span class="line">    <span class="keyword">if</span> pending:</span><br><span class="line">        print (<span class="string">"取消未完成的任务"</span>)</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> pending:</span><br><span class="line">            p.cancel ()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    loop = asyncio.get_event_loop ()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        loop.run_until_complete (main ())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        loop.close ()</span><br></pre></td></tr></table></figure><h2 id="4-2-gather-fang-fa">4.2 gather 方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep (n * <span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        print (<span class="string">f"数字 < span class="subst">&#123;n&#125;</span> 被取消"</span>)<br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    tasks = [num (i) <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">10</span>)]</span><br><span class="line">    complete = <span class="keyword">await</span> asyncio.gather (*tasks)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> complete:</span><br><span class="line">        print (<span class="string">"当前数字"</span>, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    loop = asyncio.get_event_loop ()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        loop.run_until_complete (main ())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        loop.close ()</span><br></pre></td></tr></table></figure><h2 id="4-3-create-task-fang-fa">4.3 create_task () 方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(t)</span>:</span></span><br><span class="line">    print (<span class="string">'--&gt;'</span>, t)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep (<span class="number">0.5</span>)</span><br><span class="line">    print (<span class="string">'&lt;--'</span>, t)</span><br><span class="line">    <span class="keyword">return</span> t * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># loop = asyncio.get_event_loop ()</span></span><br><span class="line"></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        cor = a (cnt)   <span class="comment"># coroutine</span></span><br><span class="line">        resp = loop.create_task (cor)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep (<span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># print (resp)</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop ()</span><br><span class="line"></span><br><span class="line">loop.run_until_complete (b ())</span><br></pre></td></tr></table></figure><hr><p><a href="https://zhuanlan.zhihu.com/p/76695507" target="_blank" rel="noopener">如何让你写的爬虫速度像坐火箭一样快</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   线程是任务调度和执行的基本单位，而进程是操作系统资源分配的基本单位。&lt;/p&gt;
    
    </summary>
    
      <category term="Python爬虫" scheme="http://zhouweidong.ml/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://zhouweidong.ml/tags/Python/"/>
    
      <category term="爬虫" scheme="http://zhouweidong.ml/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="基础知识" scheme="http://zhouweidong.ml/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>ajax：动态加载</title>
    <link href="http://zhouweidong.ml/2019/09/09/ajax%EF%BC%9A%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"/>
    <id>http://zhouweidong.ml/2019/09/09/ajax：动态加载/</id>
    <published>2019-09-09T13:34:41.000Z</published>
    <updated>2020-09-03T12:57:21.519Z</updated>
    
    <content type="html"><![CDATA[<p>  Ajax 可以利用 JavaScript 在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页。</p><a id="more"></a><h1 id="1-ajax-fen-xi-fang-fa">1. Ajax 分析方法</h1><p>   在 Chrome 浏览器中，可以按住 f12，打开开发者工具，切换到 Network 选项卡，直接点击 XHR，清空所有内容后重新加载，分析每个请求的参数信息。然后，可以分析每个请求的响应内容。</p><h1 id="2-shi-li-zhua-qu-zhua-qu-ken-de-ji-men-mian-xin-xi">2. 实例：抓取抓取肯德基门面信息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 抓取肯德基门面信息 </span></span><br><span class="line"><span class="comment"># http://www.kfc.com.cn/kfccda/storelist/index.aspx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">page = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    url = <span class="string">'http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname'</span></span><br><span class="line">    parmas = &#123;</span><br><span class="line">        <span class="string">'cname'</span>: <span class="string">' 郑州 '</span>,</span><br><span class="line">        <span class="string">'pid'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'pageIndex'</span>: page,</span><br><span class="line">        <span class="string">'pageSize'</span>: <span class="string">'10'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post (url, data=parmas)</span><br><span class="line">    print (response.json ())</span><br><span class="line">    <span class="keyword">if</span> response.json ().get (<span class="string">'Table1'</span>, <span class="string">''</span>):</span><br><span class="line">       page += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">break</span></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  Ajax 可以利用 JavaScript 在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页。&lt;/p&gt;
    
    </summary>
    
      <category term="Python爬虫" scheme="http://zhouweidong.ml/categories/Python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://zhouweidong.ml/tags/Python/"/>
    
      <category term="爬虫" scheme="http://zhouweidong.ml/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="基础" scheme="http://zhouweidong.ml/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
