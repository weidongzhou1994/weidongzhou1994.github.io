<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode MySQL Day9</title>
    <url>/2020/09/07/%E2%80%9CLeetCode-MySQL-Day9/</url>
    <content><![CDATA[<p>   第 9 天：<br> <a id="more"></a> Write a SQL query to find all numbers that appear at least three times consecutively.</p>
<table>
<thead>
<tr class="header">
<th>Id</th>
<th>Num</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>1</td>
</tr>
<tr class="even">
<td>2</td>
<td>1</td>
</tr>
<tr class="odd">
<td>3</td>
<td>1</td>
</tr>
<tr class="even">
<td>4</td>
<td>2</td>
</tr>
<tr class="odd">
<td>5</td>
<td>1</td>
</tr>
<tr class="even">
<td>6</td>
<td>2</td>
</tr>
<tr class="odd">
<td>7</td>
<td>2</td>
</tr>
<tr class="even">
<td>-</td>
<td>--</td>
</tr>
</tbody>
</table>
<p>For example, given the above Logs table, 1 is the only number that appears consecutively for at least three times.</p>
<table>
<thead>
<tr class="header">
<th>ConsecutiveNums</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
</tr>
</tbody>
</table>
<p>   解决思路：前后相同则表示连续三个数均相同。<br></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">	( a.Num ) <span class="keyword">AS</span> ConsecutiveNums </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		<span class="keyword">id</span>,</span><br><span class="line">		<span class="keyword">num</span>,</span><br><span class="line">		lag ( <span class="keyword">num</span>, <span class="number">1</span>, <span class="number">0</span> ) <span class="keyword">over</span> () <span class="keyword">AS</span> pre,</span><br><span class="line">		<span class="keyword">lead</span> ( <span class="keyword">num</span>, <span class="number">1</span>, <span class="number">0</span> ) <span class="keyword">over</span> () <span class="keyword">AS</span> nxt </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">LOGS</span> </span><br><span class="line">	) a </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	a.Num = a.pre </span><br><span class="line">	<span class="keyword">AND</span> a.Num = a.nxt</span><br></pre></td></tr></table></figure>
<p>   知识点：窗口函数 <a href="https://www.jianshu.com/p/e0d73f8b71ec" target="_blank" rel="noopener">lag () 和 lead ()</a>。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>LeetCode MySQL Day8</title>
    <url>/2020/09/06/LeetCode-MySQL-Day8/</url>
    <content><![CDATA[<p>   第 8 天：</p>
<a id="more"></a>
<p>  Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no &quot;holes&quot; between ranks.</p>
<table>
<thead>
<tr class="header">
<th>Id</th>
<th>Score</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>3.50</td>
</tr>
<tr class="even">
<td>2</td>
<td>3.65</td>
</tr>
<tr class="odd">
<td>3</td>
<td>4.00</td>
</tr>
<tr class="even">
<td>4</td>
<td>3.85</td>
</tr>
<tr class="odd">
<td>5</td>
<td>4.00</td>
</tr>
<tr class="even">
<td>6</td>
<td>3.65</td>
</tr>
</tbody>
</table>
<p>  For example, given the above Scores table, your query should generate the following report (order by highest score):</p>
<table>
<thead>
<tr class="header">
<th>score</th>
<th>Rank</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>4.00</td>
<td>1</td>
</tr>
<tr class="even">
<td>4.00</td>
<td>1</td>
</tr>
<tr class="odd">
<td>3.85</td>
<td>2</td>
</tr>
<tr class="even">
<td>3.65</td>
<td>3</td>
</tr>
<tr class="odd">
<td>3.65</td>
<td>3</td>
</tr>
<tr class="even">
<td>3.50</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>  Important Note: For MySQL solutions, to escape reserved words used as column names, you can use an apostrophe before and after the keyword. For example <code>Rank</code>.</p>
<p>   解决方案：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> score, <span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="string">'Rank'</span> <span class="keyword">from</span> Scores</span><br></pre></td></tr></table></figure>
<p>   知识点：</p>
<p><img src="https://picgo-1258437747.cos.ap-nanjing.myqcloud.com/20200906224250.png"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>从瑟尔沃法则看内外双循环</title>
    <url>/2020/09/04/%E4%BB%8E%E7%91%9F%E5%B0%94%E6%B2%83%E6%B3%95%E5%88%99%E7%9C%8B%E5%86%85%E5%A4%96%E5%8F%8C%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<blockquote>
<p>   在收支均衡约束下的哈罗德模型中，经济增长对外部需求扩张的依赖关系，被称为 “瑟尔沃法则”。<br>    令 M 为进口，X 为出口，Y 为实际 GDP，<span class="math inline">\(\mu\)</span> 为进口倾向，则在内部均衡的前提下，外部均衡为 <span class="math inline">\(X=M=\mu Y\)</span>，则有 <span class="math inline">\(Y=\frac {X}{\mu}\)</span>，得 <span class="math inline">\(g = \frac {\Delta Y}{Y} = \frac {\frac {\Delta X}{X}}{\epsilon}\)</span>。<br></p>
</blockquote>
<p>   从分子来看：外部需求的增长与经济增长存在着对应关系。<br>    从分母来看：如果要实现 “内循环”，必须降低国内循环的对外需求，即实现消费品和生产资料的进口替代。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>宏观经济</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode MySql Day07</title>
    <url>/2020/09/02/LeetCode-MySql-Day07/</url>
    <content><![CDATA[<p>   第 7 天 <br> <a id="more"></a>   Write a SQL query to get the nth highest salary from the Employee table.</p>
<table>
<thead>
<tr class="header">
<th>Id</th>
<th>Salary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>100</td>
</tr>
<tr class="even">
<td>2</td>
<td>200</td>
</tr>
<tr class="odd">
<td>3</td>
<td>300</td>
</tr>
</tbody>
</table>
<p>For example, given the above Employee table, the nth highest salary where n = 2 is 200. If there is no nth highest salary, then the query should return null.</p>
<table>
<thead>
<tr class="header">
<th>getNthHighestSalary (2)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>200</td>
</tr>
</tbody>
</table>
<p>   解决方法如下：<br></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary (N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> M <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> M = N<span class="number">-1</span>;</span><br><span class="line">  RETURN (</span><br><span class="line">      # Write your MySQL query statement below.</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary</span><br><span class="line">      <span class="keyword">FROM</span> Employee</span><br><span class="line">      <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">      <span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> M</span><br><span class="line">  );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<p>   这里涉及到自定义函数，基本的语法格式如下：<br> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> &lt; 函数名 & gt; ( [ &lt; 参数 < span class="number">1</span>&gt; &lt; 类型 < span class="number">1&gt; [ , &lt; 参数 < span class="number">2&gt; &lt; 类型 < span class="number">2&gt;] ] … )<br><span class="line">    <span class="keyword">RETURNS</span> &lt; 类型 & gt;</span><br><span class="line">    &lt; 函数主体 & gt;</span><br></pre></td></tr></table></figure></p>
<p>   调用自定义函数的基本语法格式如下：<br> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt; 自定义函数名 & gt; ([&lt; 参数 & gt; [,...]])</span><br></pre></td></tr></table></figure></p>
<p>   删除自定义函数的基本语法格式如下：<br> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> [ <span class="keyword">IF</span> <span class="keyword">EXISTS</span> ] &lt; 自定义函数名 & gt;</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Function</tag>
      </tags>
  </entry>
  <entry>
    <title>灰色预测模型</title>
    <url>/2020/09/02/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>   灰色预测模型是在样本较小、信息不完全的情况下，通过挖掘数据的特征进行预测的方法。<br> <a id="more"></a>    首先需要由原始数据序列计算一次累加序列：<br></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x0 &lt;- seq (<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">x1 &lt;- cumsum (x)</span><br></pre></td></tr></table></figure>
<p>   然后，需要建立矩阵 <span class="math display">\[\pmb {B}=\left [\begin {array}{cc}
  -\frac {1}{2}[x^{(1)}(2)+x^{(1)}(1)]&amp;1\\
  \vdots&amp;\vdots\\
  -\frac {1}{2}[x^{(1)}(k)+x^{(1)}(k-1)]&amp;1  
\end {array}\right]
\]</span> 和 <span class="math display">\[\pmb {y}=\left [\begin {array}{c}
  x^{0}_{2}\\
  \vdots \\
  x^{0}_{k}
\end {array}\right]
\]</span></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">B = matrix (data = <span class="number">1</span>, nrow = (length (x1) - <span class="number">1</span>), ncol = <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:(length (x1) - <span class="number">1</span>)) &#123;</span><br><span class="line">    B [i, <span class="number">1</span>] = (x1 [i] + x1 [i+<span class="number">1</span>])*(-<span class="number">1.0</span>)/<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">y = as.matrix (x0 [<span class="number">2</span>:length (x0)])</span><br></pre></td></tr></table></figure>
<p>   之后，可以由 <span class="math inline">\(\hat {U} = (\pmb {B}^{T}\pmb {B})^{-1}\pmb {B}^{T}\pmb {y}=\left [\begin {array}{c} \hat {a} \\ \hat {u} \end {array}\right]\)</span>, 求出 <span class="math inline">\(\hat {a}\)</span> 和 <span class="math inline">\(\hat {u}\)</span>：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">BT = t (B)</span><br><span class="line">a = sovle (BT %*% B) %*% BT %*% y</span><br></pre></td></tr></table></figure>
<p>   最后，把 <span class="math inline">\(\hat {a}\)</span> 和 <span class="math inline">\(\hat {u}\)</span> 代入时间响应方程：</p>
<p><span class="math display">\[
x^{(1)}(k+1) = [x^{(1)}_{1} - \frac {\hat {u}}{\hat {a}}] e^{-\hat {a} k} + \frac {\hat {u}}{\hat {a}}
\]</span></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">k &lt;- rep (<span class="number">1</span>, length)</span><br><span class="line">xk &lt;- rep (<span class="number">1</span>,(length (x0)+n))</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:length (x0)+n) &#123;</span><br><span class="line">    u = a [<span class="number">2</span>]/a [<span class="number">1</span>]</span><br><span class="line">    xk [i] = (x1 [<span class="number">1</span>] - u)*exp ((-<span class="number">1</span>)*a [<span class="number">1</span>]*(k [i])) + u</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   此时得到的结果是拟合值 <span class="math inline">\(\hat {x}^{1}_{i}\)</span> ，需要利用后减运算还原为模型的拟合值 <span class="math inline">\(\hat {x}^{0}_{i}\)</span>：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">xhat &lt;- rep (<span class="number">1</span>, length (xk))</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:legth (xk)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">        xhat [i] = x0 [<span class="number">1</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        xhat [i] = xk [i] - xk [i-<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   得出拟合值后，需要评价一下模型的精度，主要评价指标有：</p>
<ul>
<li>残差：<span class="math inline">\(e (k)=x^{(0)}_{k}-\hat {x}^{(0)}_{k}\)</span>。</li>
<li>相对残差：<span class="math inline">\(e (k)=\frac {x^{(0)}_{k}-\hat {x}^{(0)}_{k}}{x^{(0)}_{k}}\)</span>。</li>
<li>均方差比（后残差比值）：<span class="math inline">\(C=\frac {S_{2}}{S_{1}}=\frac {\sqrt {\frac {1}{N}\sum_{k=1}^{N}[x^{(0)}_k-\bar {X}]^{2}}}{\sqrt {\frac {1}{N-1}\sum_{k=2}^{N}[E (k)-\bar {E}]^{2}}}\)</span>，小于 0.35 表示模型精度相对比较好。</li>
<li>小误差概率：<span class="math inline">\(P = P {|E (k)-\bar {E}|&lt;0.6745S_{1}}\)</span>，大于 0.95 表示模型精度相对比较好。</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>LeetCode MySql Day6</title>
    <url>/2020/05/13/LeetCode-MySql-Day06/</url>
    <content><![CDATA[<p>   第六天：</p>
<a id="more"></a>
<h2 id="swap-salary">627. Swap Salary</h2>
<p>  Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a <strong>single update statement</strong> and no intermediate temp table.</p>
<p>  Note that you must write a single update statement, <strong>DO NOT</strong> write any select statement for this problem.</p>
<p>  <strong>Example:</strong></p>
<table>
<thead>
<tr class="header">
<th>id</th>
<th>name</th>
<th>sex</th>
<th>salary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>A</td>
<td>m</td>
<td>2500</td>
</tr>
<tr class="even">
<td>2</td>
<td>B</td>
<td>f</td>
<td>1500</td>
</tr>
<tr class="odd">
<td>3</td>
<td>C</td>
<td>m</td>
<td>5500</td>
</tr>
<tr class="even">
<td>4</td>
<td>D</td>
<td>f</td>
<td>500</td>
</tr>
</tbody>
</table>
<p>  After running your <strong>update</strong> statement, the above salary table should have the following rows:</p>
<table>
<thead>
<tr class="header">
<th>id</th>
<th>name</th>
<th>sex</th>
<th>salary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>A</td>
<td>f</td>
<td>2500</td>
</tr>
<tr class="even">
<td>2</td>
<td>B</td>
<td>m</td>
<td>1500</td>
</tr>
<tr class="odd">
<td>3</td>
<td>C</td>
<td>f</td>
<td>5500</td>
</tr>
<tr class="even">
<td>4</td>
<td>D</td>
<td>m</td>
<td>500</td>
</tr>
</tbody>
</table>
<p>   解决方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = (<span class="keyword">case</span> <span class="keyword">when</span> sex = <span class="string">"f"</span> <span class="keyword">then</span> <span class="string">"m"</span> <span class="keyword">else</span> <span class="string">"f"</span> <span class="keyword">end</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = <span class="built_in">char</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) ^ <span class="keyword">ASCII</span>(<span class="string">'m'</span>) ^ <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></table></figure>
<p>   解法一：利用条件表达式函数 case when … … then … … else … … end，相当于 if … … else 。</p>
<p>   解法二：利用 XOR (异或) 运算符和 ASCII 编码进行转换：f 和 m 的 ASCII 编码值分别为 102 和 109 ，XOR 运算符 (^) 的作用是舍去二进制的进位，具体而言：首先将十进制转换为二进制，即 bin (102)=0b1100110，bin (109)=0b1101101，易知 0b1100110^0b110110 = 0b1011 ，再将二进制转换为十进制，即 int (str (1011), 2) = 11，同理可知 11^102=109 和 11^109 = 102 。</p>
<h2 id="reformat-department-table">1179. Reformat Department Table</h2>
<p>  Table: <code>Department</code></p>
<table>
<thead>
<tr class="header">
<th>Column Name</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>id</td>
<td>int</td>
</tr>
<tr class="even">
<td>revenue</td>
<td>int</td>
</tr>
<tr class="odd">
<td>month</td>
<td>varchar</td>
</tr>
</tbody>
</table>
<p>  (id, month) is the primary key of this table.</p>
<p>  The table has information about the revenue of each department per month.</p>
<p>  The month has values in [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;].</p>
<p>  Write an SQL query to reformat the table such that there is a department id column and a revenue column <strong>for each month</strong>.</p>
<p>  The query result format is in the following example:</p>
<p>  Department table:</p>
<table>
<thead>
<tr class="header">
<th>id</th>
<th>revenue</th>
<th>month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>8000</td>
<td>Jan</td>
</tr>
<tr class="even">
<td>2</td>
<td>9000</td>
<td>Jan</td>
</tr>
<tr class="odd">
<td>3</td>
<td>10000</td>
<td>Feb</td>
</tr>
<tr class="even">
<td>1</td>
<td>7000</td>
<td>Feb</td>
</tr>
<tr class="odd">
<td>1</td>
<td>6000</td>
<td>Mar</td>
</tr>
</tbody>
</table>
<p>  Result table:</p>
<table>
<thead>
<tr class="header">
<th>id</th>
<th>Jan_Revenue</th>
<th>Feb_Revenue</th>
<th>Mar_Revenue</th>
<th>...</th>
<th>Dec_Revenue</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>8000</td>
<td>7000</td>
<td>6000</td>
<td>...</td>
<td>null</td>
</tr>
<tr class="even">
<td>2</td>
<td>9000</td>
<td>null</td>
<td>null</td>
<td>...</td>
<td>null</td>
</tr>
<tr class="odd">
<td>3</td>
<td>null</td>
<td>10000</td>
<td>null</td>
<td>...</td>
<td>null</td>
</tr>
</tbody>
</table>
<p>   解决方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Jan'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Jan_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Feb'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Feb_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Mar'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Mar_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Apr'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Apr_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'May'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> May_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Jun'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Jun_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Jul'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Jul_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Aug'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Aug_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Sep'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Sep_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Oct'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Oct_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Nov'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Nov_Revenue,</span><br><span class="line">    <span class="keyword">MAX</span>(<span class="keyword">IF</span>(<span class="keyword">month</span> = <span class="string">'Dec'</span>, revenue, <span class="literal">null</span>)) <span class="keyword">AS</span> Dec_Revenue</span><br><span class="line"><span class="keyword">FROM</span> Department</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure>
<p>   知识点：if (expr1,expr2,expr3)，如果 expr1 是 TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL)，则 IF () 的返回值为 expr2; 否则返回值则为 expr3。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode MySql Day5</title>
    <url>/2020/05/12/LeetCode-MySql-Day5/</url>
    <content><![CDATA[<p>   第五天：</p>
<a id="more"></a>
<h2 id="classes-more-than-5-students">596. Classes More Than 5 Students</h2>
<p>  There is a table <code>courses</code> with columns: <strong>student</strong> and <strong>class</strong></p>
<p>  Please list out all classes which have more than or equal to 5 students.</p>
<p>  For example, the table:</p>
<table>
<thead>
<tr class="header">
<th>student</th>
<th>class</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>Math</td>
</tr>
<tr class="even">
<td>B</td>
<td>English</td>
</tr>
<tr class="odd">
<td>C</td>
<td>Math</td>
</tr>
<tr class="even">
<td>D</td>
<td>Biology</td>
</tr>
<tr class="odd">
<td>E</td>
<td>Math</td>
</tr>
<tr class="even">
<td>F</td>
<td>Computer</td>
</tr>
<tr class="odd">
<td>G</td>
<td>Math</td>
</tr>
<tr class="even">
<td>H</td>
<td>Math</td>
</tr>
<tr class="odd">
<td>I</td>
<td>Math</td>
</tr>
</tbody>
</table>
<p>  Should output:</p>
<table>
<thead>
<tr class="header">
<th>class</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Math</td>
</tr>
</tbody>
</table>
<p>  <strong>Note:</strong></p>
<p>  The students should not be counted duplicate in each course.</p>
<p>   解决方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">class</span> <span class="keyword">from</span> courses <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">class</span> <span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> student) &gt;= <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h2 id="not-boring-movies">620. Not Boring Movies</h2>
<p>  X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.</p>
<p>  Please write a SQL query to output movies with an odd numbered ID and a description that is not 'boring'. Order the result by rating.</p>
<p>  For example, table <code>cinema</code>:</p>
<table>
<thead>
<tr class="header">
<th>id</th>
<th>movie</th>
<th>description</th>
<th>rating</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>War</td>
<td>great 3D</td>
<td>8.9</td>
</tr>
<tr class="even">
<td>2</td>
<td>Science</td>
<td>fiction</td>
<td>8.5</td>
</tr>
<tr class="odd">
<td>3</td>
<td>irish</td>
<td>boring</td>
<td>6.2</td>
</tr>
<tr class="even">
<td>4</td>
<td>Ice song</td>
<td>Fantacy</td>
<td>8.6</td>
</tr>
<tr class="odd">
<td>5</td>
<td>House card</td>
<td>Interesting</td>
<td>9.1</td>
</tr>
</tbody>
</table>
<p>  For the example above, the output should be:</p>
<table>
<thead>
<tr class="header">
<th>id</th>
<th>movie</th>
<th>description</th>
<th>rating</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>5</td>
<td>House card</td>
<td>Interesting</td>
<td>9.1</td>
</tr>
<tr class="even">
<td>1</td>
<td>War</td>
<td>great 3D</td>
<td>8.9</td>
</tr>
</tbody>
</table>
<p>   解决方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cinema <span class="keyword">where</span> <span class="keyword">mod</span>(<span class="keyword">id</span>, <span class="number">2</span>) != <span class="number">0</span> <span class="keyword">and</span> description <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">'boring'</span> <span class="keyword">order</span> <span class="keyword">by</span> rating <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cinema <span class="keyword">where</span> description &lt;&gt; <span class="string">'boring'</span> <span class="keyword">and</span> <span class="keyword">id</span> &amp; <span class="number">1</span> = <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> rating <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<p>   两个知识点：对于字符串 not like 是模糊查询，&lt;&gt; 则是完整查询，二者的区别是前者要求数据里面不包含某个字段，后者要求数据不是某个字段；&amp; 是位运算符，可以用于判断对 <span class="math inline">\(2^n\)</span> 取余，是一个取巧的办法，加快了运算速度。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode MySql Day4</title>
    <url>/2020/05/08/LeetCode-MySql-Day4/</url>
    <content><![CDATA[<p>   第四天：</p>
<a id="more"></a>
<h2 id="rising-temperature">197. Rising Temperature</h2>
<p>  Given a Weather table, write a SQL query to find all dates' Ids with higher temperature compared to its previous (yesterday's) dates.</p>
<table>
<thead>
<tr class="header">
<th>Id (INT)</th>
<th>RecordDate (DATE)</th>
<th>Temperature (INT)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>2015-01-01</td>
<td>10</td>
</tr>
<tr class="even">
<td>2</td>
<td>2015-01-02</td>
<td>25</td>
</tr>
<tr class="odd">
<td>3</td>
<td>2015-01-03</td>
<td>20</td>
</tr>
<tr class="even">
<td>4</td>
<td>2015-01-04</td>
<td>30</td>
</tr>
</tbody>
</table>
<p>  For example, return the following Ids for the above Weather table:title: LeetCode MySql Day4</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Id</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2</td>
</tr>
<tr class="even">
<td style="text-align: left;">4</td>
</tr>
</tbody>
</table>
<p>   解决方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> w1.Id <span class="keyword">from</span> Weather w1, Weather w2 <span class="keyword">where</span> w1.Temperature &gt; w2.Temperature <span class="keyword">and</span> <span class="keyword">DateDiff</span>(w1. RecordDate, w2.RecordDate) = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>   知识点：时间类型的处理 - DataDiff (d1, d2)：计算日期 d1-&gt;d2 之间相隔的天数。</p>
<h2 id="big-countries">595. Big Countries</h2>
<p>  There is a table World：</p>
<table>
<thead>
<tr class="header">
<th>name</th>
<th>continent</th>
<th>area</th>
<th>population</th>
<th>gdp</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Afghanistan</td>
<td>Asia</td>
<td>652230</td>
<td>25500100</td>
<td>20343000</td>
</tr>
<tr class="even">
<td>Albania</td>
<td>Europe</td>
<td>28748</td>
<td>2831741</td>
<td>12960000</td>
</tr>
<tr class="odd">
<td>Algeria</td>
<td>Africa</td>
<td>2381741</td>
<td>37100000</td>
<td>1.89E+08</td>
</tr>
<tr class="even">
<td>Andorra</td>
<td>Europe</td>
<td>468</td>
<td>78115</td>
<td>3712000</td>
</tr>
<tr class="odd">
<td>Angola</td>
<td>Africa</td>
<td>1246700</td>
<td>20609294</td>
<td>1.01E+08</td>
</tr>
</tbody>
</table>
<p>  A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</p>
<p>  Write a SQL solution to output big countries' name, population and area.</p>
<p>  For example, according to the above table, we should output:</p>
<table>
<thead>
<tr class="header">
<th>name</th>
<th>population</th>
<th>area</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Afghanistan</td>
<td>25500100</td>
<td>652230</td>
</tr>
<tr class="even">
<td>Algeria</td>
<td>37100000</td>
<td>2381741</td>
</tr>
</tbody>
</table>
<p>   解决方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, population, area <span class="keyword">from</span> World <span class="keyword">where</span> population &gt; <span class="number">25000000</span> <span class="keyword">or</span> area &gt; <span class="number">3000000</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, population, area <span class="keyword">from</span> World <span class="keyword">where</span> population &gt; <span class="number">25000000</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">name</span>, population, area <span class="keyword">from</span> World <span class="keyword">where</span> area &gt; <span class="number">3000000</span>;</span><br></pre></td></tr></table></figure>
<p>  union 替代 or 虽然看起来比较繁琐，但会加快运算速度。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode MySql Day3</title>
    <url>/2020/05/07/LeetCode-MySql-Day3/</url>
    <content><![CDATA[<p>   第三天：</p>
<a id="more"></a>
<h2 id="customers-who-never-order">183. Customers Who Never Order</h2>
<p>  Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.</p>
<p>  Table: Customers.</p>
<table>
<thead>
<tr class="header">
<th>Id</th>
<th>Name</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>Joe</td>
</tr>
<tr class="even">
<td>2</td>
<td>Henry</td>
</tr>
<tr class="odd">
<td>3</td>
<td>Sam</td>
</tr>
<tr class="even">
<td>4</td>
<td>Max</td>
</tr>
</tbody>
</table>
<p>  Table: Orders.</p>
<table>
<thead>
<tr class="header">
<th>Id</th>
<th>CustomerId</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>3</td>
</tr>
<tr class="even">
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>Using the above tables as example, return the following:</p>
<table>
<thead>
<tr class="header">
<th>Customers</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Henry</td>
</tr>
<tr class="even">
<td>Max</td>
</tr>
</tbody>
</table>
<p>   解决方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Name</span> <span class="keyword">as</span> Customers <span class="keyword">from</span> Customers <span class="keyword">where</span> <span class="keyword">Id</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> CustimerId <span class="keyword">from</span> Orders);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c.Name <span class="keyword">from</span> Customers c <span class="keyword">left</span> <span class="keyword">join</span> Orders o <span class="keyword">on</span> c.Id = o.CustormerId <span class="keyword">where</span> o.CustomerId <span class="keyword">is</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<p>   前者的逻辑清晰，但对于大数据而言运算速度慢于后者。</p>
<h2 id="delete-duplicate-emails">196. Delete Duplicate Emails</h2>
<p>  Write a SQL query to delete all duplicate email entries in a table named Person, keeping only unique emails based on its smallest Id.</p>
<table>
<thead>
<tr class="header">
<th>Id</th>
<th>Email</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>john@example.com</td>
</tr>
<tr class="even">
<td>2</td>
<td>bob@example.com</td>
</tr>
<tr class="odd">
<td>3</td>
<td>john@example.com</td>
</tr>
</tbody>
</table>
<p>  Id is the primary key column for this table.</p>
<p>  For example, after running your query, the above Person table should have the following rows:</p>
<table>
<thead>
<tr class="header">
<th>Id</th>
<th>Email</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>john@example.com</td>
</tr>
<tr class="even">
<td>2</td>
<td>bob@example.com</td>
</tr>
</tbody>
</table>
<p>   解决方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> p1 <span class="keyword">from</span> Person p1, Person p2 <span class="keyword">where</span> p1.Email = p2.Email <span class="keyword">and</span> p1.Id &gt; p2.Id;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> Person <span class="keyword">where</span> <span class="keyword">Id</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">from</span> Person <span class="keyword">group</span> <span class="keyword">by</span> Email) <span class="keyword">as</span> p);</span><br></pre></td></tr></table></figure>
<p>   前者的逻辑相对比较清晰；后者的逻辑是：无论是否重复，利用 group by 分组 求 Id 的最小值，即需要保留的数据，然后利用 not in 删除剩余部分。</p>
<p>   值得注意的是：利用 delete 语句删除数据前，务必先使用 select 语句确定删除的数据是否正确，避免误删。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode MySql Day2</title>
    <url>/2020/05/02/LeetCode-MySql-Day2/</url>
    <content><![CDATA[<p>   第二天：<br></p>
<a id="more"></a>
<h2 id="employees-earning-more-than-their-managers">181. Employees Earning More Than Their Managers<br></h2>
<p>  The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.<br></p>
<table>
<thead>
<tr class="header">
<th>Id</th>
<th>Name</th>
<th>Salary</th>
<th>ManagerId</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>Joe</td>
<td>70000</td>
<td>3</td>
</tr>
<tr class="even">
<td>2</td>
<td>Henry</td>
<td>80000</td>
<td>4</td>
</tr>
<tr class="odd">
<td>3</td>
<td>Sam</td>
<td>60000</td>
<td>NULL</td>
</tr>
<tr class="even">
<td>4</td>
<td>Max</td>
<td>90000</td>
<td>NULL</td>
</tr>
</tbody>
</table>
<p>  Given the Employee table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.<br></p>
<table>
<thead>
<tr class="header">
<th>Employee</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Joe</td>
</tr>
</tbody>
</table>
<p>   解决方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.Name <span class="keyword">as</span> Employee <span class="keyword">from</span> Employee e, Employee m <span class="keyword">where</span> e.ManagerId=m.Id <span class="keyword">and</span> e.Salary &gt; m.Salary;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.Name <span class="keyword">as</span> Employee <span class="keyword">from</span> Employee e <span class="keyword">inner</span> <span class="keyword">join</span> Employee.m <span class="keyword">on</span> e.ManagerId=m.Id <span class="keyword">where</span> e.Salary &gt; m.Salary;</span><br></pre></td></tr></table></figure>
<p>   前者的逻辑比较清晰，后者稍微有点绕，连接后的表大概是如下模样：<br></p>
<table>
<colgroup>
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th> e.Id </th>
<th> e.Name  </th>
<th> e.Salary </th>
<th> e.ManagerId </th>
<th> m.Id </th>
<th> m.Name  </th>
<th> m.Salary </th>
<th> m.ManagerId </th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td> Joe   </td>
<td>70000</td>
<td>3</td>
<td>3</td>
<td> Sam   </td>
<td>60000</td>
<td> NULL</td>
</tr>
<tr class="even">
<td>2</td>
<td> Henry </td>
<td>80000</td>
<td>4</td>
<td>4</td>
<td> Max   </td>
<td>90000</td>
<td> NULL</td>
</tr>
</tbody>
</table>
<h2 id="duplicate-emails">182. Duplicate Emails<br></h2>
<p>  Write a SQL query to find all duplicate emails in a table named Person.<br> | Id | Email | |--|--| |1| a@b.com | |2| c@d.com | |3| a@b.com |</p>
<p>  For example, your query should return the following for the above table:<br> | Email | |--| | a@b.com |</p>
<p>   解决方法：<br></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> Email <span class="keyword">from</span> Person <span class="keyword">group</span> <span class="keyword">by</span> Email <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> Email <span class="keyword">from</span> Person p1 <span class="keyword">inner</span> <span class="keyword">join</span> Person p2 <span class="keyword">on</span> p1.Email=p2.Email <span class="keyword">where</span> p1.Id &lt;&gt; p2.Id;</span><br></pre></td></tr></table></figure>
<p>   后者只是提供一种思路，太绕了。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode MySql Day1</title>
    <url>/2020/04/30/LeetCode-MySql-Day1/</url>
    <content><![CDATA[<p>   从今天开始练习 MySql：</p>
<a id="more"></a>
<h2 id="combine-two-tables">175. Combine Two Tables</h2>
<p>  Table: Person</p>
<table>
<thead>
<tr class="header">
<th>Column Name</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>PersonId</td>
<td>int</td>
</tr>
<tr class="even">
<td>FirstName</td>
<td>varchar</td>
</tr>
<tr class="odd">
<td>LastName</td>
<td>varchar</td>
</tr>
</tbody>
</table>
<p>PersonId is the primary key column for this table.</p>
<p>  Table: Address</p>
<table>
<thead>
<tr class="header">
<th>Column Name</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>AddressId</td>
<td>int</td>
</tr>
<tr class="even">
<td>PersonId</td>
<td>int</td>
</tr>
<tr class="odd">
<td>City</td>
<td>varchar</td>
</tr>
<tr class="even">
<td>State</td>
<td>varchar</td>
</tr>
</tbody>
</table>
<p>AddressId is the primary key column for this table.</p>
<p>  Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:</p>
<p>FirstName, LastName, City, State</p>
<p>  Data: <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;"headers": &#123;"Person": ["PersonId", "LastName", "FirstName"], "Address": ["AddressId", "PersonId", "City", "State"]&#125;, "rows": &#123;"Person": [[1, "Wang", "Allen"]], "Address": [[1, 2, "New York City", "New York"]]&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>   比较一下两个答案：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> FirstName, LastName, City, State <span class="keyword">from</span> Person, Address <span class="keyword">where</span> Person.PersonId=Address.PersonId;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> p.FirstName, p.LastName, a.City, a.State  <span class="keyword">from</span> Person p <span class="keyword">left</span> <span class="keyword">join</span> Address a <span class="keyword">on</span> p.PersonId = a.PersonId;</span><br></pre></td></tr></table></figure>
<p>   前者不返回任何值，后者只返回 Person 中的值，原因很简单：where 相当于 full join , 返回符合要求的值；left join … … on 返回左表中的值和符合要求的右表中的值。    补充知识：在 select 语句中，可以临时给表起别名： 表名 [as] 表别名。（[] 表示内容可省略）</p>
<h2 id="second-highest-salary">176. Second Highest Salary</h2>
<p>  Write a SQL query to get the second highest salary from the Employee table.</p>
<table>
<thead>
<tr class="header">
<th>Id</th>
<th>Salary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>100</td>
</tr>
<tr class="even">
<td>2</td>
<td>200</td>
</tr>
<tr class="odd">
<td>3</td>
<td>300</td>
</tr>
</tbody>
</table>
<p>  For example, given the above Employee table, the query should return 200 as the second highest salary. If there is no second highest salary, then the query should return null.</p>
<table>
<thead>
<tr class="header">
<th>SecondHighestSalary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>200</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> Salary <span class="keyword">from</span> Employee <span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">Desc</span> <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span></span><br><span class="line">) </span><br><span class="line"><span class="keyword">as</span> SecondHighestSalary</span><br></pre></td></tr></table></figure>
<p>   去重：distinct；排序：order by —— 降序：DESC (默认为升序)；限制结果：limit 结果数；偏移数：offset 偏移数。</p>
<p>   重新命名: select as 新名。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql：如何统计连续打卡天数</title>
    <url>/2020/04/14/Sql%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1%E8%BF%9E%E7%BB%AD%E6%89%93%E5%8D%A1%E5%A4%A9%E6%95%B0/</url>
    <content><![CDATA[<p>   在实际的工作情境中，统计员工的连续打卡天数是一个十分重要的应用。</p>
<a id="more"></a>
<h1 id="创建示例数据">创建示例数据</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`打卡`</span> (uid <span class="built_in">INT</span>(<span class="number">5</span>), tdate <span class="built_in">date</span>, is_flag <span class="built_in">INT</span>(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`打卡`</span></span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	( <span class="string">'1'</span>, <span class="string">'2020/2/1'</span>, <span class="string">'1'</span> ),</span><br><span class="line">	( <span class="string">'1'</span>, <span class="string">'2020/2/2'</span>, <span class="string">'0'</span> ),</span><br><span class="line">	( <span class="string">'1'</span>, <span class="string">'2020/2/3'</span>, <span class="string">'1'</span> ),</span><br><span class="line">	( <span class="string">'1'</span>, <span class="string">'2020/2/4'</span>, <span class="string">'1'</span> ),</span><br><span class="line">	( <span class="string">'1'</span>, <span class="string">'2020/2/5'</span>, <span class="string">'0'</span> ),</span><br><span class="line">	( <span class="string">'1'</span>, <span class="string">'2020/2/6'</span>, <span class="string">'1'</span> ),</span><br><span class="line">	( <span class="string">'1'</span>, <span class="string">'2020/2/7'</span>, <span class="string">'1'</span> ),</span><br><span class="line">	( <span class="string">'1'</span>, <span class="string">'2020/2/8'</span>, <span class="string">'1'</span> ),</span><br><span class="line">	( <span class="string">'2'</span>, <span class="string">'2020/2/1'</span>, <span class="string">'1'</span> ),</span><br><span class="line">	( <span class="string">'2'</span>, <span class="string">'2020/2/2'</span>, <span class="string">'0'</span> ),</span><br><span class="line">	( <span class="string">'2'</span>, <span class="string">'2020/2/3'</span>, <span class="string">'0'</span> ),</span><br><span class="line">	( <span class="string">'2'</span>, <span class="string">'2020/2/4'</span>, <span class="string">'1'</span> ),</span><br><span class="line">	( <span class="string">'2'</span>, <span class="string">'2020/2/5'</span>, <span class="string">'1'</span> ),</span><br><span class="line">	( <span class="string">'2'</span>, <span class="string">'2020/2/6'</span>, <span class="string">'1'</span> ),</span><br><span class="line">	( <span class="string">'2'</span>, <span class="string">'2020/2/7'</span>, <span class="string">'1'</span> ),</span><br><span class="line">	( <span class="string">'2'</span>, <span class="string">'2020/2/8'</span>, <span class="string">'1'</span> );</span><br></pre></td></tr></table></figure>
<h1 id="统计连续打卡天数">统计连续打卡天数</h1>
<p>   总体思路是：首先，判断今日是否打卡；然后，判断是否是连续打卡；最后，统计连续打卡天数。</p>
<h2 id="判断今日是否打卡">判断今日是否打卡</h2>
<p>   提取打卡的数据可以用 where is_flag = 1:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	uid,</span><br><span class="line">	tdate,</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="string">`打卡`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	is_flag = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h2 id="判断是否是连续打卡">判断是否是连续打卡</h2>
<p>   如果是连续打卡，明显日期应该是等差序列，多个等差序列和其公差相同的另一个等差序列相减，则同一等差序列与这个等差序列的差必然相同，简单的例子如下：</p>
<table>
<thead>
<tr class="header">
<th>x</th>
<th>y</th>
<th>x-y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td>2</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="odd">
<td>4</td>
<td>3</td>
<td>1</td>
</tr>
<tr class="even">
<td>5</td>
<td>4</td>
<td>1</td>
</tr>
<tr class="odd">
<td>6</td>
<td>5</td>
<td>1</td>
</tr>
<tr class="even">
<td>8</td>
<td>6</td>
<td>2</td>
</tr>
<tr class="odd">
<td>9</td>
<td>7</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>   因此，判断是否是连续打卡的方法如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	uid,</span><br><span class="line">	tdate,</span><br><span class="line">	row_number () <span class="keyword">over</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> uid <span class="keyword">ORDER</span> <span class="keyword">BY</span> tdate ) date_rank </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="string">`打卡`</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	is_flag = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>   在这里，使用 <figure class="highlight plain"><figcaption><span>over ()```方法生成连续数列：</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">|uid|tdate|date_rank|</span><br><span class="line">|--|--|--|</span><br><span class="line">|1|2020/2/1|1|</span><br><span class="line">|1|2020/2/3|2|</span><br><span class="line">|1|2020/2/4|3|</span><br><span class="line">|1|2020/2/6|4|</span><br><span class="line">|1|2020/2/7|5|</span><br><span class="line">|1|2020/2/8|6|</span><br><span class="line">|2|2020/2/1|1|</span><br><span class="line">|2|2020/2/4|2|</span><br><span class="line">|2|2020/2/5|3|</span><br><span class="line">|2|2020/2/6|4|</span><br><span class="line">|2|2020/2/7|5|</span><br><span class="line">|2|2020/2/8|6|</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">SELECT</span><br><span class="line">	uid,</span><br><span class="line">	tdate,</span><br><span class="line">	date_rank,</span><br><span class="line">	( date_format ( tdate, &quot;% e&quot; )- date_rank ) AS day_cha </span><br><span class="line">FROM</span><br><span class="line">	( SELECT uid, tdate, row_number () over ( PARTITION BY uid ORDER BY tdate ) date_rank FROM `打卡` WHERE is_flag = 1 ) t1</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr class="header">
<th>uid</th>
<th>tdate</th>
<th>date_rank</th>
<th>day_cha</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>2020/2/1</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td>1</td>
<td>2020/2/3</td>
<td>2</td>
<td>1</td>
</tr>
<tr class="odd">
<td>1</td>
<td>2020/2/4</td>
<td>3</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>2020/2/6</td>
<td>4</td>
<td>2</td>
</tr>
<tr class="odd">
<td>1</td>
<td>2020/2/7</td>
<td>5</td>
<td>2</td>
</tr>
<tr class="even">
<td>1</td>
<td>2020/2/8</td>
<td>6</td>
<td>2</td>
</tr>
<tr class="odd">
<td>2</td>
<td>2020/2/1</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td>2</td>
<td>2020/2/4</td>
<td>2</td>
<td>2</td>
</tr>
<tr class="odd">
<td>2</td>
<td>2020/2/5</td>
<td>3</td>
<td>2</td>
</tr>
<tr class="even">
<td>2</td>
<td>2020/2/6</td>
<td>4</td>
<td>2</td>
</tr>
<tr class="odd">
<td>2</td>
<td>2020/2/7</td>
<td>5</td>
<td>2</td>
</tr>
<tr class="even">
<td>2</td>
<td>2020/2/8</td>
<td>6</td>
<td>2</td>
</tr>
</tbody>
</table>
<h2 id="统计连续打卡天数-1">统计连续打卡天数</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	uid,</span><br><span class="line">	day_cha,</span><br><span class="line">	<span class="keyword">count</span>( tdate ) flag_days </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		uid,</span><br><span class="line">		tdate,</span><br><span class="line">		date_rank,</span><br><span class="line">		( <span class="keyword">date_format</span>( tdate, <span class="string">"% e"</span> )- date_rank ) <span class="keyword">AS</span> day_cha </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		( <span class="keyword">SELECT</span> uid, tdate, row_number () <span class="keyword">over</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> uid <span class="keyword">ORDER</span> <span class="keyword">BY</span> tdate ) date_rank <span class="keyword">FROM</span> <span class="string">`打卡`</span> <span class="keyword">WHERE</span> is_flag = <span class="number">1</span> ) t1 </span><br><span class="line">	) t2 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	uid,</span><br><span class="line">	day_cha</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th>uid</th>
<th>day_cha</th>
<th>flag_days</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>2</td>
</tr>
<tr class="odd">
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr class="even">
<td>2</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td>2</td>
<td>2</td>
<td>5</td>
</tr>
</tbody>
</table>
<h2 id="区分概念最近连续打卡天数和最长连续打卡天数">区分概念：最近连续打卡天数和最长连续打卡天数</h2>
<p>   最长连续打卡天数就是取连续打卡天数的最大值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	uid,</span><br><span class="line">	day_cha,</span><br><span class="line">	<span class="keyword">count</span>( tdate ) flag_days </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		uid,</span><br><span class="line">		tdate,</span><br><span class="line">		date_rank,</span><br><span class="line">		( <span class="keyword">date_format</span>( tdate, <span class="string">"% e"</span> )- date_rank ) <span class="keyword">AS</span> day_cha </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		( <span class="keyword">SELECT</span> uid, tdate, row_number () <span class="keyword">over</span> ( <span class="keyword">PARTITION</span> <span class="keyword">BY</span> uid <span class="keyword">ORDER</span> <span class="keyword">BY</span> tdate ) date_rank <span class="keyword">FROM</span> <span class="string">`打卡`</span> <span class="keyword">WHERE</span> is_flag = <span class="number">1</span> ) t1 </span><br><span class="line">	) t2 </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	uid,</span><br><span class="line">	day_cha</span><br></pre></td></tr></table></figure>
<p>   最近连续打卡天数是去连续打卡天数的末尾值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>lambda 函数</title>
    <url>/2020/04/13/lambda-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>  lambda 函数是 python 数据分析中比较常用的一个函数，属于匿名函数，即无需声明函数名称。<br></p>
<a id="more"></a>
<p>   简单示例如下：<br> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> v: len (v)</span><br></pre></td></tr></table></figure></p>
<p>   在 lambda 函数中，冒号前面填写参数，冒号后面填写表达式，表达式的结果就是返回值，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len (v)</span><br></pre></td></tr></table></figure>
<p>   明显，因为返回值只能是一个，所以 lambda 函数只能有一个表达式。</p>
<p>  lambda 函数还可以进一步与 map () 函数和 filter () 函数结合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data [<span class="string">""</span>] = data [<span class="string">""</span>].map (<span class="keyword">lambda</span> x: x**<span class="number">2</span>)</span><br><span class="line">data [<span class="string">""</span>] = data [<span class="string">""</span>].filter (<span class="keyword">lambda</span> x: x%<span class="number">2</span> == <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>Pandas</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>粉笔模考经验总结</title>
    <url>/2020/04/01/%E7%B2%89%E7%AC%94%E6%A8%A1%E8%80%83%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>K-means 聚类算法</title>
    <url>/2020/03/31/K-means-%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="基本原理">1. 基本原理</h1>
<p>  K-Means 聚类算法的目的是：把 n 个点（可以是样本的一次观察或一个实例）划分到 k 个聚类中。工作原理是：</p>
<ul>
<li>从数据集中随机选取 k 个点作为初始的类中心点。</li>
<li>计算每个点与每个类中心点的距离，将每个点分配到最近的类中心点，然后重新计算每个类的中心店。</li>
<li>重复上一步，直至类中心点不再发生变动或手动设置最大迭代次数。</li>
</ul>
<a id="more"></a>
<h1 id="实例球队分类">2. 实例：球队分类</h1>
<p>   实例：亚洲球队分类，目的是将球队分成三个梯度：</p>
<h2 id="python-实现">2.1. Python 实现</h2>
<p>   第一步：导入和查看数据： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv (<span class="string">"D:\ 代码 \ 数据 \sports team.csv"</span>)</span><br><span class="line">data.head ()</span><br></pre></td></tr></table></figure></p>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: center;">
<th>
</th>
<th>
国家
</th>
<th>
2019 年国际排名
</th>
<th>
2018 世界杯
</th>
<th>
2015 亚洲杯
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
中国
</td>
<td>
73
</td>
<td>
40
</td>
<td>
7
</td>
</tr>
<tr>
<th>
1
</th>
<td>
日本
</td>
<td>
60
</td>
<td>
15
</td>
<td>
5
</td>
</tr>
<tr>
<th>
2
</th>
<td>
韩国
</td>
<td>
61
</td>
<td>
19
</td>
<td>
2
</td>
</tr>
<tr>
<th>
3
</th>
<td>
伊朗
</td>
<td>
34
</td>
<td>
18
</td>
<td>
6
</td>
</tr>
<tr>
<th>
4
</th>
<td>
沙特
</td>
<td>
67
</td>
<td>
26
</td>
<td>
10
</td>
</tr>
</tbody>
</table>

<p>   第二步：定义训练数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line">train_data = pd.DataFrame (data [[<span class="string">"2019 年国际排名"</span>, <span class="string">"2018 世界杯"</span>, <span class="string">"2015 亚洲杯"</span>]])</span><br><span class="line">kmeans = KMeans (n_clusters=<span class="number">3</span>)</span><br><span class="line">train_data = preprocessing.MinMaxScaler ().fit_transform (train_data)</span><br></pre></td></tr></table></figure>
<p>   第三步：运行 k-means 聚类 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kmeans.fit (train_data)</span><br><span class="line">predict_result = kmeans.predict (train_data)</span><br><span class="line">result = pd.concat ((data, pd.DataFrame (predict_result)), axis=<span class="number">1</span>)</span><br><span class="line">result.rename (&#123;<span class="number">0</span>:<span class="string">"聚类"</span>&#125;, axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">result.head ()</span><br></pre></td></tr></table></figure></p>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
国家
</th>
<th>
2019 年国际排名
</th>
<th>
2018 世界杯
</th>
<th>
2015 亚洲杯
</th>
<th>
聚类
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
中国
</td>
<td>
73
</td>
<td>
40
</td>
<td>
7
</td>
<td>
1
</td>
</tr>
<tr>
<th>
1
</th>
<td>
日本
</td>
<td>
60
</td>
<td>
15
</td>
<td>
5
</td>
<td>
2
</td>
</tr>
<tr>
<th>
2
</th>
<td>
韩国
</td>
<td>
61
</td>
<td>
19
</td>
<td>
2
</td>
<td>
2
</td>
</tr>
<tr>
<th>
3
</th>
<td>
伊朗
</td>
<td>
34
</td>
<td>
18
</td>
<td>
6
</td>
<td>
2
</td>
</tr>
<tr>
<th>
4
</th>
<td>
沙特
</td>
<td>
67
</td>
<td>
26
</td>
<td>
10
</td>
<td>
2
</td>
</tr>
</tbody>
</table>
</div>
<h2 id="r-实现">2.2. R 实现</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(tidyverse)</span><br><span class="line"></span><br><span class="line">data &lt;- read_csv (<span class="string">"D:/ 代码 / 数据 /sports team.csv"</span>)</span><br><span class="line">result &lt;- kmeans (data [<span class="number">2</span>:<span class="number">4</span>], <span class="number">3</span>)</span><br><span class="line">result$cluster</span><br></pre></td></tr></table></figure>
<h2 id="stata-实现">2.3. stata 实现</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insheet</span> using <span class="string">"D:/ 代码 / 数据 /sports team.csv"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rename</span> 年国际排名 x1</span><br><span class="line"><span class="keyword">rename</span> 世界杯 x2</span><br><span class="line"><span class="keyword">rename</span> 亚洲杯 x3</span><br><span class="line"><span class="keyword">cluster</span> kmeans x1 x2 x3, k (3)</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>欢迎来到我的博客</title>
    <url>/2020/03/31/%E6%AC%A2%E8%BF%8E%E8%AF%AD/</url>
    <content><![CDATA[<p>   欢迎来到我的博客，我会不定期地发布我的原创文章以及转载文章，内容涉及各个方面，但是以探讨宏观经济为主。 <a id="more"></a> ## 更新时间</p>
<h3 id="正常更新时间">1. 正常更新时间</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 每周日晚 10：00</span><br></pre></td></tr></table></figure>
<h3 id="最晚更新时间">2. 最晚更新时间</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 每周日晚 12：00</span><br></pre></td></tr></table></figure>
<h3 id="特殊情况">3. 特殊情况</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 如遇到本人懒癌发作，可直接留言催更。</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>ttrss</title>
    <url>/2019/12/03/ttrss/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>线程和进程</title>
    <url>/2019/09/12/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<p>   线程是任务调度和执行的基本单位，而进程是操作系统资源分配的基本单位。</p>
<a id="more"></a>
<h1 id="二者的区别一个简单类比">1. 二者的区别：一个简单类比</h1>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190912182153.png"></p>
<h1 id="多进程">2. 多进程</h1>
<h2 id="使用-pool-创建多进程">2.1 使用 Pool 创建多进程</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">task_list = [</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/91b702f4f24a'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/8e9e0b1b3a11'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/7ef0f606c10b'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/b117993f5008'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/583d83f1ff81'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/91b702f4f24a'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/8e9e0b1b3a11'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/7ef0f606c10b'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/b117993f5008'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/583d83f1ff81'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span></span><br><span class="line">                      <span class="string">'(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get (url,</span><br><span class="line">                            headers=header,</span><br><span class="line">                            timeout=<span class="number">30</span></span><br><span class="line">                            )</span><br><span class="line">    <span class="keyword">return</span> response.status_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Pool (<span class="number">10</span>)</span><br><span class="line">    time_old = time.time ()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> p.map (download, task_list):</span><br><span class="line">        print (item)</span><br><span class="line">    time_new = time.time ()</span><br><span class="line">    time_cost = time_new - time_old</span><br><span class="line">    print (time_cost)</span><br></pre></td></tr></table></figure>
<h2 id="使用-process-对象创建多进程">2.2 使用 Process 对象创建多进程</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多进程，使用 Process 对象 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line">task_list = [</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/91b702f4f24a'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/8e9e0b1b3a11'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/7ef0f606c10b'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/b117993f5008'</span>,</span><br><span class="line">    <span class="string">'https://www.jianshu.com/p/583d83f1ff81'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span></span><br><span class="line">                      <span class="string">'(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get (url,</span><br><span class="line">                            headers=header,</span><br><span class="line">                            timeout=<span class="number">30</span></span><br><span class="line">                            )</span><br><span class="line">    print (response.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> task_list:</span><br><span class="line">        p = Process (target=download, args=(item,))  <span class="comment"># target = 调用的函数名，args=（函数的参数，)</span></span><br><span class="line">        p.start ()</span><br><span class="line">        p.join ()</span><br></pre></td></tr></table></figure>
<h1 id="多线程">3. 多线程</h1>
<h2 id="调用-thread-类的构造器创建线程">3.1 调用 Thread 类的构造器创建线程</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个普通的 action 函数，该函数准备作为线程执行体 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(max)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (max):</span><br><span class="line">        <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">        <span class="comment"># 线程对象的 getName () 方法获取当前线程的名字 </span></span><br><span class="line">        print (threading.current_thread ().getName () +  <span class="string">""</span> + str (i))</span><br><span class="line"><span class="comment"># 下面是主程序（也就是主线程的执行体）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">100</span>):</span><br><span class="line">    <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">    print (threading.current_thread ().getName () +  <span class="string">" "</span> + str (i))</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">20</span>:</span><br><span class="line">        <span class="comment"># 创建并启动第一个线程 </span></span><br><span class="line">        t1 =threading.Thread (target=action,args=(<span class="number">100</span>,))</span><br><span class="line">        t1.start ()</span><br><span class="line">        <span class="comment"># 创建并启动第二个线程 </span></span><br><span class="line">        t2 =threading.Thread (target=action,args=(<span class="number">100</span>,))</span><br><span class="line">        t2.start ()</span><br><span class="line">print (<span class="string">' 主线程执行完成！'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="继承-thread-类创建线程类">3.2 继承 Thread 类创建线程类</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过继承 threading.Thread 类来创建线程类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FkThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 重写 run () 方法作为线程执行体 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        <span class="keyword">while</span> self.i &lt; <span class="number">100</span>:</span><br><span class="line">            <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">            <span class="comment"># 线程对象的 getName () 方法获取当前线程的名字 </span></span><br><span class="line">            print (threading.current_thread ().getName () +  <span class="string">""</span> + str (self.i))</span><br><span class="line">            self.i += <span class="number">1</span></span><br><span class="line"><span class="comment"># 下面是主程序（也就是主线程的执行体）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">100</span>):</span><br><span class="line">    <span class="comment"># 调用 threading 模块 current_thread () 函数获取当前线程 </span></span><br><span class="line">    print (threading.current_thread ().getName () +  <span class="string">" "</span> + str (i))</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">20</span>:</span><br><span class="line">        <span class="comment"># 创建并启动第一个线程 </span></span><br><span class="line">        ft1 = FkThread ()</span><br><span class="line">        ft1.start ()</span><br><span class="line">        <span class="comment"># 创建并启动第二个线程 </span></span><br><span class="line">        ft2 = FkThread ()</span><br><span class="line">        ft2.start ()</span><br><span class="line">print (<span class="string">' 主线程执行完成！'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="线程池">3.3 线程池</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个准备作为线程任务的函数 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(max)</span>:</span></span><br><span class="line">    my_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (max):</span><br><span class="line">        print (threading.current_thread ().name + <span class="string">'  '</span> + str (i))</span><br><span class="line">        my_sum += i</span><br><span class="line">    <span class="keyword">return</span> my_sum</span><br><span class="line"><span class="comment"># 创建一个包含 2 条线程的线程池 </span></span><br><span class="line">pool = ThreadPoolExecutor (max_workers=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 向线程池提交一个 task, 50 会作为 action () 函数的参数 </span></span><br><span class="line">future1 = pool.submit (action, <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 向线程池再提交一个 task, 100 会作为 action () 函数的参数 </span></span><br><span class="line">future2 = pool.submit (action, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># 判断 future1 代表的任务是否结束 </span></span><br><span class="line">print (future1.done ())</span><br><span class="line">time.sleep (<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 判断 future2 代表的任务是否结束 </span></span><br><span class="line">print (future2.done ())</span><br><span class="line"><span class="comment"># 查看 future1 代表的任务返回的结果 </span></span><br><span class="line">print (future1.result ())</span><br><span class="line"><span class="comment"># 查看 future2 代表的任务返回的结果 </span></span><br><span class="line">print (future2.result ())</span><br><span class="line"><span class="comment"># 关闭线程池 </span></span><br><span class="line">pool.shutdown ()</span><br></pre></td></tr></table></figure>
<h1 id="协程异步爬虫">4. 协程：异步爬虫</h1>
<h2 id="await-方法">4.1 await 方法</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep (n*<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        print (<span class="string">f"数字 < span class="subst">&#123;n&#125;</span> 被取消"</span>)<br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    tasks = [num (i) <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">10</span>)]</span><br><span class="line">    complete, pending = <span class="keyword">await</span> asyncio.wait (tasks, timeout=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> complete:</span><br><span class="line">        print (<span class="string">"当前数字"</span>,i.result ())</span><br><span class="line">    <span class="keyword">if</span> pending:</span><br><span class="line">        print (<span class="string">"取消未完成的任务"</span>)</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> pending:</span><br><span class="line">            p.cancel ()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    loop = asyncio.get_event_loop ()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        loop.run_until_complete (main ())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        loop.close ()</span><br></pre></td></tr></table></figure>
<h2 id="gather-方法">4.2 gather 方法</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep (n * <span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        print (<span class="string">f"数字 < span class="subst">&#123;n&#125;</span> 被取消"</span>)<br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    tasks = [num (i) <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">10</span>)]</span><br><span class="line">    complete = <span class="keyword">await</span> asyncio.gather (*tasks)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> complete:</span><br><span class="line">        print (<span class="string">"当前数字"</span>, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    loop = asyncio.get_event_loop ()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        loop.run_until_complete (main ())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        loop.close ()</span><br></pre></td></tr></table></figure>
<h2 id="create_task-方法">4.3 create_task () 方法</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(t)</span>:</span></span><br><span class="line">    print (<span class="string">'--&gt;'</span>, t)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep (<span class="number">0.5</span>)</span><br><span class="line">    print (<span class="string">'&lt;--'</span>, t)</span><br><span class="line">    <span class="keyword">return</span> t * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># loop = asyncio.get_event_loop ()</span></span><br><span class="line"></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        cor = a (cnt)   <span class="comment"># coroutine</span></span><br><span class="line">        resp = loop.create_task (cor)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep (<span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># print (resp)</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop ()</span><br><span class="line"></span><br><span class="line">loop.run_until_complete (b ())</span><br></pre></td></tr></table></figure>
<hr>
<p><a href="https://zhuanlan.zhihu.com/p/76695507" target="_blank" rel="noopener">如何让你写的爬虫速度像坐火箭一样快</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax：动态加载</title>
    <url>/2019/09/09/ajax%EF%BC%9A%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<p>  Ajax 可以利用 JavaScript 在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页。</p>
<a id="more"></a>
<h1 id="ajax-分析方法">1. Ajax 分析方法</h1>
<p>   在 Chrome 浏览器中，可以按住 f12，打开开发者工具，切换到 Network 选项卡，直接点击 XHR，清空所有内容后重新加载，分析每个请求的参数信息。然后，可以分析每个请求的响应内容。</p>
<h1 id="实例抓取抓取肯德基门面信息">2. 实例：抓取抓取肯德基门面信息</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 抓取肯德基门面信息 </span></span><br><span class="line"><span class="comment"># http://www.kfc.com.cn/kfccda/storelist/index.aspx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">page = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    url = <span class="string">'http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname'</span></span><br><span class="line">    parmas = &#123;</span><br><span class="line">        <span class="string">'cname'</span>: <span class="string">' 郑州 '</span>,</span><br><span class="line">        <span class="string">'pid'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'pageIndex'</span>: page,</span><br><span class="line">        <span class="string">'pageSize'</span>: <span class="string">'10'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post (url, data=parmas)</span><br><span class="line">    print (response.json ())</span><br><span class="line">    <span class="keyword">if</span> response.json ().get (<span class="string">'Table1'</span>, <span class="string">''</span>):</span><br><span class="line">       page += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>scrapy 学习（三）</title>
    <url>/2019/09/08/scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>   在 scrapy 爬虫框架中，本身并没有没有 JS engine, 因此它无法爬取 JavaScript 生成的动态网页，只能爬取静态网页，splash 则弥补了这一点。所谓的 Splash, 就是一个 Javascript 渲染服务。它是一个实现了 HTTP API 的轻量级浏览器，Splash 是用 Python 实现的，同时使用 Twisted 和 QT。Twisted（QT）用来让服务具有异步处理能力，以发挥 webkit 的并发能力。 <a id="more"></a></p>
<h1 id="运行-splash">1. 运行 splash</h1>
<p>   首先需要运行 docker: <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 第一步：先打开 Docker Desktop</span><br><span class="line"># 第二步：在 < span class="built_in">cmd</span> 中运行相应的命令 <br><span class="line">docker login daocloud.io</span><br><span class="line"># 运行 splash</span><br><span class="line">docker run -p <span class="number">5023</span>:<span class="number">5023</span> -p <span class="number">8050</span>:<span class="number">8050</span> -p <span class="number">8051</span>:<span class="number">8051</span> scrapinghub/splash</span><br></pre></td></tr></table></figure></p>
<p>   在网页中直接访问：http://localhost:8050，即可代开 splash 服务的网页。</p>
<h1 id="渲染网页">2. 渲染网页</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'http://localhost:8050/render.html?url = 要请求的网址 & amp;timeout = 超时时间 & amp;wait = 等待时间  </span></span><br><span class="line"><span class="string"> # url: 必填 timeout 和 wait: 选填 '</span></span><br></pre></td></tr></table></figure>
<h1 id="在-scrapy-爬虫框架中使用-splash">3. 在 scrapy 爬虫框架中，使用 splash</h1>
<h2 id="配置-settings.py-文件">3.1 配置 settings.py 文件</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 Splash 服务的地址 </span></span><br><span class="line">SPLASH_URL = <span class="string">'http://192.168.59.103:8050'</span></span><br><span class="line"><span class="comment"># 在 settings 中的 DOWNLOADER_MIDDLEWARES 加上 splash 的中间件，并设置 HttpCompressionMiddleware 对象的优先级 </span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class="number">723</span>,</span><br><span class="line">    <span class="string">'scrapy_splash.SplashMiddleware'</span>: <span class="number">725</span>,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">810</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 在 SPIDER_MIDDLEWARES 中安装 splash 的 SplashDeduplicateArgsMiddleware 中间件 </span></span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 您还可以设置对应的过滤中间件 ——DUPEFILTER_CLASS</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></span><br><span class="line"><span class="comment"># 您可以设置 scrapy.contrib.httpcache.FilesystemCacheStorage 来使用 Splash 的 HTTP 缓存 </span></span><br><span class="line">HTTPCACHE_STORAGE = <span class="string">'scrapy_splash.SplashAwareFSCacheStorage'</span></span><br></pre></td></tr></table></figure>
<h2 id="一个简单的实例">3.2 一个简单的实例</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">lua = <span class="string">'''</span></span><br><span class="line"><span class="string">      function main (splash)</span></span><br><span class="line"><span class="string">          return 'hello'</span></span><br><span class="line"><span class="string">      end</span></span><br><span class="line"><span class="string">      '''</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://localhost:8050/execute?lua_source='</span> + quote (lua)</span><br><span class="line">response = requests.get (url)</span><br><span class="line">print (response.text)</span><br></pre></td></tr></table></figure>
<h1 id="两个实例">4. 两个实例</h1>
<h2 id="实例-1-抓取我不是药神的豆瓣评论">4.1 实例 1: 抓取《我不是药神》的豆瓣评论</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决空行问题：newline=''；解决 csv 文档在 excel 中中文乱码问题：encoding='utf_8_sig'</span></span><br><span class="line">fw = open (<span class="string">'F:\\onedrive\\OneDrive - ruc.edu.cn\\ 技能 \\ 爬虫 \\ 资料 \\3\\ 第二节 \\splash\\cases\\douban_comments.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf_8_sig'</span>)   <span class="comment"># 创建和打开文档 </span></span><br><span class="line">writer = csv.writer (fw)  </span><br><span class="line">writer.writerow ([<span class="string">'comment_time'</span>,<span class="string">'comment_content'</span>])  <span class="comment"># 按行写入 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">    url = <span class="string">'http://localhost:8050/render.html?url=https://movie.douban.com/subject/26752088/comments?start=&#123;&#125;&amp;limit=20&amp;sort=new_score&amp;status=P&amp;timeout=30&amp;wait=0.5'</span>.format (i*<span class="number">20</span>)</span><br><span class="line">    <span class="comment"># url = 'https://movie.douban.com/subject/26752088/comments?start=&#123;&#125;&amp;limit=20&amp;sort=new_score&amp;status=P'.format (i*20)</span></span><br><span class="line">    response = requests.get (url)</span><br><span class="line">    tree = etree.HTML (response.text)</span><br><span class="line">    comments = tree.xpath (<span class="string">'//div [@class="comment"]'</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> comments:</span><br><span class="line">        comment_time = item.xpath (<span class="string">'./h3/span [2]/span [contains (@class,"comment-time")]/@title'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># comment_time = int (time.mktime (time.strptime (comment_time,'% Y-% m-% d % H:% M:% S')))</span></span><br><span class="line">        comment_content = item.xpath (<span class="string">'./p/span/text ()'</span>)[<span class="number">0</span>].strip ()</span><br><span class="line">        print (comment_time)</span><br><span class="line">        print (comment_content)</span><br><span class="line">        writer.writerow ([comment_time,comment_content])</span><br></pre></td></tr></table></figure>
<h2 id="实例-2抓取京东商品信息">4.2 实例 2：抓取京东商品信息</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">lua = <span class="string">'''</span></span><br><span class="line"><span class="string">      function main (splash, args)</span></span><br><span class="line"><span class="string">          local treat = require ("treat")</span></span><br><span class="line"><span class="string">          local response = splash:http_get ("https://search.jd.com/Search?keyword = 相机 & amp;enc=utf-8")</span></span><br><span class="line"><span class="string">              return &#123;</span></span><br><span class="line"><span class="string">                  html = treat.as_string (response.body),</span></span><br><span class="line"><span class="string">                  url = response.url,</span></span><br><span class="line"><span class="string">                  status = response.status</span></span><br><span class="line"><span class="string">              &#125;    </span></span><br><span class="line"><span class="string">      end</span></span><br><span class="line"><span class="string">      '''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线上部署的服务，需要将 localhost 换成服务器的公网地址（不是内网地址）</span></span><br><span class="line">url = <span class="string">'http://localhost:8050/execute?lua_source='</span> + quote (lua)</span><br><span class="line">response = requests.get (url)</span><br><span class="line"></span><br><span class="line">html = json.loads (response.text)[<span class="string">'html'</span>]</span><br><span class="line"></span><br><span class="line">tree = etree.HTML (html)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单品 </span></span><br><span class="line">products_1 = tree.xpath (<span class="string">'//div [@class="gl-i-wrap"]'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> products_1:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        name_1 = item.xpath (<span class="string">'./div [@class="p-name p-name-type-2"]/a/em/text ()'</span>)[<span class="number">0</span>]</span><br><span class="line">        price_1 = item.xpath (<span class="string">'./div [@class="p-price"]/strong/@data-price | ./div [@class="p-price"]/strong/i/text ()'</span>)[<span class="number">0</span>]</span><br><span class="line">        print (name_1)</span><br><span class="line">        print (price_1)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 套装 </span></span><br><span class="line">products_2 = tree.xpath (<span class="string">'//div [@class="tab-content-item tab-cnt-i-selected"]'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> products_2:</span><br><span class="line">    name_2 = item.xpath (<span class="string">'./div [@class="p-name p-name-type-2"]/a/em/text ()'</span>)[<span class="number">0</span>]</span><br><span class="line">    price_2 = item.xpath (<span class="string">'./div [@class="p-price"]/strong/@data-price | ./div [@class="p-price"]/strong/i/text ()'</span>)[<span class="number">0</span>]</span><br><span class="line">    print (name_2)</span><br><span class="line">    print (price_2)</span><br></pre></td></tr></table></figure>
<hr>
<p><a href="https://splash-cn-doc.readthedocs.io/zh_CN/latest/scripting-libs.html#treat" target="_blank" rel="noopener">可使用的 lua 库</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>用 WebScraper 抓取豆瓣电影 Top250</title>
    <url>/2019/09/07/%E7%94%A8WebScraper%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1Top250/</url>
    <content><![CDATA[<p>导入设置： <a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;_id&quot;:&quot;dbmovie_top250&quot;,&quot;startUrl&quot;:[&quot;https://movie.douban.com/top250?start=[0-225:25]&amp;filter=&quot;],&quot;selectors&quot;:[&#123;&quot;id&quot;:&quot;Movie_Info&quot;,&quot;type&quot;:&quot;SelectorElement&quot;,&quot;parentSelectors&quot;:[&quot;_root&quot;],&quot;selector&quot;:&quot;.grid_view li&quot;,&quot;multiple&quot;:true,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 电影排名 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;em&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 电影名 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;span.title:nth-of-type (1)&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 电影导演 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;p:nth-of-type (1)&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;(?&lt;= 导演: )(.*)(?= 主)&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 评价分数 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;span.rating_num&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 评价人数 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;span:nth-of-type (4)&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;^.*?(?= 人)&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 上映日期 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;p:nth-of-type (1)&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;[0-9]+&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 电影出品国家 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;p:nth-of-type (1)&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;(?&lt;=/)(.*)(?=/)&quot;,&quot;delay&quot;:0&#125;,&#123;&quot;id&quot;:&quot; 电影评论 & quot;,&quot;type&quot;:&quot;SelectorText&quot;,&quot;parentSelectors&quot;:[&quot;Movie_Info&quot;],&quot;selector&quot;:&quot;span.inq&quot;,&quot;multiple&quot;:false,&quot;regex&quot;:&quot;&quot;,&quot;delay&quot;:0&#125;]&#125;</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>WebScraper</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>chrome插件</tag>
        <tag>WebScraper</tag>
      </tags>
  </entry>
  <entry>
    <title>encode 和 decode</title>
    <url>/2019/09/06/encode%E5%92%8Cdecode/</url>
    <content><![CDATA[<p>   在 Python 爬虫中，经常涉及编码的问题，尤其是处理中文字符串。 <a id="more"></a></p>
<h1 id="编码和解码encode-和-decode">1. 编码和解码:encode 和 decode</h1>
<p>   一个简单的实例： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [1]: &quot; 爬虫 & quot;.encode (&quot;utf-8&quot;)  </span><br><span class="line">Out [1]: b&apos;\xe7\x88\xac\xe8\x99\xab&apos;</span><br><span class="line">In [2]: b&apos;\xe7\x88\xac\xe8\x99\xab&apos;.decode (&quot;utf-8&quot;)</span><br><span class="line">Out [2]: &apos; 爬虫 & apos;</span><br></pre></td></tr></table></figure></p>
<p>   从上述简单的实例可以看出：encode:str<span class="math inline">\(\to\)</span>bytes,decode:bytes<span class="math inline">\(\to\)</span>str。</p>
<h1 id="应用网络爬虫">2. 应用：网络爬虫</h1>
<h2 id="response-对象的两种属性text-和-content">2.1 response 对象的两种属性：text 和 content</h2>
<p>   在 Python 爬虫中，使用 response = requests.get (url) 获取网站的 response 之后，还可以通过 response.text 和 response.content 两种方法分别获取 response 的不同属性，前者返回的是处理过的 Unicode 型的字符串数据，而后者返回的是 bytes 型的二进制数据。因此，前者多用于读取文本数据，后者多用于图片、文件等数据类型。</p>
<h2 id="延伸针对不同类型的数据选择写入数据方法">2.2 延伸：针对不同类型的数据选择写入数据方法</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般格式 </span></span><br><span class="line"><span class="keyword">with</span> open (<span class="string">' 文件路径 / 文件名。文件格式 '</span>, <span class="string">' 文件打开方式 '</span>, encoding = <span class="string">''</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write ()</span><br><span class="line"><span class="comment"># 写入 </span></span><br><span class="line"><span class="keyword">with</span> open (<span class="string">' 文件路径 / 文件名。文件格式 '</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write (写入内容)</span><br><span class="line"><span class="comment"># 写入二进制数据 </span></span><br><span class="line"><span class="keyword">with</span> open (<span class="string">' 文件路径 / 文件名。文件格式 '</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write (response.content)</span><br></pre></td></tr></table></figure>
<h2 id="案例">2.3 案例</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="comment"># 导入 requests 模块 </span></span><br><span class="line">url=<span class="string">"http://vip.stock.finance.sina.com.cn/corp/go.php/vCI_CorpManager/stockid/000001.phtml"</span></span><br><span class="line">text=requests.get (url).text<span class="comment"># 通过 requests 模块的 get 方式将源代码赋给 text</span></span><br><span class="line">print (text)</span><br><span class="line"><span class="comment"># 结果出现中文乱码 </span></span><br><span class="line">byte=text.decode (encoding=<span class="string">"gb18030"</span>,errors=<span class="string">"strict"</span>)</span><br><span class="line">print (byte)</span><br><span class="line"><span class="comment"># 报错：AttributeError:'str' object has no attribute'decode'</span></span><br><span class="line">content=requests.get (url).content<span class="comment"># 将源代码的编码字节赋给 content</span></span><br><span class="line">byte=content.decode (encoding=<span class="string">"gb18030"</span>,errors=<span class="string">"strict"</span>)</span><br><span class="line">print (byte)</span><br></pre></td></tr></table></figure>
<hr>
<ol type="1">
<li><a href="https://www.jianshu.com/p/78eb306c06ac" target="_blank" rel="noopener">python - with xxx as xxxx 语法了解</a></li>
<li><a href="https://www.jianshu.com/p/8b976fa2ce30" target="_blank" rel="noopener">【python】文件打开方式</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017075323632896" target="_blank" rel="noopener">字符串和编码</a></li>
<li><a href="https://www.zhihu.com/question/31833164/answer/114694586" target="_blank" rel="noopener">Python 编码为什么那么蛋疼？</a></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>scrapy 学习（二）</title>
    <url>/2019/08/29/scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>  scrapy 配合 Selenium 可以方便地进行网页操作，抓取相应的网络数据。 <a id="more"></a></p>
<h1 id="基本操作">1. 基本操作</h1>
<h2 id="导入-webdriver">1.1 导入 webdriver</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver          <span class="comment"># 引入 webdriver</span></span><br><span class="line"></span><br><span class="line">option = webdriver.ChromeOptions ()      <span class="comment"># 设置选项 </span></span><br><span class="line">option.add_argument (<span class="string">'headless'</span>)</span><br><span class="line">driver = webdriver.Chrome (              <span class="comment"># 添加驱动 </span></span><br><span class="line">    <span class="string">' 应用位置 /chromedriver'</span>,</span><br><span class="line">    chrome_options=option</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<h2 id="打开网站">1.2 打开网站</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">driver.get (url)</span><br></pre></td></tr></table></figure>
<h2 id="页面交互-1">1.3 页面交互 <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找元素 </span></span><br><span class="line">element = driver.find_element_by_id (<span class="string">"passwd-id"</span>)</span><br><span class="line">element = driver.find_element_by_name (<span class="string">"passwd"</span>)</span><br><span class="line">element = driver.find_element_by_xpath (<span class="string">"//input [@id='passwd-id']"</span>)</span><br><span class="line"><span class="comment"># 输入文字 </span></span><br><span class="line">element.send_keys (<span class="string">"some text"</span>)</span><br><span class="line"><span class="comment"># 点击按钮 </span></span><br><span class="line">element.click ()</span><br><span class="line"><span class="comment"># 切换页面 </span></span><br><span class="line">window_handles = driver.window_handles</span><br><span class="line">driver.switch_to.window (window_handles [<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>
<h2 id="设置等待时间">1.4 设置等待时间</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置等待时间为 10s </span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = WebDriverWait (driver, <span class="number">10</span>).until ()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit ()</span><br><span class="line"><span class="comment"># 等待 5 秒：全局设置 </span></span><br><span class="line">driver.implicitly_wait (<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<h1 id="selenium-的高级操作">2. Selenium 的高级操作</h1>
<h2 id="webdriver-api">2.1 WebDriver API</h2>
<p>   常用的 API 如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">webdriver.Firefox                      <span class="comment"># 启动 Firefox 浏览器 </span></span><br><span class="line">webdriver.FirefoxProfile         </span><br><span class="line">webdriver.Chrome                       <span class="comment"># 启动 Firefox 浏览器 </span></span><br><span class="line">webdriver.ChromeOptions                </span><br><span class="line">webdriver.Ie                           <span class="comment"># 启动 ie 浏览器 </span></span><br><span class="line">webdriver.Opera                        <span class="comment"># 启动 Opera 浏览器 </span></span><br><span class="line">webdriver.PhantomJS                    <span class="comment"># 启动 PhantomJS 浏览器 </span></span><br></pre></td></tr></table></figure></p>
<p>   使用 FirefoxProfile 的优点是保存有 cookie 等信息，可以保持用户的登录状态，其设置如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用本机内已经存在的 profile</span></span><br><span class="line">firefox_profile = webdriver.FirefoxProfile ()</span><br><span class="line">browser = webdriver.Firefox (firefox_profile)</span><br><span class="line"><span class="comment"># 启用从其他地方拷贝的 profile</span></span><br><span class="line">firefox_profile = webdriver.FirefoxProfile (<span class="string">"firefoxprofile 存储路径"</span>)</span><br><span class="line">browser = webdriver.Firefox (firefox_profile)</span><br></pre></td></tr></table></figure></p>
<h2 id="滚动加载">2.2 滚动加载</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (拉动次数):</span><br><span class="line">    driver.execute_script (<span class="string">"window.scrollTo (0, document.body.scrollHeight);"</span>)    <span class="comment"># 滚动到页面底部 </span></span><br></pre></td></tr></table></figure>
<h2 id="获取网页的内容">2.4 获取网页的内容</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = driver.page_source   <span class="comment"># 获取网页源码 </span></span><br></pre></td></tr></table></figure>
<h1 id="案例爬取百度搜索结果">3. 案例：爬取百度搜索结果</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line">option = webdriver.ChromeOptions ()</span><br><span class="line">option.add_argument (<span class="string">'headless'</span>)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome (</span><br><span class="line">        executable_path = <span class="string">'D:/ChromeDriver/chromedriver'</span>,</span><br><span class="line">        chrome_options = option</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">driver.get (url)</span><br><span class="line"></span><br><span class="line">print (driver.title)</span><br><span class="line"></span><br><span class="line">timeout = <span class="number">5</span></span><br><span class="line"><span class="comment"># 在搜索框中输入文字 </span></span><br><span class="line">search_content = WebDriverWait (driver, timeout).until (</span><br><span class="line">    <span class="keyword">lambda</span> d:d.find_element_by_xpath (<span class="string">'//input [@id="kw"]'</span>))</span><br><span class="line">search_content.send_keys (<span class="string">' 全职高手 '</span>)</span><br><span class="line"><span class="comment"># 模拟点击 "百度一下"</span></span><br><span class="line">search_button = WebDriverWait (driver, timeout).until (</span><br><span class="line">    <span class="keyword">lambda</span> d:d.find_element_by_xpath (<span class="string">'//input [@id="su"]'</span>))</span><br><span class="line">search_button.click ()</span><br><span class="line"><span class="comment"># 打印搜索结果 </span></span><br><span class="line">search_results = WebDriverWait (driver, timeout).until (</span><br><span class="line">    <span class="keyword">lambda</span> d:d.find_elements_by_xpath (<span class="string">'//h3 [contains (@class,"t")]'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> search_results:</span><br><span class="line">    print (item.text)</span><br><span class="line"></span><br><span class="line">driver.close ()</span><br></pre></td></tr></table></figure>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://selenium-python-zh.readthedocs.io/en/latest/locating-elements.html" target="_blank" rel="noopener">查找元素的常用方法</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>scrapy 学习（一）</title>
    <url>/2019/08/28/scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>  scrapy 是一个网页爬虫框架，主要作用是爬取网页信息。 <a id="more"></a></p>
<h1 id="安装和基本架构">1. 安装和基本架构</h1>
<h2 id="安装">1.1 安装</h2>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install Scrapy</span><br></pre></td></tr></table></figure>
<h2 id="基本架构">1.2 基本架构</h2>
<p>  scrapy 的各个组件分别是：调度器、下载器、爬虫、管道、下载中间件和爬虫中间架，数据处理的基本流程是：引擎询问蜘蛛需要处理哪个网站，并让蜘蛛将第一个需要处理的 URL 交给它，之后引擎让调度器将需要处理的 URL 放在队列中，然后引擎从调度那获取接下来进行爬取的页面。调度将下一个爬取的 URL 返回给引擎，引擎将它通过下载中间件发送到下载器。当网页被下载器下载完成以后，响应内容通过下载中间件被发送到引擎；如果下载失败了，引擎会通知调度器记录这个 URL，待会再重新下载。引擎收到下载器的响应并将它通过蜘蛛中间件发送到蜘蛛进行处理。蜘蛛处理响应并返回爬取到的数据条目，此外还要将需要跟进的新的 URL 发送给引擎。引擎将抓取到的数据条目送入条目管道，把新的 URL 发送给调度器放入队列中。</p>
<h1 id="基本使用方法">2. 基本使用方法</h1>
<h2 id="创建项目">2.1 创建项目</h2>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">scrapy startproject 项目名 </span><br></pre></td></tr></table></figure>
<p>   创建项目成功后，项目的目录结构如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbmovie</span><br><span class="line">    scrapy.cfg                  # 部署配置文件 </span><br><span class="line">    dbmovie                     # Python 模块，代码写在这个目录下 </span><br><span class="line">        __init__.py             </span><br><span class="line">        items.py                # 项目项定义文件 </span><br><span class="line">        middlewares.py</span><br><span class="line">        pipelines.py            # 项目管道文件 </span><br><span class="line">        settings.py             # 项目设置文件 </span><br><span class="line">        __pycache__</span><br><span class="line">        spiders                 # 爬虫目录 </span><br><span class="line">             __pycache__</span><br><span class="line">             __init__.py</span><br></pre></td></tr></table></figure></p>
<h2 id="创建爬虫文件">2.2 创建爬虫文件</h2>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">scrapy genspider 爬虫名 爬虫网址 </span><br></pre></td></tr></table></figure>
<p>   也可以直接在爬虫目录：spiders 下直接创建 python 文档， <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ExampleSpider (scrapy.Spider):</span><br><span class="line">    name = &apos;example&apos;</span><br><span class="line">    allowed_domains = [&apos;baidu.com&apos;]</span><br><span class="line">    start_urls = [&apos;http://baidu.com/&apos;]</span><br><span class="line"></span><br><span class="line">    def parse (self, response):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure></p>
<h2 id="运行爬虫">2.3 运行爬虫</h2>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">scrapy crawl &lt;spider&gt;</span><br></pre></td></tr></table></figure>
<h2 id="网页解析器selector">2.4 网页解析器：Selector</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">'http://example.com/'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'images'</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image1.html'</span>&gt;</span>Name: My image 1 <span class="tag">&lt;<span class="name">br</span> /&gt;</span>![](image1_thumb.jpg)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image2.html'</span>&gt;</span>Name: My image 2 <span class="tag">&lt;<span class="name">br</span> /&gt;</span>![](image2_thumb.jpg)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image3.html'</span>&gt;</span>Name: My image 3 <span class="tag">&lt;<span class="name">br</span> /&gt;</span>![](image3_thumb.jpg)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image4.html'</span>&gt;</span>Name: My image 4 <span class="tag">&lt;<span class="name">br</span> /&gt;</span>![](image4_thumb.jpg)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'image5.html'</span>&gt;</span>Name: My image 5 <span class="tag">&lt;<span class="name">br</span> /&gt;</span>![](image5_thumb.jpg)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response.xpath (<span class="string">'//title/text ()'</span>).extract ()       // 要实际提取文本数据，必须调用选择器.extract () 方法 </span><br><span class="line">response.xpath (<span class="string">'//div [@id="images"]/a/text ()'</span>).extract_first ()   // 如果只想提取第一个匹配的元素，可以调用选择器 </span><br><span class="line">response.xpath (<span class="string">'//a [contains (@href, "image")]/text ()'</span>).re (<span class="string">r'Name:\s*(.*)'</span>) //xpath + 正则 </span><br><span class="line">response.xpath (<span class="string">'//a [contains (@href, "image")]/text ()'</span>).re_first (<span class="string">r'Name:\s*(.*)'</span>)  // 只提取第一个匹配的字符串 </span><br></pre></td></tr></table></figure>
<h1 id="shell-在命令行中测试爬虫">3. Shell: 在命令行中测试爬虫</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">scrapy shell </span><br><span class="line"><span class="keyword">In</span> [<span class="number">1</span>]: fetch ("网页地址")</span><br><span class="line"><span class="number">2019</span>-<span class="number">08</span>-<span class="number">28</span> <span class="number">23</span>:<span class="number">22</span>:<span class="number">43</span> [scrapy.core.engine] INFO: Spider opened</span><br><span class="line"><span class="number">2019</span>-<span class="number">08</span>-<span class="number">28</span> <span class="number">23</span>:<span class="number">22</span>:<span class="number">43</span> [scrapy.core.engine] DEBUG: Crawled (<span class="number">200</span>) </span><br><span class="line">&lt;GET https://www.cnblogs.com/cate/mysql/&gt; (referer: None)           # 成功抓取会输出上述信息 </span><br><span class="line"><span class="keyword">In</span> [<span class="number">2</span>]: <span class="built_in">print</span>(response.text)                                        # 输出网页信息 </span><br><span class="line"><span class="keyword">In</span> [<span class="number">3</span>]: post_item_body = response.xpath ("//div [@id='wrapper']/div [@id='main']/div [@id='post_list']/div [@class='post_item']/div [@class='post_item_body']")</span><br><span class="line"><span class="keyword">In</span> [<span class="number">4</span>]: article_title = first_article.xpath ("h3/a/text ()").extract_first ().strip ()</span><br><span class="line"><span class="keyword">In</span> [<span class="number">5</span>]: article_summary = first_article.xpath ("p [@class='post_item_summary']/text ()").extract_first ().strip ()</span><br></pre></td></tr></table></figure>
<h1 id="实例爬取豆瓣-top250">4. 实例：爬取豆瓣 top250</h1>
<h2 id="分析爬取目标">4.1 分析爬取目标</h2>
<p>   通过简单的观察网页，可以初步确定爬取的目标。本次想要爬取的是：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">豆瓣电影 Top250</a>，具体的爬取目标是：每一部电影的排名、电影名称、评分和评分的人数。    在 Scrapy 爬虫框架中，Items 用于保存结构数据。在 Scrapy 中，解析到的数据以字典形式返回，但 python 中字典形式的数据缺少结构，Item 则提供了类字典的 API，并且可以很方便的声明字段： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbmovieItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field ()</span></span><br><span class="line">    排名 = scrapy.Field ()     <span class="comment"># 排名 </span></span><br><span class="line">    电影名 = scrapy.Field ()   <span class="comment"># 电影名称 </span></span><br><span class="line">    评分 = scrapy.Field ()     <span class="comment"># 评分 </span></span><br><span class="line">    评论人数 = scrapy.Field ()</span><br></pre></td></tr></table></figure></p>
<h2 id="编写爬虫代码">4.2 编写爬虫代码</h2>
<p>   首先是创建一个初步的爬虫文档，创建方法是： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &quot;D:\ 代码 \ 爬虫 \day17\spider\spider\spiders&quot;</span><br><span class="line">scrapy genspider dbmovie https://movie.douban.com/top250</span><br></pre></td></tr></table></figure></p>
<p>   创建完成后，在 spiders 目录下会有一个新的 python 文档 - dbmovie.py，具体内容如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DbmovieSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'dbmovie'</span></span><br><span class="line">    allowed_domains = [<span class="string">'https://movie.douban.com/top250'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://https://movie.douban.com/top250/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<p>   写入初步的代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Spider</span><br><span class="line"><span class="keyword">from</span> 项目名.items <span class="keyword">import</span> dbmovieItem    <span class="comment"># 先前在 items.py 中定义好的类 </span></span><br></pre></td></tr></table></figure></p>
<p>   加入请求头： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubanMovieTop250Spider</span><span class="params">(Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'douban_movie_top250'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = <span class="string">'https://movie.douban.com/top250'</span></span><br><span class="line">        <span class="keyword">yield</span> Request (url, headers=self.headers)</span><br></pre></td></tr></table></figure></p>
<p>   编写解析规则： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = dbmovieItem ()    </span><br><span class="line">        movies = response.xpath (<span class="string">'//ol [@class="grid_view"]/li'</span>)</span><br><span class="line">        <span class="keyword">for</span> movie <span class="keyword">in</span> movies:</span><br><span class="line">            item [<span class="string">' 排名 '</span>] = movie.xpath (<span class="string">'//div [@class="pic"]/em/text ()'</span>).extract ()[<span class="number">0</span>]</span><br><span class="line">            item [<span class="string">' 电影名 '</span>] = movie.xpath (<span class="string">'//div [@class="hd"]/a/span [1]/text ()'</span>).extract ()[<span class="number">0</span>]</span><br><span class="line">            item [<span class="string">' 评分 '</span>] = movie.xpath (<span class="string">'//div [@class="star"]/span [@class="rating_num"]/text ()'</span>).extract ()[<span class="number">0</span>]</span><br><span class="line">            item [<span class="string">' 评论人数 '</span>] = movie.xpath (<span class="string">'div [@class="info"]/div [@class="bd"]/div [@class="star"]/span [4]/text ()'</span>).extract ()[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure></p>
<p>   爬取下一页： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">next_url = response.xpath (<span class="string">'//span [@class="next"]/a/@href'</span>).extract ()</span><br><span class="line"><span class="keyword">if</span> next_url:</span><br><span class="line">     next_url = <span class="string">'https://movie.douban.com/top250'</span> + next_url [<span class="number">0</span>]</span><br><span class="line">     <span class="keyword">yield</span> Request (next_url, headers=self.headers)</span><br></pre></td></tr></table></figure></p>
<h2 id="数据持久化">4.3 数据持久化</h2>
<p>   在 Scrapy 中，可以直接通过命令行运行爬虫并存储数据： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">scrapy crawl dbmovie -o douban.csv</span><br><span class="line">scrapy crawl dbmovie -o douban.xml</span><br><span class="line">scrapy crawl douban -o data.json</span><br></pre></td></tr></table></figure></p>
<p>   进一步，也可以将数据存储到 MongoDB 中，为此必须首先修改 pipelines.py: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬取到的数据写入到 Mongodb 数据库 </span></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Item</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDBPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开数据库 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        db_uri = spider.settings.get (<span class="string">'MONGODB_URI'</span>, <span class="string">'mongodb://localhost:27017'</span>)</span><br><span class="line">        db_name = spider.settings.get (<span class="string">'MONOGDB_DB_NAME'</span>, <span class="string">'scrapy_db'</span>)</span><br><span class="line"></span><br><span class="line">        self.db_client = MongoClient (db_uri)</span><br><span class="line">        self.db = self.db_client [db_name]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭数据库 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.db_client.close ()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对数据进行处理 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.insert_db (item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 插入数据 </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_db</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance (item, Item):</span><br><span class="line">            item = dict (item)</span><br><span class="line">        self.db.books.insert (item)</span><br></pre></td></tr></table></figure></p>
<p>   然后修改 settings.py 文档： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mongodb 配置 </span></span><br><span class="line">MONGODB_URI = <span class="string">'mongodb://127.0.0.1:27017'</span></span><br><span class="line">MONGODB_DB_NAME = <span class="string">'scrapy_db'</span></span><br></pre></td></tr></table></figure></p>
<p>   同时在 settings.py 文档中开启管道文件： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">'toscrape_book.pipelines.MongoDBPipeline'</span>: <span class="number">403</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>央行改革完善 LPR 形成机制</title>
    <url>/2019/08/27/%E5%A4%AE%E8%A1%8C%E6%94%B9%E9%9D%A9%E5%AE%8C%E5%96%84LPR%E5%BD%A2%E6%88%90%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>  8 月 17 日，央行发布公告：为深化利率市场化改革，提高利率传导效率，推动降低实体经济融资成本，中国人民银行决定改革完善贷款市场报价利率（LPR）形成机制，主要的变化如下：（1）报价方式由原先的 “参照贷款基准利率决定” 改为按 MLF 加点形成，同时强化监管配套，将 LPR 应用情况纳入 MPA 考核。（2）报价频率由每日报价转为每月 20 日报价。（3）报价期限在 1 年期以外增加 5 年期报价。（4）报价银行更加多元化，更具代表性。</p>
<a id="more"></a>
<h1 id="什么是-lpr">1. 什么是 LPR</h1>
<p>   在 2019 年 5 月央行发布的第一季度货币政策执行报告中明确提出深化利率市场化改革的重点是推动贷款利率 “两轨合一轨”，要进一步培育市场化贷款定价机制。所谓 “利率两轨” 指的是存贷款基准和市场化无风险利率并存。一方面，存贷款基准利率仍是我国存贷款市场利率定价的锚。虽然目前存贷款利率浮动的上下限已经放开，但央行仍继续公布存贷款基准利率，作为金融机构利率定价的参考。其中，贷款基准利率一直作为金融机构内部测算贷款利率时的参考基准和对外报价、签订合同时的计价标尺。另一方面，我国市场化无风险利率发展良好。目前市场上的质押式回购利率、国债收益率和公开市场操作利率等指标性利率，对金融机构利率定价的参考作用日益增强。</p>
<figure>
<img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190830100220.png" alt="两轨并一轨"><figcaption>两轨并一轨</figcaption>
</figure>
<p>   此次央行发布的公告将 LPR 的报价方式由原先的 “参照贷款基准利率决定” 改为按 MLF 加点形成，但 MLF 仍然是政策利率，不是市场利率。但是 LPR 报价方式的改变实际上绕开了 “政策利率 - 货币市场利率 - 银行负债利率 - 银行贷款利率” 的传导链条，而直接将 “政策利率 - 银行贷款利率” 进行首尾相连，实际上在短期内赋予了央行以更强的调控能力。</p>
<figure>
<img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190830114112.png" alt="利率的传导机制"><figcaption>利率的传导机制</figcaption>
</figure>
<p>   从长期来看，LPR 挂钩 MLF 仍存弊端，主要表现为：（1）MLF 作为一个政策利率，实际上并不反映市场的供求情况。（2）挂钩 MLF，绕开了商业银行从负债成本到资产定价的过程，不利于培养商业银行银行的内部资金定价。[^1]</p>
<h1 id="lpr-形成机制的改善是否意味着降息">2. LPR 形成机制的改善是否意味着降息？</h1>
<p>  LPR 形成机制的改善意味着利率传导效率的提高，推动着实体经济融资成本的降低，但是否意味着降息值得商榷。</p>
<p>   部分研究报告认为 LPR 形成机制的改善意味着 “降息” 信号的出现，<a href="https://mp.weixin.qq.com/s?__biz=MjM5MjMxODAzMQ==&amp;mid=2652684734&amp;idx=1&amp;sn=010b999c621d5bdce9e0b2742591a6a4&amp;chksm=bd40769e8a37ff8857c31927c18e85f24ff6eb60b808b03d786218b663848b80dabb78a69824#rd" target="_blank" rel="noopener">恒大宏观研究团队</a> 认为：经济下行压力加大、全球降息潮、730 政治局会议宣告货币政策重回宽松，且汇率破 “7”、核心 CPI 保持稳定、PPI 负增长通缩，表明货币宽松的空间已经打开，时机已经到来。而此次央行改革完善 LPR 形成机制，可视为市场化、改革式 “降息”，未来我国降息将从过去降低官定基准利率，到通过公开市场操作利率引导实际利率下行，逐步接近美国利率渠道传导模式，传导效率将提高。</p>
<p>   也有一部分研究报告认为 LPR 形成机制的改善并不意味着 “降息” 信号的出现，<a href="http://mp.weixin.qq.com/s?__biz=MzI1NzMzOTk2MQ==&amp;mid=2247486585&amp;idx=1&amp;sn=1d077a41bb285136f4964c3289dc3632&amp;chksm=ea19ab2fdd6e223958e3c7315e5c6fa4560a85f85dbe2ac8be845ff3a36038d1e62606dbc362#rd" target="_blank" rel="noopener">海通宏观团队</a> 认为：全面降息受益者是房地产和金融行业；真正想要降低实体经济的融资成本，必须控制住举债的规模。2017 和 2018 年去杠杆之后的社会融资成本重新下降证明，重新培育经济内生增长动力，应该是减税而非刺激。</p>
<h2 id="利率并轨lpr-会比-ftp-更好吗">[^1]: <a href="http://mp.weixin.qq.com/s?__biz=MzA3NzQzNzQ0MA==&amp;mid=2650168602&amp;idx=1&amp;sn=26a947c252bfca88a4c3ca30ec277923&amp;scene=0#wechat_redirect" target="_blank" rel="noopener">利率并轨，LPR 会比 FTP 更好吗？</a></h2>
<ol type="1">
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI1NzMzOTk2MQ==&amp;mid=2247486585&amp;idx=1&amp;sn=1d077a41bb285136f4964c3289dc3632&amp;chksm=ea19ab2fdd6e223958e3c7315e5c6fa4560a85f85dbe2ac8be845ff3a36038d1e62606dbc362#rd" target="_blank" rel="noopener">读研报 | LPR 新机制，探出了市场对降息的巨大分歧</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDA1MjY2MQ==&amp;mid=2650148031&amp;idx=1&amp;sn=e2cf33f148970e3de53977212431a243&amp;chksm=be4814e5893f9df32b580ac7b6772a81f733e8157f5d78fc2fc0dc5ed5010aecda3f12c197b7#rd" target="_blank" rel="noopener">从基准利率到 LPR—— 利率并轨的现状与展望</a></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>央行</category>
      </categories>
      <tags>
        <tag>宏观</tag>
        <tag>央行</tag>
        <tag>LPR</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 基本用法</title>
    <url>/2019/08/16/MySQL%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>  MySQL 是关系型数据库，用法相对较为复杂，首要的是设计数据库，即通过 E-R 模型设计实体和关系，包括表表关系，如 1 对 1、1 对多和多对多。 <a id="more"></a>    除此之外，MySQL 数据库还遵循三范式：列不可拆分、标志唯一和引用主键。</p>
<h1 id="数据库的完整性">1. 数据库的完整性</h1>
<p>  MySQL 支持多种类型，大致可以分为三类：数值、日期 / 时间和字符串 (字符) 类型。</p>
<p>   数值类型主要包括 INT 和 DEC，前者即为整数型，后者则更为强调精度。<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<p>   字符串类型主要包括 char - 定长字符串、varchar - 变长字符串和 text - 长文本数据。</p>
<p>   日期和时间类型主要包括 datetime - 日期，除此之外还有布尔类型的数据 - bit。</p>
<p>   完整性约束包括主键、非空、唯一、默认和外键，设置主键的常用语法如下：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">CREATE TABLE stu (</span><br><span class="line">        sid        CHAR (<span class="number">6</span>) PRIMARY KEY,       // 定义列时指定主键：sid</span><br><span class="line">        sname    VARCHAR (<span class="number">20</span>),</span><br><span class="line">        age        INT,</span><br><span class="line">        gender    VARCHAR (<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE stu (</span><br><span class="line">        sid        CHAR (<span class="number">6</span>),</span><br><span class="line">        sname    VARCHAR (<span class="number">20</span>),</span><br><span class="line">        age        INT,</span><br><span class="line">        gender    VARCHAR (<span class="number">10</span>),</span><br><span class="line">        PRIMARY KEY (sid)                      // 定义列之后独立指定主键：sid</span><br><span class="line">);</span><br><span class="line">ALTER TABLE stu</span><br><span class="line">ADD PRIMARY KEY (sid);                         // 修改表时指定主键：sid</span><br><span class="line">ALTER TABLE stu DROP PRIMARY KEY;             // 删除主键，但不会删除列 </span><br></pre></td></tr></table></figure>
<p>   设置主键自增长 - AUTO_INCREMENT： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">CREATE TABLE stu (</span><br><span class="line">        sid INT PRIMARY KEY AUTO_INCREMENT,   // 创建表时设置主键自增长（主键必须是整型才可以自增长）</span><br><span class="line">        sname    VARCHAR (<span class="number">20</span>),</span><br><span class="line">        age        INT,</span><br><span class="line">        gender    VARCHAR (<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line">ALTER TABLE stu CHANGE sid sid INT AUTO_INCREMENT; // 修改表时设置主键自增长 </span><br><span class="line">ALTER TABLE stu CHANGE sid sid INT;           // 修改表时删除主键自增长 </span><br></pre></td></tr></table></figure></p>
<p>   设置非空约束： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">CREATE TABLE stu (</span><br><span class="line">        sid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">        sname VARCHAR (<span class="number">10</span>) <span class="keyword">NOT</span> NULL,              // 指定非空约束，指定后在插入记录时必须给该字段指定值 </span><br><span class="line">        age        INT,</span><br><span class="line">        gender    VARCHAR (<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>   设置唯一约束： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tab_ab (</span><br><span class="line">    sid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    sname VARCHAR (<span class="number">10</span>) UNIQUE                           // 当两次插入相同的名字时，MySQL 会报错！</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>   设置默认值约束： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">create table st</span><br><span class="line">(</span><br><span class="line">sid INT <span class="keyword">not</span> null primary key auto_increment,</span><br><span class="line">sname varchar (<span class="number">10</span>),</span><br><span class="line">subject varchar (<span class="number">20</span>) default ' 软件工程 ',          // 在表中插入一条新的记录时，如果没有为该字段赋值，那么数据库系统会自动为该字段赋一条默认值。</span><br><span class="line">entertime TIMESTAMP default now ()</span><br><span class="line">);</span><br><span class="line">alter table st modify column subject VARCHAR (<span class="number">20</span>) default ' 计算机科学与技术 ';   // 给表中一列添加默认值约束 </span><br><span class="line">alter table st modify column subject VARCHAR (<span class="number">20</span>) default NULL;               // 删除表中一列的默认值约束 </span><br></pre></td></tr></table></figure></p>
<p>   设置外键约束 - 外键必须是另一表的主键的值 (外键要引用主键！)： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_user (</span><br><span class="line">    uid    INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    uname    VARCHAR (<span class="number">20</span>) UNIQUE <span class="keyword">NOT</span> NULL</span><br><span class="line">);</span><br><span class="line">CREATE TABLE t_section (</span><br><span class="line">        sid    INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">        sname    VARCHAR (<span class="number">30</span>),</span><br><span class="line">        u_id    INT,</span><br><span class="line">        CONSTRAINT fk_t_user FOREIGN KEY (u_id) REFERENCES t_user (uid)   // 指定 u_id 为相对 t_user 表的 uid 列的外键：</span><br><span class="line">);</span><br><span class="line">ALTER TABLE t_section</span><br><span class="line">ADD CONSTRAINT fk_t_user</span><br><span class="line">FOREIGN KEY (u_id)</span><br><span class="line">REFERENCES t_user (uid               // 修改 t_section 表，指定 u_id 为相对 t_user 表的 uid 列的外键 </span><br><span class="line">ALTER TABLE t_section</span><br><span class="line">DROP FOREIGN KEY fk_t_user;         // 修改 t_section 表，删除 u_id 的外键约束 </span><br></pre></td></tr></table></figure></p>
<h1 id="启动数据库">2. 启动数据库</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mysql8.<span class="number">0</span>    // 启动 mysql 服务 </span><br><span class="line"><span class="built_in">net</span> stop mysql8.<span class="number">0</span>     // 停止 mysql 服务 </span><br><span class="line">mysql -u root -p      // 登录 mysql 客户端 </span><br><span class="line">select  version ();    // 查看 mysql 版本 </span><br><span class="line">select now ();         // 查看当前时间 </span><br></pre></td></tr></table></figure>
<h1 id="操作数据库">3. 操作数据库</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">create database dbname charset=utf8;  // 创建数据库 </span><br><span class="line">show databases;                       // 查看所有数据库 </span><br><span class="line">drop database dbname;                 // 删除数据库 </span><br><span class="line">use dbname                           // 切换数据库 </span><br><span class="line">select database ();                    // 查看当前数据库 </span><br></pre></td></tr></table></figure>
<h1 id="操作数据表">4. 操作数据表</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">show tables                                     // 查看所有的数据表 </span><br><span class="line">CREATE TABLE <span class="keyword">IF</span> <span class="keyword">NOT</span> EXISTS `runoob_tbl`(         // 创建数据表：字段 类型 是否为空  是否是主键 默认值 </span><br><span class="line">   `runoob_id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `runoob_title` VARCHAR (<span class="number">100</span>) <span class="keyword">NOT</span> NULL,</span><br><span class="line">   `runoob_author` VARCHAR (<span class="number">40</span>) <span class="keyword">NOT</span> NULL,</span><br><span class="line">   `submission_date` <span class="built_in">DATE</span>,</span><br><span class="line">   PRIMARY KEY ( `runoob_id` )</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">alter table tablename add 字段 类型 是否为空  是否是主键 默认值      // 增加字段 </span><br><span class="line">alter table tablename drop 字段 类型 是否为空  是否是主键 默认值     // 删除字段 </span><br><span class="line">alter table tablename change 字段 类型 是否为空  是否是主键 默认值   // 修改字段 </span><br><span class="line">drop table tablename     // 删除表 </span><br><span class="line">desc tablename           // 查看表结构 </span><br><span class="line"><span class="built_in">rename</span> table  oldname to newname   // 更新表名 </span><br><span class="line">show create table tablename        // 查看表的创建语句 </span><br></pre></td></tr></table></figure>
<h1 id="操作数据">5. 操作数据</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );               // 插入数据 </span><br><span class="line">INSERT INTO table_name (field1, field2,...fieldN)  </span><br><span class="line">                       VALUES  </span><br><span class="line">                       (valueA1,valueA2,...valueAN),</span><br><span class="line">                       (valueB1,valueB2,...valueBN),</span><br><span class="line">                       (valueC1,valueC2,...valueCN)......;        // 插入多条数据 </span><br><span class="line">DELETE FROM table_name [WHERE Clause];                             // 删除数据 - 物理删除 </span><br><span class="line">deleted tinyint <span class="keyword">not</span> null default <span class="number">1</span> comment "逻辑删除 <span class="number">0</span> 正常数据 <span class="number">1</span> 删除数据";    // 逻辑删除 </span><br><span class="line">UPDATE table_name <span class="built_in">SET</span> field1=new-value1, field2=new-value2 [WHERE Clause];  // 修改数据 </span><br><span class="line">select * from table_name;     // 查询所有数据 </span><br><span class="line">select * from table_name where 查询条件；// 查询符合条件的数据 </span><br></pre></td></tr></table></figure>
<p>  where 子句的常用操作符如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">操作符</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">=</td>
<td style="text-align: left;">等号，检测两个值是否相等，如果相等返回 true</td>
</tr>
<tr class="even">
<td style="text-align: left;">&lt;&gt;, !=</td>
<td style="text-align: left;">不等于，检测两个值是否相等，如果不相等返回 true</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&gt;</td>
<td style="text-align: left;">大于号，检测左边的值是否大于右边的值，如果左边的值大于右边的值返回 true</td>
</tr>
<tr class="even">
<td style="text-align: left;">&lt;</td>
<td style="text-align: left;">小于号，检测左边的值是否小于右边的值，如果左边的值小于右边的值返回 true</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&gt;=</td>
<td style="text-align: left;">大于等于号，检测左边的值是否大于或等于右边的值，如果左边的值大于或等于右边的值返回 true</td>
</tr>
<tr class="even">
<td style="text-align: left;">&lt;=</td>
<td style="text-align: left;">小于等于号，检测左边的值是否小于于或等于右边的值，如果左边的值小于或等于右边的值返回 true</td>
</tr>
<tr class="odd">
<td style="text-align: left;">NOT 或！</td>
<td style="text-align: left;">逻辑非</td>
</tr>
<tr class="even">
<td style="text-align: left;">AND</td>
<td style="text-align: left;">逻辑与</td>
</tr>
<tr class="odd">
<td style="text-align: left;">OR</td>
<td style="text-align: left;">逻辑或</td>
</tr>
</tbody>
</table>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">select * from table_name where 字段  like "模糊值"；        // 模糊查询：%- 任意多个字符；_- 表示任意一个字符 </span><br><span class="line">select * from table_name where 字段 <span class="keyword">in</span> (,);                // 范围查询 - 非连续 </span><br><span class="line">select * from table_name where 字段 <span class="keyword">not</span> <span class="keyword">in</span> (,);</span><br><span class="line">select * from table_name where 字段 between 下界 and 上界；// 范围查询 - 连续 </span><br><span class="line">select * from table_name where 字段 is null               // 判断空 </span><br><span class="line">select * from table_name where 字段 is <span class="keyword">not</span> null           // 判断非空 </span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th>优先级</th>
<th>运算符</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>最高</td>
<td>！</td>
</tr>
<tr class="even">
<td></td>
<td>-（负号）,~（按位取反）</td>
</tr>
<tr class="odd">
<td></td>
<td>^（按位异或）</td>
</tr>
<tr class="even">
<td></td>
<td>*,/(DIV),%(MOD)</td>
</tr>
<tr class="odd">
<td></td>
<td>+,-</td>
</tr>
<tr class="even">
<td></td>
<td>&gt;&gt;,&lt;&lt;</td>
</tr>
<tr class="odd">
<td></td>
<td>&amp;</td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>=(比较运算),&lt;=&gt;,&lt;,&lt;=,&gt;,&gt;=,!=,&lt;&gt;,IN,IS NULL,LIKE,REGEXP</td>
</tr>
<tr class="even">
<td></td>
<td>BETWEEN AND,CASE,WHEN,THEN,ELSE</td>
</tr>
<tr class="odd">
<td></td>
<td>NOT</td>
</tr>
<tr class="even">
<td></td>
<td>&amp;&amp;,AND</td>
</tr>
<tr class="odd">
<td></td>
<td>XOR</td>
</tr>
<tr class="even">
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>最低</td>
<td>=（赋值）</td>
</tr>
</tbody>
</table>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">select count (*) from table_name where 查询条件                 // 统计个数 </span><br><span class="line">select Max (列名) from table_name where 查询条件                 // 查询最大值 </span><br><span class="line">select Min (列名) from table_name where 查询条件                 // 查询最小值 </span><br><span class="line">select sum (列名) from table_name where 查询条件                 // 求和 </span><br><span class="line">select avg (列名) from table_name where 查询条件                 // 平均值 </span><br><span class="line"></span><br><span class="line">select * from table_name group by 分组的依据                    // 分组查询 </span><br><span class="line">select * from table_name group by 分组的依据 having 指定条件；//  根据指定条件分组查询 </span><br><span class="line"></span><br><span class="line">select * from table_name order by 字段 ASC;                        // 排序 - 升序 </span><br><span class="line">select * from table_name order by 字段 desc;                       // 排序 - 降序 </span><br><span class="line"></span><br><span class="line">select * from table_name limit offset, rows                        // 分页查询：rows - 每页的列数，offset: 从哪开始 - rows 的倍数 </span><br><span class="line"></span><br><span class="line">select distinct 字段 from table_name;                              // 去重查询 </span><br></pre></td></tr></table></figure>
<h1 id="er-模型与关系">6. ER 模型与关系</h1>
<p>  ER 模型与关系表述的是表与表之间的关系，包括：一对一、一对多和多对多，但是不建议表和表之间建立循环的关系闭合，一个简单的实例如下： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">create table subjects (                                    // 创建学科表 </span><br><span class="line">id int auto_increment primary key <span class="keyword">not</span> null,</span><br><span class="line"><span class="built_in">title</span> varchar (<span class="number">10</span>) <span class="keyword">not</span> null);</span><br><span class="line">insert into subjects (<span class="number">0</span>,"语文"),                          // 向学科表中插入数据 </span><br><span class="line">(<span class="number">0</span>,"数学"),</span><br><span class="line">(<span class="number">0</span>,"英语"),</span><br><span class="line">(<span class="number">0</span>,"科学");</span><br><span class="line">create table stu (                                        // 创建学生表 </span><br><span class="line">   id int auto_increment primary key,</span><br><span class="line">   name varchar (<span class="number">10</span>) <span class="keyword">not</span> null,</span><br><span class="line">   birthday datetime,</span><br><span class="line">   gender bit default <span class="number">0</span>,</span><br><span class="line">   isdelete bit default <span class="number">0</span>,</span><br><span class="line">   address varchar (<span class="number">100</span>),</span><br><span class="line">   score int</span><br><span class="line">   );</span><br><span class="line">insert into stu (<span class="number">1</span>,"小明","<span class="number">2008</span>-<span class="number">01</span>-<span class="number">01</span>",<span class="number">0</span>,<span class="number">0</span>,"北京",<span class="number">90</span>),     // 向学生表中插入数据 </span><br><span class="line">(<span class="number">2</span>,"小红","<span class="number">2007</span>-<span class="number">01</span>-<span class="number">01</span>",<span class="number">1</span>,<span class="number">0</span>,"上海",<span class="number">80</span>),</span><br><span class="line">(<span class="number">3</span>,"小兰","<span class="number">2006</span>-<span class="number">01</span>-<span class="number">01</span>",<span class="number">1</span>,<span class="number">0</span>,"广州",<span class="number">100</span>),</span><br><span class="line">(<span class="number">4</span>,"小王","<span class="number">2005</span>-<span class="number">01</span>-<span class="number">01</span>",<span class="number">0</span>,<span class="number">0</span>,"深圳",<span class="number">20</span>),</span><br><span class="line">(<span class="number">5</span>,"老王","<span class="number">2009</span>-<span class="number">01</span>-<span class="number">01</span>",<span class="number">0</span>,<span class="number">0</span>,null,<span class="number">30</span>),</span><br><span class="line">(<span class="number">6</span>,"老刘","<span class="number">2004</span>-<span class="number">01</span>-<span class="number">01</span>",<span class="number">0</span>,<span class="number">0</span>,null,<span class="number">40</span>),</span><br><span class="line">(<span class="number">7</span>,"小丽","<span class="number">2003</span>-<span class="number">01</span>-<span class="number">01</span>",<span class="number">1</span>,<span class="number">0</span>,"东莞",<span class="number">50</span>),</span><br><span class="line">(<span class="number">8</span>,"小芳","<span class="number">2002</span>-<span class="number">01</span>-<span class="number">01</span>",<span class="number">1</span>,<span class="number">0</span>,"福建",<span class="number">60</span>),</span><br><span class="line">(<span class="number">9</span>,"小粒","<span class="number">2001</span>-<span class="number">01</span>-<span class="number">01</span>",<span class="number">0</span>,<span class="number">0</span>,"福州",<span class="number">70</span>);</span><br><span class="line">create table scores (                                      // 创建分数表 </span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">stuid int,</span><br><span class="line">subid int,</span><br><span class="line">score decimal (<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">foreign key (stuid) references stu (id),                    // 链接学生表 </span><br><span class="line">foreign key (subid) references subjects (id)                // 链接学科表 </span><br><span class="line">);</span><br><span class="line">insert into scores values (<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">80</span>),(<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">60</span>),(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">70</span>),(<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">90</span>),(<span class="number">0</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">60</span>),(<span class="number">0</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">75</span>);    // 向分数表中创建数据 </span><br></pre></td></tr></table></figure></p>
<p>  E-R 关系图如下： <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190817172336.png"></p>
<h1 id="连接查询">7. 连接查询</h1>
<p>  mysql 的连接查询就是多表查询，基本的用法如下： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">select stu.name,subjects.<span class="built_in">title</span>,scores.score</span><br><span class="line">    from scores</span><br><span class="line">    inner join stu on scores.stuid=stu.id             //inner join: 内连接 - 获取两个表中字段匹配关系的记录 </span><br><span class="line">    inner join subjects on scores.subid=subjects.id;</span><br><span class="line">select 字段 </span><br><span class="line">    from 左数据表名 </span><br><span class="line">    left join 右数据表名 on 左数据表名。连接列名 = 右数据表名 //left join: 左连接 </span><br><span class="line">select 字段 </span><br><span class="line">    from 左数据表名 </span><br><span class="line">    right join 右数据表名 on 左数据表名。连接列名 = 右数据表名 //right join: 右连接 </span><br></pre></td></tr></table></figure></p>
<p>   上述三者的区别如下： <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190817190016.png"> <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190817190041.png"> <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190817190111.png"> # 7. 自关联 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">create table areas (</span><br><span class="line">aid int primary key,</span><br><span class="line">atitle varchar (<span class="number">20</span>),</span><br><span class="line">pid int</span><br><span class="line">);                                               // 创建表 </span><br><span class="line"></span><br><span class="line">insert into areas </span><br><span class="line">values ('<span class="number">130000</span>', ' 河北省 ', NULL),</span><br><span class="line">('<span class="number">130100</span>', ' 石家庄市 ', '<span class="number">130000</span>'),</span><br><span class="line">('<span class="number">130400</span>', ' 邯郸市 ', '<span class="number">130000</span>'),</span><br><span class="line">('<span class="number">130600</span>', ' 保定市 ', '<span class="number">130000</span>'),</span><br><span class="line">('<span class="number">130700</span>', ' 张家口市 ', '<span class="number">130000</span>'),</span><br><span class="line">('<span class="number">130800</span>', ' 承德市 ', '<span class="number">130000</span>'),</span><br><span class="line">('<span class="number">410000</span>', ' 河南省 ', NULL),</span><br><span class="line">('<span class="number">410100</span>', ' 郑州市 ', '<span class="number">410000</span>'),</span><br><span class="line">('<span class="number">410300</span>', ' 洛阳市 ', '<span class="number">410000</span>'),</span><br><span class="line">('<span class="number">410500</span>', ' 安阳市 ', '<span class="number">410000</span>'),</span><br><span class="line">('<span class="number">410700</span>', ' 新乡市 ', '<span class="number">410000</span>'),</span><br><span class="line">('<span class="number">410800</span>', ' 焦作市 ', '<span class="number">410000</span>');                   // 插入数据 </span><br><span class="line"></span><br><span class="line">select * from areas as p</span><br><span class="line">inner join areas as c on c.pid=p.aid</span><br><span class="line">where p.atitle=' 河南省 ';                          // 查询河南省的所有城市 </span><br><span class="line"></span><br><span class="line">insert into areas values</span><br><span class="line">('<span class="number">410101</span>', ' 中原区 ', '<span class="number">410100</span>'),</span><br><span class="line">('<span class="number">410102</span>', ' 二七区 ', '<span class="number">410100</span>'),</span><br><span class="line">('<span class="number">410103</span>', ' 金水区 ', '<span class="number">410100</span>');                   // 插入区数据 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from areas as c</span><br><span class="line">inner join areas as a on a.pid=c.aid</span><br><span class="line">where c.atitle=' 郑州市 ';                          // 查询郑州市的所有区县 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from areas as p</span><br><span class="line">left join areas as c on c.pid=p.aid</span><br><span class="line">left join areas as a on a.pid=c.aid</span><br><span class="line">where p.atitle=' 河南省 ';                          // 查询河南省的所有区县 </span><br></pre></td></tr></table></figure></p>
<h1 id="视图">8. 视图</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">create view 视图的名字 as  sql 的查询语句 </span><br><span class="line">select * from 视图名字 </span><br><span class="line">drop view  视图名字 </span><br></pre></td></tr></table></figure>
<h1 id="事务">9. 事务</h1>
<p>  MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！    一般来说，事务是必须满足 4 个条件（ACID）：：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">begin;                     // 开始事务 </span><br><span class="line">commit;                    // 提交事务 </span><br><span class="line">rollback;                  // 回滚：退回上一步 - 前次操作无效 </span><br></pre></td></tr></table></figure></p>
<h1 id="创建索引---提高查询效率">10. 创建索引 - 提高查询效率</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">create index indexname on tablename (key (length))                  // 基本用法 - 创建索引 </span><br><span class="line">show index from tablename                                          // 查看所有索引 </span><br><span class="line">drop index indexname on tablename                                  // 删除索引 </span><br></pre></td></tr></table></figure>
<h1 id="在-python-中操作-mysql-数据库">11. <a href="https://www.cnblogs.com/dwenwen/articles/8259638.html" target="_blank" rel="noopener">在 python 中操作 MySQL 数据库</a></h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">conn = pymysql.connect (host=“你的数据库地址”, user=“用户名”,password=“密码”,database=“数据库名”,charset=“utf8”)  # 连接数据库 </span><br><span class="line">cursor=conn.cursor ()        # 获取光标 </span><br><span class="line"># 写 sql 语句 </span><br><span class="line"># 把所有要插入的信息保存在元祖或列表中 </span><br><span class="line"><span class="function">ry:</span></span><br><span class="line"><span class="function">    # 执行 < span class="title">sql</span> 语句 </span><br><span class="line"><span class="function">    <span class="title">cursor.executemany</span>(<span class="title">sql</span>,<span class="title">data</span>)    #使用 < span class="title">executemany</span> 做批量处理 </span><br><span class="line"><span class="function">    <span class="title">conn.commit</span>()   #把修改提交到数据库 </span></span><br><span class="line"><span class="function"><span class="title">except</span> <span class="title">Exception</span> <span class="title">as</span> <span class="title">e</span> :</span></span><br><span class="line"><span class="function">    <span class="title">conn.rollback</span>()</span></span><br><span class="line"><span class="function"><span class="title">cursor.close</span>()</span></span><br><span class="line"><span class="function"><span class="title">conn.close</span>()                # 关闭数据库连接 </span></span><br></pre></td></tr></table></figure>
<h1 id="备份和恢复">12. 备份和恢复</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysqldump  -u root -p db_name table_name &gt; 备份文件的绝对路径 </span><br><span class="line">mysql -u root -p db_name &lt; 备份文件的绝对路径 </span><br></pre></td></tr></table></figure>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p>Decimal (n,m) 表示数值中共有 n 位数，其中整数 n-m 位，小数 m 位。例：decimal (10,6)，数值中共有 10 位数，其中整数占 4 位，小数占 6 位。<a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>数据库</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 数据库基本操作</title>
    <url>/2019/08/15/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>  Redis 是完全开源免费的，遵守 BSD 协议，是一个高性能的 key-value 数据库。Redis 支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及 zset (sorted set：有序集合)。 <a id="more"></a></p>
<h1 id="字符串">1. 字符串</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"> 命令 键值          // 基本语法 </span><br><span class="line"><span class="built_in">SET</span> key "value"     // 增加一个数据 </span><br><span class="line">MSET key1 "value1" key2 "value2"  // 增加多个数据 </span><br><span class="line">SETEX key seconds value  // 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</span><br><span class="line">GET key             // 获取指定 key 的值。</span><br><span class="line">MGET key1 [key2..]  // 获取所有 (一个或多个) 给定 key 的值。</span><br><span class="line"><span class="built_in">APPEND</span> key value    // 如果 key 已经存在并且是一个字符串， <span class="built_in">APPEND</span> 命令将指定的 value 追加到该 key 原来值（value）的末尾。</span><br></pre></td></tr></table></figure>
<h1 id="哈希">2. 哈希</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">HSET key field value   // 将哈希表 key 中的字段 field 的值设为 value </span><br><span class="line">HKEYS key              // 获取所有哈希表中的字段 </span><br><span class="line">HGET key field         // 获取存储在哈希表中指定字段的值 </span><br><span class="line">HMGET key field1 [field2]   // 获取所有给定字段的值 </span><br><span class="line">HVALS key                   // 获取哈希表中所有值 </span><br><span class="line">HDEL key field1 [field2]    // 删除一个或多个哈希表字段 </span><br></pre></td></tr></table></figure>
<h1 id="列表">3. 列表</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">LPUSH key value1 [value2]  // 将一个或多个值插入到列表头部 </span><br><span class="line">RPUSH key value1 [value2]  // 在列表中添加一个或多个值 </span><br><span class="line">LPOP key                   // 移出并获取列表的第一个元素 </span><br><span class="line">RPOP key                   // 移除列表的最后一个元素，返回值为移除的元素。</span><br><span class="line">LRANGE key <span class="built_in">start</span> stop      // 根据范围取出 </span><br><span class="line">LINSERT key BEFORE|AFTER pivot value // 在 pivot 前 | 后插入 </span><br><span class="line">LSET key index value      // 通过索引设置列表元素的值 </span><br><span class="line">LREM key count value      // 移除列表元素:count &gt;<span class="number">0</span> 从头删；count &lt; <span class="number">0</span> 从尾删除；count = <span class="number">0</span> 符合条件的所有删除。</span><br></pre></td></tr></table></figure>
<h1 id="集合">4. 集合</h1>
<p>  Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">SADD key member1 [member2]      // 向集合添加一个或多个成员 </span><br><span class="line">SMEMBERS key                    // 查看所有元素 </span><br><span class="line">SREM key member1 [member2]      // 移除集合中一个或多个成员 </span><br><span class="line">SISMEMBER key member            // 判断 member 元素是否是集合 key 的成员:<span class="number">1</span>- 是；<span class="number">0</span>- 否。</span><br></pre></td></tr></table></figure></p>
<h1 id="有序集合">5. 有序集合</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ZADD key score1 member1 [score2 member2]        // 向有序集合添加一个或多个成员，或者更新已存在成员的分数 </span><br><span class="line">ZRANGE key <span class="built_in">start</span> stop [WITHSCORES]              // 查看指定范围内的元素 </span><br><span class="line">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]  // 通过分数返回有序集合指定区间内的成员 </span><br><span class="line">ZSCORE key member                               // 返回有序集中，成员的分数值 </span><br><span class="line">ZREM key member [member ...]                    // 移除有序集合中的一个或多个成员 </span><br><span class="line">ZREMRANGEBYSCORE key min max                    // 移除有序集合中给定的分数区间的所有成员 </span><br></pre></td></tr></table></figure>
<h1 id="操作-key">6. 操作 key</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">KEYS pattern              // 根据 pattern 返回 key</span><br><span class="line">EXISTS key                // 检查给定 key 是否存在 </span><br><span class="line"><span class="built_in">TYPE</span> key                  // 返回 key 所储存的值的类型 </span><br><span class="line"><span class="built_in">DEL</span> key                   // 该命令用于在 key 存在时删除 key</span><br><span class="line">EXPIRE key seconds        // 为给定 key 设置过期时间，以秒计 </span><br></pre></td></tr></table></figure>
<h1 id="在-python-中操作-redis-数据库">7. 在 python 中操作 Redis 数据库</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">r = redis.StricRedis (host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line">r.set (<span class="string">' 键名 '</span>, <span class="string">' 值 '</span>)    // 设置值：不存在 - 创建；存在 - 修改 </span><br><span class="line">r.delete (<span class="string">' 键名 '</span>)      //  删除值 </span><br><span class="line">r.get (<span class="string">' 键名 '</span>)         //  获取值 </span><br><span class="line">r.keys ()             //   获取所有 key 和数据 </span><br></pre></td></tr></table></figure>
<h1 id="清除数据">8. 清除数据</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">flushdb    // 清除当前的数据库 </span><br><span class="line">FLUSHALL   // 清空 < span class="number">0</span>-<span class="number">16</span> 个数据库 <br></pre></td></tr></table></figure>
<hr>
<p><a href="https://www.runoob.com/redis/redis-conf.html" target="_blank" rel="noopener">Redis 配置</a> <a href="https://www.jianshu.com/p/e2aab25d19f5" target="_blank" rel="noopener">主从服务器</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>数据库</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>面板 Granger 因果检验</title>
    <url>/2019/08/13/%E9%9D%A2%E6%9D%BFGranger%E5%9B%A0%E6%9E%9C%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="dumitrescu-hurlin-检验">1. Dumitrescu-Hurlin 检验</h1>
<a id="more"></a>
<h2 id="granger-因果检验的基本思想">1.1 Granger 因果检验的基本思想</h2>
<p>  Granger 于 1969 年开创性地提出一种分析时间序列数据因果关系的方法，基本思想是：在控制 <span class="math inline">\(y\)</span> 的滞后项 (过去值) 的情况下，如果 <span class="math inline">\(x\)</span> 的滞后项仍然有助于解释 <span class="math inline">\(y\)</span> 的当期值的变动，则认为 <span class="math inline">\(x\)</span> 对 <span class="math inline">\(y\)</span> 产生因果影响。    基本模型如下： <span class="math display">\[y_t = \alpha + \sum_{k=1}^{K}\gamma_ty_{t-k} + \sum_{k=1}^{K}\beta_kx_{t-k} + \varepsilon_t,  t = 1, … … ,T \tag1\]</span>    检验的原假设是： <span class="math display">\[H_0 : \beta_1 = … =\beta_K = 0\]</span>    构造 F 统计量进行检验。如果 F 检验拒绝 <span class="math inline">\(H_0\)</span>，则认为存在因果关系，即 <span class="math inline">\(x\)</span> 是 <span class="math inline">\(y\)</span> 的 Granger 因。</p>
<h2 id="dumitrescu-hurlin-的拓展">1.2 Dumitrescu-Hurlin 的拓展</h2>
<p>  Dumitrescu-Hurlin 于 2012 年在此基础上进行了拓展，提供了一个检验面板数据因果关系的方法。基本模型如下： <span class="math display">\[y_{i,t} = \alpha_i + \sum_{k=1}^{K}\gamma_{ik} y_{i,t-k} + \sum_{k=1}^{K}\beta_{ik} x_{i,t-k} + \varepsilon_{i,t} \tag2\]</span>    其中，<span class="math inline">\(i = 1,… …,N; t = 1,… …,T\)</span>。<span class="math inline">\(x_{i,t}\)</span> 和 <span class="math inline">\(y_{i,t}\)</span> 是两个平稳序列在个体 <span class="math inline">\(i\)</span> 和时间 <span class="math inline">\(t\)</span> 上的观测值。    原假设认为面板中的所有个体都不存在因果关系： <span class="math display">\[H_0 = \beta_{i1} = … = \beta_{ik} = 0 \qquad \forall i = 1,\ldots,N_1 \tag3\]</span>    备择假设为部分（不是所有的）个体存在因果关系： <span class="math display">\[H_1:\beta {i1} = \ldots = \beta_{iK} = 0 \qquad \forall i = 1,\ldots,N_1 \\\\
\beta_{i1} \neq 0 or \ldots or \beta_{iK} \neq 0 \qquad \forall i = N_1+1,\ldots,N\]</span>    其中，<span class="math inline">\(N_1 \in [0,N-1]\)</span>。</p>
<h3 id="实现方法">1.2.1 实现方法</h3>
<p>  Dumitrescu-Hurlin 提出运行包含在 (1) 式中的 N 个独立回归，执行 k 个线性假设的 F 检验来获得 Wald 统计量：<span class="math inline">\(W_i\)</span>，最后计算 Wald 统计量的平均值：<span class="math inline">\(\overline {W} = \frac {1}{N}\sum_{i=1}^{N} W_i\)</span>。    但是，拒绝 <span class="math inline">\(H_0\)</span> 并不排除一些个体的非因果关系，Dumitrescu-Hurlin 使用蒙特卡罗模拟（Monte Carlo Simulation）发现 W 的渐进表现良好，可以用来检测面板因果关系。    在 Wald 统计量：<span class="math inline">\(W_i\)</span> 是独立同分布的假设下，当 <span class="math inline">\(T \to \infty\)</span> 和 <span class="math inline">\(N \to \infty\)</span> 时，标准化的统计 <span class="math inline">\(\widetilde {Z}\)</span> 服从下面的正态分布： <span class="math display">\[\overline {Z} = \sqrt {\frac {N}{2K}}\times (\overline {W}-K) \quad \frac {d}{T,N \to \infty} \to N (0,1) \tag4\]</span>    并且，对一个 T&gt;5+3K 的固定的 T 维度来说，最大标准统计量 Z 服从以下正态分布： <span class="math display">\[\widetilde {Z} = \sqrt {\frac {N}{2K}\times\frac {T-3K-5}{T-2K-3}}\times (\frac {T-3K-3}{T-3K-1}\times\overline {W}-K) \quad \\\\
\frac {d}{T,N \to \infty} \to N (0,1) \tag5\]</span>    原假设 (3) 的检验也是基于 <span class="math inline">\(\overline {Z}\)</span> 和 <span class="math inline">\(\widetilde {Z}\)</span>， 如果这些值大于标准值，则拒绝原假设：<span class="math inline">\(H_0\)</span>，认为 Granger 因果存在。</p>
<h3 id="滞后阶数的选择">1.2.2 滞后阶数的选择</h3>
<p>   选择滞后阶数 k 的一个方法是根据信息准则（AIC/BIC/HQIC），但这意味着 <span class="math inline">\(K_{max}^{3}\)</span> 时间序列在整个滞后选择过程中被忽略掉了；另一个需要考虑的现实问题是面板数据中的横截面依赖性。为此， Dumitrescu 和 Hurlin 提出了 bootstrapped 临界值，计算步骤如下：</p>
<p>   第一步：通过拟合模型（2），根据（4）和（5）的定义获得 <span class="math inline">\(\overline {Z}\)</span> 和 <span class="math inline">\(\widetilde {Z}\)</span>。</p>
<p>   第二步：在 <span class="math inline">\(H_{0}:y_{i,t} = \alpha_{i}^{0} + \sum_{k=1}^{K}\gamma_{ik}^{0} y_{i,t-k} + \varepsilon_{i,t}\)</span> 假设下拟合模型，得到残差矩阵：<span class="math inline">\(\widehat {\varepsilon}(T-K) \times N\)</span>。</p>
<p>   第三步：重新抽取矩阵 <span class="math inline">\(\hat {\varepsilon}\)</span>，形成 <span class="math inline">\(\widehat {\varepsilon}(T-K) \times N\)</span>。</p>
<p>   第四步：随机抽取 <span class="math inline">\((y_{1}^{\star},\ldots,y_{K}^{\star})^{\prime}\)</span>，令 <span class="math inline">\(y_{t}^{\star}=(y_{1,t}^{\star},y_{2,t}^{\star}, \ldots, y_{N,t}^{\star})\)</span>, 其中 <span class="math inline">\(k\)</span> 为可重复的连续时间序列。</p>
<p>   第五步：根据 <span class="math inline">\(k\)</span> 期随机抽取，构建重抽样序列: <a href="https://cdn.mathpix.com/snip/images/2zu5GVVnKtSaDN3MqVmbfPUpXhatVHhV9ipIsbAkziM.original.fullsize.png" target="_blank" rel="noopener"></a></p>
<p>   第六步：拟合模型 <span class="math inline">\(y_{i,t}^{\star} = \alpha_{i}^{b}+\sum_{k=1}^{K}\gamma_{ik}^{b} y_{i,t-k}^{\star} + \sum_{k=1}^{K}\beta_{ik}^{b} x_{i,t-k} + \varepsilon_{i,t}\)</span>，计算 <span class="math inline">\(\overline {Z}^{b}\)</span> 和 <span class="math inline">\(\widetilde {Z}^{b}\)</span>。</p>
<p>   第七步：重复步骤 3-6 ，根据 <span class="math inline">\(\overline {Z}^{b}\)</span> 和 <span class="math inline">\(\widetilde {Z}^{b}\)</span> 的分布，计算 P 值、和 <span class="math inline">\(\overline {Z}^{b}\)</span> 和 <span class="math inline">\(\widetilde {Z}^{b}\)</span> 的标准值。</p>
<h1 id="stata-实现xtgcause-命令">2. Stata 实现：xtgcause 命令</h1>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">xtgcause depvar indepvar [<span class="keyword">if</span>] [<span class="keyword">in</span>], [lags (lags_spec) <span class="keyword">regress</span> <span class="keyword">bootstrap</span> breps (#) blevel (#) blength (#) seed (#) nodots] <span class="comment">// 基本语法 </span></span><br></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 导入和设定数据 </span></span><br><span class="line"><span class="keyword">insheet</span> using <span class="string">"http://www.execandshare.org/execandshare/htdocs/data/MetaSite/upload/companionSite51/data/data-demo.csv"</span>, delimiter (<span class="string">","</span>)  <span class="keyword">clear</span> </span><br><span class="line"><span class="keyword">split</span> x, <span class="keyword">parse</span>(`=<span class="built_in">char</span>(9)') <span class="keyword">destring</span></span><br><span class="line"><span class="keyword">split</span> y, <span class="keyword">parse</span>(`=<span class="built_in">char</span>(9)') <span class="keyword">destring</span></span><br><span class="line"><span class="keyword">drop</span> x <span class="built_in">y</span></span><br><span class="line"><span class="keyword">gen</span> t = _n</span><br><span class="line"><span class="keyword">reshape</span> long x y, <span class="built_in">i</span>(t) <span class="built_in">j</span>(id)</span><br><span class="line"><span class="keyword">xtset</span> id t    <span class="comment">// 设定为面板数据 </span></span><br><span class="line">xtgcause y x</span><br><span class="line"><span class="comment">* Wald 统计量 </span></span><br><span class="line"><span class="keyword">matrix</span> Wi_PVi = <span class="built_in">r</span>(Wi), <span class="built_in">r</span>(PVi)</span><br><span class="line"><span class="keyword">matrix</span> <span class="keyword">list</span> Wi_PVi</span><br><span class="line"><span class="comment">* 设定滞后阶数为 2</span></span><br><span class="line">xtgcause y x, lags (2)</span><br><span class="line"><span class="comment">* 基于 Bootstrap 的标准误 </span></span><br><span class="line">xtgcause y x, <span class="keyword">bootstrap</span> lags (1) breps (100) seed (20190802)</span><br></pre></td></tr></table></figure>
<p>   一个实例 - Paramati, Ummalla 和 Apergis (2016)： <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 导入和设定数据 </span></span><br><span class="line">import excel <span class="string">"Data.xlsx"</span>, <span class="keyword">clear</span> first cellrange (A1:J461) sheet (LN-EU)</span><br><span class="line"><span class="keyword">xtset</span> ID <span class="built_in">Year</span></span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>马克思的利润率：Michael Roberts</title>
    <url>/2019/08/11/%E9%A9%AC%E5%85%8B%E6%80%9D%E7%9A%84%E5%88%A9%E6%B6%A6%E7%8E%87/</url>
    <content><![CDATA[<p>   在 Michael Roberts 最近撰写的博客文章中，他谈论到了利润率的问题，并引发了部分人的讨论。</p>
<h1 id="deepankar-basu-对马克思危机理论的看法">1. Deepankar Basu 对马克思危机理论的看法</h1>
<p>  Michael Roberts 引用了 Deepankar Basu 的原文：</p>
<blockquote>
<p>  The Marxist tradition conceptualizes two types of crisis tendencies in capitalism: a crisis of deficient surplus value and a crisis of excess surplus value. Two mechanisms that become important in crises of deficient surplus value are the rising organic composition of capital and the profit squeeze: two mechanisms that are salient in crises of excess surplus value are problems of insufficient aggregate demand and increased financial fragility.</p>
</blockquote>
<p>  Michael Roberts 指出从以上的话语来看，Deepankar Basu 试图将利润挤压理论与马克思的盈利规律（law of profitability）相协调，尤其是置盐定理以及后凯恩斯工资主导的消费不足引起危机的理论。Deepankar Basu 认为：技术变革对利润率的影响主要取决于劳动力市场的情况。如果实际工资率在技术变革期间急剧上升，那么利润率就会下降；另一方面，如果实际工资率没有足够快地上升，那么利润率可能会上升。但是置盐定理认为资本家永远不会投资新技术，除非它给他们带来更高的利润率。技术的增加将导致更高的劳动生产率，并立即转化为每个生产单位的更高的剩余价值率，所以利润率不会下降，反而会上升。只有阶级斗争，导致实际工资上升，才会抵消这种情况，导致利润率下降。而实际工资决定盈利方向的论点不是马克思的，事实上，它更接近里卡多，所以置盐定理被称为新李嘉图式的。</p>
<p>  Deepankar Basu 还认为马克思的危机理论也可以与后凯恩斯主义理论相协调，即危机是由低工资导致消费崩溃或低利润导致投资崩溃引起的。但是，Michael Roberts 指出每次美国战后的衰退中，导致经济陷入衰退的原因是投资而不是消费，利润率和利润的降低又进一步刺激投资。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>图形、图片、与表单控件</title>
    <url>/2019/08/09/%E5%9B%BE%E5%BD%A2%E3%80%81%E5%9B%BE%E7%89%87%E3%80%81%E4%B8%8E%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6/</url>
    <content><![CDATA[<p>   在 VBA 的学习中，经常会遇到陌生的东西，如何快速弄清其语法和作用是一个十分重要的问题。 <a id="more"></a></p>
<h1 id="操作图形对象">1. 操作图形对象</h1>
<p>   图形对象的常用属性如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sheet1.shapes.count</span><br><span class="line">Shp.Type</span><br><span class="line">Shp.Name</span><br><span class="line">Shp.TopLeftCell.Address</span><br><span class="line">Shp.Top</span><br><span class="line">Shp.Left</span><br><span class="line">Shp.Height</span><br><span class="line">Shp.Width</span><br><span class="line">Shp.Visible</span><br></pre></td></tr></table></figure></p>
<h1 id="操作图片对象">2. 操作图片对象</h1>
<p>   图片对象常用方法和属性如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sheet1.Shapes.AddPicture</span><br><span class="line">&apos; 参数：善用帮助功能 </span><br><span class="line">Filename</span><br><span class="line">LinkToFile</span><br><span class="line">SaveWithDocument</span><br><span class="line">Left</span><br><span class="line">Top</span><br><span class="line">Width</span><br><span class="line">Height</span><br></pre></td></tr></table></figure></p>
<p>   还可以为外部图片重命名： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Name…as…</span><br></pre></td></tr></table></figure></p>
<h1 id="使用窗体控件">3. 使用窗体控件</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sheet2.GroupBoxes.Add</span><br><span class="line">Sheet2.OptionButtons.Add</span><br><span class="line">shp.Characters.Text</span><br></pre></td></tr></table></figure>
<h1 id="使用-like-语句">4. 使用 Like 语句</h1>
<table>
<thead>
<tr class="header">
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>*</td>
<td>任意字符</td>
</tr>
<tr class="even">
<td>#</td>
<td>任意数字</td>
</tr>
<tr class="odd">
<td>？</td>
<td>一位字符</td>
</tr>
<tr class="even">
<td>！</td>
<td>逻辑非</td>
</tr>
<tr class="odd">
<td>[A-Z]</td>
<td>大写字母</td>
</tr>
<tr class="even">
<td>[A-Za-z]</td>
<td>字母</td>
</tr>
<tr class="odd">
<td>[0-9]</td>
<td>数字</td>
</tr>
<tr class="even">
<td>[!A-Z]</td>
<td>非大写字母</td>
</tr>
<tr class="odd">
<td>[!0-9]</td>
<td>非数字</td>
</tr>
</tbody>
</table>
<h1 id="学习新东西帮助文件的使用">5. 学习新东西：帮助文件的使用</h1>
<p>   在 VBA 界面中，直接按住快捷键：F1，即可打开帮助文件。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 ADO 操纵外部数据</title>
    <url>/2019/08/09/%E4%BD%BF%E7%94%A8ADO%E6%93%8D%E7%BA%B5%E5%A4%96%E9%83%A8%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>   在 VBA 中，可以使用 ADO 方便的操纵外部数据。 <a id="more"></a></p>
<h1 id="使用-ado-连接外部-excel-数据源">1. 使用 ADO 连接外部 Excel 数据源</h1>
<p>   在 Excel 中，要想使用 ADO 链接外部数据前，必须在 VBA 界面中点击工具：引用，勾选 Microsoft ActiveX Data Object x.x Library。值得注意的是，Microsoft ActiveX Data Object x.x Library 有多个版本，尽量选择比较高的版本。    勾选之后，就可以在 VBA 中调用相应的方法来操作外部数据，基本的代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;Excel 文件 </span><br><span class="line">Dim conn As New ADODB.Connection</span><br><span class="line">conn.Open &quot;Provider = Microsoft.ACE.OLEDB.12.0;Data Source=D:\data\Edata.xlsx;extended properties=&quot;&quot;excel 12.0;HDR=YES&quot;&quot;&quot;</span><br><span class="line">conn.Close</span><br><span class="line">&apos;ACCESS 文件 </span><br><span class="line">conn.Open &quot;Provider=Microsoft.ACE.OLEDB.12.0;Data Source=D:\data\Adata.accdb&quot;</span><br><span class="line">&apos;Mysql 数据库 </span><br><span class="line">conn.Open  &quot;Provider=SQLOLEDB;DataSource=&quot; &amp; Path &amp; &quot;;Initial Catolog=&quot; &amp; strDataName</span><br><span class="line">&apos;MSSQL 数据库 </span><br><span class="line">conn.Open  &quot;Provider=MSDASQL;Driver=&#123;SQL Server&#125;;Server=&quot; &amp; Path &amp; &quot;;Database=&quot; &amp; strDataName</span><br><span class="line">&apos;Oracle 数据库 </span><br><span class="line">conn.Open  &quot;Provider=madaora;Data Source=MyOracleDB; User Id=UserID; Password=Password&quot;</span><br></pre></td></tr></table></figure></p>
<h1 id="常用的-sql-语句">2. 常用的 sql 语句</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos; 抓取数据 </span><br><span class="line">Range (“a1”).CopyFromRecordset conn.Execute (“select * from [data$]”）</span><br><span class="line">&apos; 查询某几个字段 </span><br><span class="line">select 姓名，年龄 from [data$]</span><br><span class="line">&apos; 带条件的查询 </span><br><span class="line">select * from [data$] where 性别 = &quot; 男 “</span><br><span class="line">&apos; 合并两个表的数据 </span><br><span class="line">select * from [data$] union all select * from [data2$]</span><br><span class="line">&apos; 插入新记录 </span><br><span class="line">insert into [data$] (姓名，性别，年龄) values (&apos;AA&apos;,&apos; 男 & apos;,33) </span><br><span class="line">&apos; 修改一条数据 </span><br><span class="line">update [data$] set 性别 =‘男’, 年龄 = 16 where 姓名 =‘张三‘</span><br><span class="line">&apos; 删除一条数据 </span><br><span class="line">delete from [data$]  where 姓名 =&apos; 张三 & apos;</span><br><span class="line">&apos; 使用 LEFT JOIN …ON…  (类似于 VLOOKUP）</span><br><span class="line">select [data3$]. 姓名，性别，年龄，月薪 from [data$] left join [data3$] on [data$]. 姓名 =[data3$]. 姓名 </span><br><span class="line">&apos; 先 UNION ALL 再 LEFT JOIN</span><br><span class="line">select * from (select * from [data$] union all select * from [data2$]) a left join [data3$] on a. 姓名 =[data3$]. 姓名 </span><br><span class="line">&apos; 将查询结果赋值到数组 </span><br><span class="line">arr = Application.WorksheetFunction.Transpose (conn.Execute (&quot;select * from [data$]&quot;).GetRows)</span><br></pre></td></tr></table></figure>
<h1 id="一个简单的案例">3. 一个简单的案例</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos; 使用前请确认是否勾选了 Microsoft ActiveX Data Object  x.x  Library！！！</span><br><span class="line">Sub test ()</span><br><span class="line">Dim conn As New ADODB.Connection</span><br><span class="line">Dim sql As String</span><br><span class="line">&apos; 注意这个链接文件的路径！！！需要把 Adata 文件放入 d:\data 文件夹！！</span><br><span class="line">Range (&quot;a2:z1000&quot;).ClearContents</span><br><span class="line">conn.Open &quot;Provider = Microsoft.ACE.OLEDB.12.0;Data Source=D:\data\Adata.accdb&quot;</span><br><span class="line">sql = &quot;select 客户 ID, 公司名称，日期，产品类别，数量，金额，成本 from [客户信息表] left join [交易记录] on [客户信息表].ID=[交易记录]. 客户 ID&quot;</span><br><span class="line">Range (&quot;a2&quot;).CopyFromRecordset conn.Execute (sql)</span><br><span class="line">conn.Close</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>MangoDB 的基本操作</title>
    <url>/2019/08/07/MongoDB%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>  MangoDB 数据库的类型是非关系型数据库，存储方式比较灵活。<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a> <a id="more"></a></p>
<h1 id="启动和连接-mongodb-服务">1. <a href="https://www.mongodb.org.cn/tutorial/59.html" target="_blank" rel="noopener">启动和连接 Mongodb 服务</a></h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mongodb  // 启动服务 </span><br><span class="line"><span class="built_in">net</span> stop mongodb    // 关闭服务 </span><br></pre></td></tr></table></figure>
<p>   连接 MongoDB 服务：mongo。</p>
<h1 id="设置用户权限">2. 设置用户权限</h1>
<p>   添加管理员权限： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser (</span><br><span class="line">    &#123;</span><br><span class="line"><span class="function">        user:"<span class="title">root</span>",</span></span><br><span class="line"><span class="function">        <span class="title">pwd</span>:"<span class="title">pwd</span>",</span></span><br><span class="line"><span class="function">        <span class="title">roles</span>:["<span class="title">root</span>"]</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">)</span></span><br></pre></td></tr></table></figure></p>
<p>   添加一个业务数据库的管理员权限： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">db.auth ('username','pwd')</span><br><span class="line">db.createUser (&#123;</span><br><span class="line"><span class="function">    user:"<span class="title">user001</span>",</span></span><br><span class="line"><span class="function">    <span class="title">pwd</span>:"123456",</span></span><br><span class="line"><span class="function">    <span class="title">customData</span>:&#123;</span></span><br><span class="line"><span class="function">        <span class="title">name</span>:'<span class="title">jim</span>',</span></span><br><span class="line"><span class="function">        <span class="title">email</span>:'<span class="title">jim</span>@<span class="title">qq.com</span>',</span></span><br><span class="line"><span class="function">        <span class="title">age</span>:18,</span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line"><span class="function">    <span class="title">roles</span>:[</span></span><br><span class="line"><span class="function">        &#123;<span class="title">role</span>:"<span class="title">readWrite</span>",<span class="title">db</span>:"<span class="title">db001</span>"&#125;,</span></span><br><span class="line"><span class="function">        &#123;<span class="title">role</span>:"<span class="title">readWrite</span>",<span class="title">db</span>:"<span class="title">db002</span>"&#125;,</span></span><br><span class="line"><span class="function">        '<span class="title">read</span>'// 对其他数据库有只读权限，对 < span class="title">db001</span>、<span class="title">db002</span> 是读写权限 </span><br><span class="line"><span class="function">    ]</span></span><br><span class="line"><span class="function">&#125;)</span></span><br></pre></td></tr></table></figure></p>
<p>   修改密码： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.changeUserPassword ("用户名", "新密码")</span><br></pre></td></tr></table></figure></p>
<p>   查看和删除用户： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.auth ('username','pwd')</span><br><span class="line">show users</span><br><span class="line">db.dropUser (' 用户名 ')</span><br></pre></td></tr></table></figure></p>
<h1 id="操作数据库">3. 操作数据库</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">use 数据库名             // 创建数据库 </span><br><span class="line">show dbs                // 查看所有数据库 </span><br><span class="line">db                      // 查看当前数据库 </span><br><span class="line">db.dropDatabase ()       // 删除当前数据库 </span><br></pre></td></tr></table></figure>
<h1 id="操作集合">4. 操作集合</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">show collections        // 查看所有集合 </span><br><span class="line">db.createCollection ()   // 创建集合 </span><br><span class="line">db. 集合名.drop ()        // 删除集合 </span><br></pre></td></tr></table></figure>
<h1 id="操作文档内容">5. 操作文档内容</h1>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">db. 集合的名字.insert (&#123;&#125;)    // 增减内容 </span><br><span class="line">db. 集合.remove (&#123;&#125;)         // 删除所有内容 </span><br><span class="line">db. 集合名字.remove (&#123; 删除条件 &#125;)   // 删除符合条件的所有内容 </span><br><span class="line">db. 集合.remove (&#123; 删除条件 &#125;,&#123;justOne:true&#125;)  // 仅删除符合条件的一个内容 </span><br></pre></td></tr></table></figure>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">db.collection.update (    </span><br><span class="line">    &lt;query&gt;,                           //query : update 的查询条件。</span><br><span class="line">    &lt;update&gt;,                          //update : update 的对象和一些更新的操作符（如 $,$inc...）等。</span><br><span class="line">    &#123;       </span><br><span class="line"><span class="function">        upsert: &lt;<span class="title">boolean</span>&gt;,             // <span class="title">upsert</span> : 可选，这个参数的意思是，如果不存在 < span class="title">update</span> 的记录，是否插入 < span class="title">objNew</span>,<span class="title">true</span> 为插入，默认是 < span class="title">false，不插入。<br><span class="line"><span class="function">        <span class="title">multi</span>: &lt;<span class="title">boolean</span>&gt;,              // <span class="title">multi</span> : 可选，<span class="title">mongodb</span> 默认是 < span class="title">false</span>, 只更新找到的第一条记录，如果这个参数为 < span class="title">true</span>, 就把按条件查出来多条记录全部更新。<br><span class="line"><span class="function">        <span class="title">writeConcern</span>: &lt;<span class="title">document</span>&gt;       // <span class="title">writeConcern</span> : 可选，抛出异常的级别。</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">)</span></span><br></pre></td></tr></table></figure>
<p>   基本查询： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">db. 集合名字.<span class="built_in">find</span>(&#123; 条件 &#125;) // 查询符合条件的数据，省略条件则查询所有数据 </span><br><span class="line">db. 集合名字.findOne (&#123; 条件 &#125;)  // 查询符合条件的第一个数据 </span><br><span class="line">db. 集合名字.<span class="built_in">find</span>(&#123; 条件 < span class="number">1</span>, 条件 < span class="number">2&#125;)  // 多条件查询 <br><span class="line">db. 集合名字.<span class="built_in">find</span>(&#123;$or:[&#123;key1: value1&#125;, &#123;key2:value2&#125;]&#125;)   //or 语句 </span><br><span class="line">db. 集合名字.<span class="built_in">find</span>(&#123; 条件，$or: [&#123; 条件 < span class="number">1</span>&#125;,&#123; 条件 < span class="number">2&#125;]&#125;)           // 混合使用 <br><span class="line">db. 集合名字.<span class="built_in">find</span>(&#123;age:&#123;$<span class="keyword">in</span>:[<span class="number">18</span>,<span class="number">28</span>]&#125;&#125;)                     // 范围运算符 </span><br><span class="line">db. 集合名字.<span class="built_in">find</span>(&#123;age:&#123;$nin:[<span class="number">18</span>,<span class="number">28</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure></p>
<p>   条件操作符：<span class="math inline">\(gt - 大于、\)</span>lt - 小于、$gte - 大于等于和 $lte - 小于等于，使用示例如下 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">db.col.<span class="built_in">find</span>(&#123;likes : &#123;$lt :<span class="number">200</span>, $gt : <span class="number">100</span>&#125;&#125;)   // 获取 "col" 集合中 "likes" 大于 < span class="number">100</span> 小于 < span class="number">200 的数据 <br></pre></td></tr></table></figure></p>
<p>   支持正则表达式： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">db.stu.<span class="built_in">find</span>(&#123;name:/^ 黄 /&#125;)</span><br><span class="line">db.stu.<span class="built_in">find</span>(&#123;name:&#123;$regex:"^ 黄"&#125;&#125;)   // 两种表达方式 </span><br><span class="line">db.stu.<span class="built_in">find</span>(&#123;name:/^ 黄 /i&#125;)</span><br><span class="line"> db.stu.<span class="built_in">find</span>(&#123;name:&#123;$regex:"^ 黄",$options:"$i"&#125;&#125;)  // 不区分大小写 </span><br></pre></td></tr></table></figure></p>
<p>   自定义函数： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">db. 集合名字.<span class="built_in">find</span>(&#123;$where:function ()&#123;return this.age&gt;<span class="number">30</span>;&#125;&#125;)</span><br></pre></td></tr></table></figure></p>
<p>   查询结果的显示： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">db. 集合名字.<span class="built_in">find</span>().limit (显示数).skip (跳过数)</span><br><span class="line">db. 集合名字.<span class="built_in">find</span>().sort (&#123;KEY:<span class="number">1</span>&#125;)   // <span class="number">1</span>- 升序排列；-<span class="number">1</span>- 降序排列。</span><br><span class="line">db. 集合名字.<span class="built_in">find</span>().count ()</span><br><span class="line">db. 集合名字.count (&#123; 条件 &#125;)         // 统计符合条件的个数       </span><br><span class="line">db. 集合名字.distinct (' 字段 ',&#123; 条件 &#125;)   // 去重查询 </span><br><span class="line">db.emp.<span class="built_in">find</span>(&#123;&#125;,&#123;ename:<span class="number">1</span>, _id:<span class="number">0</span>, sal:<span class="number">1</span>&#125;    // 投影：<span class="number">1</span>- 显示；<span class="number">0</span>- 不显示 </span><br></pre></td></tr></table></figure></p>
<p>   复合查询： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">db. 集合名字.aggregate (</span><br><span class="line">    [</span><br><span class="line">    &#123;$match:&#123;score:&#123; $gt:<span class="number">70</span>, $lte:<span class="number">90</span>&#125;&#125;&#125;,                  //match: 筛选数据 </span><br><span class="line">    &#123;$group:&#123;_id:"$ 字段"&#125;&#125;,                               //group: 按字段分组 </span><br><span class="line">    &#123;$project：&#123;&#125;&#125;,                                       // <span class="number">1</span>- 显示；<span class="number">0</span>- 不显示 </span><br><span class="line">    &#123;$sort：&#123; 字段：<span class="number">1</span>&#125;&#125;,                                   // <span class="number">1</span>- 正序；-<span class="number">1</span>- 逆序 </span><br><span class="line">    &#123;$skip：跳过数 &#125;,</span><br><span class="line">    &#123;$limit: 限制数 &#125;,</span><br><span class="line">    &#123;$unwind:"$ 字段"&#125;                                          // 拆分文档 </span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190815190923.png" alt="group 的细分选项">    索引查询： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">db. 集合名字.createIndex (keys, options)  //keys - 字段：<span class="number">1</span> 为指定按升序创建索引，-<span class="number">1</span> 为指定按降序创建索引。</span><br><span class="line">db. 集合名字.createIndex (&#123;"<span class="built_in">title</span>":<span class="number">1</span>,"description":-<span class="number">1</span>&#125;)  // 多字段创建索引 </span><br><span class="line">db. 集合名字.dropIndexes ()           // 删除所有索引 </span><br><span class="line">db. 集合名字.dropIndex ("索引名称")   //  删除指定索引 </span><br><span class="line">db. 集合名字.getIndexes ()            // 查看索引 </span><br><span class="line">db. 集合名字.totalIndexSize ()        // 查看索引大小 </span><br></pre></td></tr></table></figure></p>
<p>   备份和恢复： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mongodump -h IP 地址：端口 -d 数据库名 -o 备份的数据存放位置                            // 备份数据 </span><br><span class="line">mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d 需要恢复的数据库名字 需要恢复的数据所在的位置     // 恢复数据 </span><br></pre></td></tr></table></figure></p>
<h1 id="使用-python-操作-mongodb">6. 使用 Python 操作 MongoDB</h1>
<p>   首先，必须开启 MongoDB 服务，其次必须安装 Pymongo 模块。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient (<span class="string">"mongodb://localhost:27017/"</span>)  <span class="comment"># 连接数据库 </span></span><br><span class="line">mydb = myclient [<span class="string">"数据库名"</span>]                                    <span class="comment"># 创建数据库 </span></span><br><span class="line">mycol = mydb [<span class="string">"集合名"</span>]                                         <span class="comment"># 创建集合 </span></span><br><span class="line">mydict = &#123; <span class="string">"name"</span>: <span class="string">"Google"</span>, <span class="string">"alexa"</span>: <span class="string">"1"</span>, <span class="string">"url"</span>: <span class="string">"https://www.google.com"</span> &#125;</span><br><span class="line">x = mycol.insert_one (mydict)                                   <span class="comment"># 插入一条数据 </span></span><br><span class="line">mylist = [</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"Taobao"</span>, <span class="string">"alexa"</span>: <span class="string">"100"</span>, <span class="string">"url"</span>: <span class="string">"https://www.taobao.com"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"QQ"</span>, <span class="string">"alexa"</span>: <span class="string">"101"</span>, <span class="string">"url"</span>: <span class="string">"https://www.qq.com"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"Facebook"</span>, <span class="string">"alexa"</span>: <span class="string">"10"</span>, <span class="string">"url"</span>: <span class="string">"https://www.facebook.com"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"知乎"</span>, <span class="string">"alexa"</span>: <span class="string">"103"</span>, <span class="string">"url"</span>: <span class="string">"https://www.zhihu.com"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"Github"</span>, <span class="string">"alexa"</span>: <span class="string">"109"</span>, <span class="string">"url"</span>: <span class="string">"https://www.github.com"</span> &#125;</span><br><span class="line">]</span><br><span class="line">y = mycol.insert_many (mylist)                                   <span class="comment"># 插入多条数据 </span></span><br><span class="line">myquery = &#123;<span class="string">"name"</span>: <span class="string">"Taobao"</span>&#125; </span><br><span class="line">mycol.delete_one (myquery)                                       <span class="comment"># 删除一条数据 </span></span><br><span class="line">myquery_list = &#123; <span class="string">"name"</span>: &#123;<span class="string">"$regex"</span>: <span class="string">"^F"</span>&#125; &#125;</span><br><span class="line">m = mycol.delete_many (myquery)                                  <span class="comment"># 删除符合条件的多条数据 </span></span><br><span class="line">myquery_update = &#123; <span class="string">"alexa"</span>: <span class="string">"10000"</span> &#125;</span><br><span class="line">newvalues = &#123; <span class="string">"$set"</span>: &#123; <span class="string">"alexa"</span>: <span class="string">"12345"</span> &#125; &#125;  </span><br><span class="line">mycol.update_one (myquery_update, newvalues)                     <span class="comment"># 修改一条数据 </span></span><br><span class="line">myquery_update_list = &#123; <span class="string">"name"</span>: &#123; <span class="string">"$regex"</span>: <span class="string">"^F"</span> &#125; &#125;</span><br><span class="line">newvalues_list = &#123; <span class="string">"$set"</span>: &#123; <span class="string">"alexa"</span>: <span class="string">"123"</span> &#125; &#125;</span><br><span class="line">n = mycol.update_many (myquery_update_list, newvalues_list)      <span class="comment"># 修改多条数据 </span></span><br><span class="line">a = mycol.find_one ()                           <span class="comment"># 查询符合条件的第一个数据                           </span></span><br><span class="line">b = mycol.find ()                               <span class="comment"># 查询符合条件所有数据 </span></span><br></pre></td></tr></table></figure></p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://www.jianshu.com/p/b32fe4fe45a3" target="_blank" rel="noopener">SQL 和 NoSQL 的区别</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>数据库</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA 中的用户信息交互</title>
    <url>/2019/08/07/VBA%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<p>   在 VBA 中，可以设置对话框实现与用户的信息交互。 <a id="more"></a></p>
<h1 id="msgbox-与-inputbox">1. Msgbox 与 Inputbox</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Msgbox (提示文字，按钮类型，标题文字，帮助文件，帮助文件索引)</span><br></pre></td></tr></table></figure>
<p>   常用的按钮类型如下，按钮类型之间可使用加号连接：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">常数</th>
<th style="text-align: center;">值</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">vbOKOnly</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">只显示 确定 按钮</td>
</tr>
<tr class="even">
<td style="text-align: center;">VbOKCancel</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">显示 确定 及 取消 按钮。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">VbAbortRetryIgnore</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">显示 放弃、重试 及 忽略 按钮。</td>
</tr>
<tr class="even">
<td style="text-align: center;">VbYesNoCancel</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">显示 是、否 及 取消 按钮。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">VbYesNo</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">显示 是 及 否 按钮。</td>
</tr>
<tr class="even">
<td style="text-align: center;">VbRetryCancel</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">显示 重试 及 取消 按钮。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">VbCritical</td>
<td style="text-align: center;">16</td>
<td style="text-align: center;">危险图标</td>
</tr>
<tr class="even">
<td style="text-align: center;">VbQuestion</td>
<td style="text-align: center;">32</td>
<td style="text-align: center;">询问图标</td>
</tr>
<tr class="odd">
<td style="text-align: center;">VbExclamation</td>
<td style="text-align: center;">48</td>
<td style="text-align: center;">警告图示</td>
</tr>
<tr class="even">
<td style="text-align: center;">VbInformation</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">信息图标</td>
</tr>
<tr class="odd">
<td style="text-align: center;">vbDefaultButton1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">第一个按钮是缺省值。</td>
</tr>
<tr class="even">
<td style="text-align: center;">vbDefaultButton2</td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">第二个按钮是缺省值。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">vbDefaultButton3</td>
<td style="text-align: center;">512</td>
<td style="text-align: center;">第三个按钮是缺省值。</td>
</tr>
<tr class="even">
<td style="text-align: center;">vbDefaultButton4</td>
<td style="text-align: center;">768</td>
<td style="text-align: center;">第四个按钮是缺省值。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">vbApplicationModal</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">应用程序强制返回；应用程序一直被挂起，直到用户对消息框作出响应才继续工作。</td>
</tr>
<tr class="even">
<td style="text-align: center;">vbSystemModal</td>
<td style="text-align: center;">4096</td>
<td style="text-align: center;">系统强制返回；全部应用程序都被挂起，直到用户对消息框作出响应才继续工作。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">vbMsgBoxHelpButton</td>
<td style="text-align: center;">16384</td>
<td style="text-align: center;">将 Help 按钮添加到消息框</td>
</tr>
<tr class="even">
<td style="text-align: center;">VbMsgBoxSetForeground</td>
<td style="text-align: center;">65536</td>
<td style="text-align: center;">指定消息框窗口作为前景窗口，就是显示在窗口的最上层</td>
</tr>
<tr class="odd">
<td style="text-align: center;">vbMsgBoxRight</td>
<td style="text-align: center;">524288</td>
<td style="text-align: center;">文本为右对齐</td>
</tr>
<tr class="even">
<td style="text-align: center;">vbMsgBoxRtlReading</td>
<td style="text-align: center;">1048576</td>
<td style="text-align: center;">指定文本应为在希伯来和阿拉伯语系统中的从右到左显示</td>
</tr>
</tbody>
</table>
<p>   常用的返回值如下：</p>
<table>
<thead>
<tr class="header">
<th>常数</th>
<th style="text-align: center;">值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>vbOK</td>
<td style="text-align: center;">1</td>
<td>确定</td>
</tr>
<tr class="even">
<td>vbCancel</td>
<td style="text-align: center;">2</td>
<td>取消</td>
</tr>
<tr class="odd">
<td>vbAbort</td>
<td style="text-align: center;">3</td>
<td>终止</td>
</tr>
<tr class="even">
<td>vbRetry</td>
<td style="text-align: center;">4</td>
<td>重试</td>
</tr>
<tr class="odd">
<td>vbIgnore</td>
<td style="text-align: center;">5</td>
<td>忽略</td>
</tr>
<tr class="even">
<td>vbYes</td>
<td style="text-align: center;">6</td>
<td>是</td>
</tr>
<tr class="odd">
<td>vbNo</td>
<td style="text-align: center;">7</td>
<td>否</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Inputbox (提示文字，标题文字，默认值，左边距，上边距，帮助文件，帮助文件索引)</span><br></pre></td></tr></table></figure>
<p>  Inputbox 方法的类型值也可以使用加号连接，常用的类型值如下：</p>
<table>
<thead>
<tr class="header">
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>公式</td>
</tr>
<tr class="even">
<td>1</td>
<td>数字</td>
</tr>
<tr class="odd">
<td>2</td>
<td>文本 (字符串)</td>
</tr>
<tr class="even">
<td>4</td>
<td>逻辑值 (True 或 False)</td>
</tr>
<tr class="odd">
<td>8</td>
<td>单元格引用，作为一个 Range 对象</td>
</tr>
<tr class="even">
<td>16</td>
<td>错误值，如 #N/A</td>
</tr>
<tr class="odd">
<td>64</td>
<td>数值数组</td>
</tr>
</tbody>
</table>
<h1 id="文件选择对话框getopenfilename">2. 文件选择对话框：GetOpenFilename</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GetOpenFilename (文件类型，优先类型，对话框标题，按钮文字，是否支持多选)</span><br></pre></td></tr></table></figure>
<p>   注意：这个方法并不会真正打开文件，只是返回文件完整路径！ # 3. 操作 Excel 中的所有对话框：Application.Dialogs <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dialogs (对话框)</span><br></pre></td></tr></table></figure></p>
<h1 id="案例多文件合并">4. 案例：多文件合并</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub test ()</span><br><span class="line">Dim str ()</span><br><span class="line">Dim i As Integer</span><br><span class="line">Dim wb, wb1 As Workbook</span><br><span class="line">Dim sht As Worksheet</span><br><span class="line"></span><br><span class="line">On Error Resume Next &apos; 这一句上课时候没加，加上以后防止点了取消发生的错误 </span><br><span class="line">Set wb1 = ActiveWorkbook</span><br><span class="line">Set sht1 = ActiveSheet</span><br><span class="line">On Error Resume Next</span><br><span class="line">str = Application.GetOpenFilename (&quot;Excel 数据文件，*.xls*&quot;, , , , True)</span><br><span class="line"></span><br><span class="line">    For i = LBound (str) To UBound (str)</span><br><span class="line">        Set wb = Workbooks.Open (str (i))</span><br><span class="line">        For Each sht In wb.Sheets</span><br><span class="line">            sht.Copy after:=wb1.Sheets (wb1.Sheets.Count)</span><br><span class="line">            wb1.Sheets (wb1.Sheets.Count).Name = Split (wb.Name, &quot;.&quot;)(0) &amp; sht.Name</span><br><span class="line">        Next</span><br><span class="line">        wb.Close</span><br><span class="line">    Next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>窗体与控件</title>
    <url>/2019/08/06/%E7%AA%97%E4%BD%93%E4%B8%8E%E6%8E%A7%E4%BB%B6/</url>
    <content><![CDATA[<p>   窗体是 vba 中十分有用的东西，利用它可以做出用户界面。 <a id="more"></a></p>
<h1 id="操作用户窗体">1. 操作用户窗体</h1>
<h2 id="创建用户窗体">1.1 创建用户窗体</h2>
<p>   在 VBA 中，只需在工程栏：右键：插入 - 用户窗体，即可插入一个用户窗体。</p>
<h2 id="用户窗体的常见属性">1.2 用户窗体的常见属性</h2>
<p>   在用户窗体上，右键：属性可以查看和修改用户窗体的属性。    用户窗体的常见属性包括：Caption - 标题、Visible - 可见性、Enabled - 可用性和 ShowModal - 显示模式。</p>
<h2 id="用户窗体的常见方法">1.3 用户窗体的常见方法</h2>
<p>   用户窗体的常见方法包括：Show - 显示和 Hide - 隐藏。</p>
<h2 id="用户窗体的常用事件">1.4 用户窗体的常用事件</h2>
<p>   用户窗体的常见事件包括：UserForm_Activate - 激活和 UserForm_QueryClose - 退出。</p>
<h1 id="用户窗体中的控件">2. 用户窗体中的控件</h1>
<h2 id="文本框控件textbox">2.1 文本框控件：TextBox</h2>
<p>   文本框控件的常用属性包括：Value - 返回值、Visible - 可见性、PasswordChar - 密码字符、Enabled - 可用性和 TabIndex - 按下 Tab 键时的切换顺序。</p>
<h2 id="复选框控件checkbox">2.2 复选框控件：CheckBox</h2>
<p>   复选框控件的常用属性包括：Value - 返回值、Visible - 可见性和 Enabled - 可用性。</p>
<h2 id="复合框控件combobox">2.3 复合框控件：ComboBox</h2>
<p>   复合框控件的常用属性包括：Enable - 可用性、Value - 返回值、Visible - 可见性和 List - 数据源列表。    复合框控件的常用方法包括：AddItem - 增加一个下拉项目、RemoveItem - 移除一个项目和 Clear。</p>
<h2 id="列表框控件listbox">2.4 列表框控件：ListBox</h2>
<p>   列表框控件的常用属性包括：Enable - 可用性、Value - 返回值、Visible - 可见性、ColumnCount - 列和 List - 数据源列表。    列表框控件的常用方法包括：AddItem - 增加一个下拉项目、RemoveItem - 移除一个项目和 Clear。</p>
<h1 id="案例会员信息查询">3. 案例：会员信息查询</h1>
<p>   首先，需要插入一个文本框、命令按钮和一个列表框，并且分别在右侧插入 label, 如下图所示。 <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190806110810.png">    然后，选中文本框：右键：查看代码，在右上角选中 change, 插入以下代码： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dim arr ()</span><br><span class="line">If Len (TextBox1.Value) &gt;= 4 Then</span><br><span class="line">    Me.ListBox1.Clear</span><br><span class="line">    arr = Sheet1.Range (&quot;i2:i&quot; &amp; Sheet1.Range (&quot;a65536&quot;).End (xlUp).Row)</span><br><span class="line">    </span><br><span class="line">    For i = LBound (arr) To UBound (arr)</span><br><span class="line">        If InStr (arr (i, 1), Me.TextBox1.Value) &gt; 0 Then</span><br><span class="line">            Me.ListBox1.AddItem arr (i, 1)</span><br><span class="line">        End If</span><br><span class="line">    Next</span><br><span class="line">    If Me.ListBox1.ListCount &gt; 0 Then</span><br><span class="line">    Me.ListBox1.Visible = True</span><br><span class="line">    End If</span><br><span class="line">Else</span><br><span class="line">    Me.ListBox1.Clear</span><br><span class="line">    Me.ListBox1.Visible = False</span><br></pre></td></tr></table></figure></p>
<p>   之后，选中列表框控件：右键：查看代码，在右上角选中 Click, 插入以下代码: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Me.TextBox1 = Me.ListBox1.Value</span><br><span class="line">Me.ListBox1.Visible = False</span><br></pre></td></tr></table></figure></p>
<p>   上述两端代码实现了联想输入的功能，但并没有返回查询结果，接下来需要在标签栏中输入内容。为此，需要选中命令按钮：右键：查看代码，在右上角选中 Click, 插入以下代码: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dim rng As Range</span><br><span class="line"></span><br><span class="line">&apos; 用 find 方法做 </span><br><span class="line">Set rng = Sheet1.Range (&quot;i1:i1000&quot;).Find (Me.TextBox1.Value)</span><br><span class="line">If rng Is Nothing Then</span><br><span class="line">    MsgBox &quot; 无该用户 & quot;</span><br><span class="line">Else</span><br><span class="line">    Me.Label3.Caption = rng.Offset (0, -6)</span><br><span class="line">    Me.Label4.Caption = rng.Offset (0, -5)</span><br><span class="line">    Me.Label6.Caption = rng.Offset (0, -4)</span><br><span class="line">    Me.Label8.Caption = rng</span><br><span class="line">    Me.Label10.Caption = rng.Offset (0, -3)</span><br><span class="line">    Me.Label12.Caption = rng.Offset (0, -2)</span><br><span class="line">    Me.Label13.Caption = rng.Offset (0, -1)</span><br><span class="line">End If</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>用 stata 操作矩阵</title>
    <url>/2019/08/04/%E7%94%A8stata%E6%93%8D%E4%BD%9C%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<p>   矩阵是数学运算中的一个重要部分，stata 也可以对矩阵进行相应的操作。 <a id="more"></a></p>
<h1 id="矩阵的基本操作">1. 矩阵的基本操作</h1>
<h2 id="定义矩阵">1.1 定义矩阵</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">matrix</span> 矩阵名 = (1,2,3 \ 4,5,6)  <span class="comment">// 规则：逗号分列；反斜线分行 </span></span><br></pre></td></tr></table></figure>
<h2 id="管理矩阵">1.2 管理矩阵</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">matrix</span> <span class="keyword">list</span> 矩阵名 [, noblank nohalf noheader nonames <span class="keyword">format</span>(% fmt) title (string) nodotz]               <span class="comment">// 列示矩阵 </span></span><br><span class="line"><span class="comment">* 更为细致地列示矩阵 </span></span><br><span class="line">#delimit ;</span><br><span class="line"><span class="keyword">matrix</span> Htest = ( 12.30,  2,  .00044642  \ </span><br><span class="line">                  2.17,  1,  .35332874  \                    </span><br><span class="line">                  8.81,  3,  .04022625  \ </span><br><span class="line">                 20.05,  6,  .00106763  ) ;</span><br><span class="line">#delimit cr</span><br><span class="line"><span class="keyword">matrix</span> rownames Htest = trunk length weight overall  <span class="comment">// 定义行名 </span></span><br><span class="line"><span class="keyword">matrix</span> colnames Htest = chi2 df p                    <span class="comment">// 定义列名 </span></span><br><span class="line"><span class="keyword">matlist</span> Htest                                        <span class="comment">// 添加边框 </span></span><br><span class="line"><span class="keyword">matrix</span> <span class="keyword">rename</span> 原矩阵名 新矩阵名    <span class="comment">// 矩阵更名  </span></span><br><span class="line"><span class="comment">* 矩阵的行数和列数 </span></span><br><span class="line"><span class="keyword">matrix</span> 矩阵名 = (1,2,3 \ 4,5,6)</span><br><span class="line"><span class="keyword">scalar</span> ra = <span class="built_in">rowsof</span>(矩阵名)</span><br><span class="line"><span class="keyword">scalar</span> <span class="keyword">ca</span> = <span class="built_in">colsof</span>(矩阵名)</span><br><span class="line"><span class="keyword">dis</span> <span class="keyword">in</span> <span class="keyword">g</span> <span class="string">"矩阵 矩阵名 的行数是:"</span> <span class="keyword">in</span> y ra </span><br><span class="line"><span class="keyword">dis</span> <span class="keyword">in</span> <span class="keyword">g</span> <span class="string">"矩阵 矩阵名 的列数是:"</span> <span class="keyword">in</span> y <span class="keyword">ca</span>  </span><br><span class="line"><span class="keyword">matrix</span> <span class="keyword">dir</span>                   <span class="comment">// 查找矩阵 </span></span><br><span class="line"><span class="keyword">matrix</span> <span class="keyword">drop</span> 矩阵名           <span class="comment">// 删除矩阵       </span></span><br><span class="line"><span class="keyword">display</span> <span class="built_in">matmissing</span>(矩阵名)   <span class="comment">// 显示矩阵缺漏值个数 </span></span><br><span class="line"><span class="comment">* 矩阵的行名和列名 </span></span><br><span class="line"><span class="keyword">matrix</span> rownames 矩阵名 = 行名 (空格分隔)       <span class="comment">// 行名 </span></span><br><span class="line"><span class="keyword">matrix</span> colnames 矩阵名 = 列名 (空格分隔)       <span class="comment">// 列名 </span></span><br><span class="line"><span class="comment">* 矩阵的选择 </span></span><br><span class="line"><span class="keyword">matrix</span> 新矩阵名 = 矩阵名 [行索引，列索引]        <span class="comment">// 中间省略：.. 全部省略：.... 尾部省略：...</span></span><br><span class="line"><span class="keyword">matrix</span> 矩阵中想要修改的元素 = 修改值           <span class="comment">// 如果想要修改区域，只需在等号左侧填入修改区域左上角的元素位置即可 </span></span><br><span class="line"><span class="comment">* 矩阵的合并 </span></span><br><span class="line"><span class="keyword">matrix</span> aa  = [a1, a2]   <span class="comment">// 横向合并两个矩阵 </span></span><br><span class="line"><span class="keyword">matrix</span> aaa = [a1 \ a2]  <span class="comment">// 纵向追加两个矩阵 </span></span><br><span class="line"><span class="comment">* 常用矩阵的定义 </span></span><br><span class="line"><span class="keyword">matrix</span> I = <span class="built_in">I</span>(<span class="keyword">n</span>)         <span class="comment">// 单位矩阵 </span></span><br><span class="line"><span class="keyword">matrix</span> 矩阵名 = <span class="built_in">J</span>(行数，列数，常数)</span><br><span class="line"><span class="keyword">matrix</span> r3 = <span class="built_in">matuniform</span>(10,4)  <span class="comment">// 生成一个 10*4 的随机数矩阵，随机数区间为 (0,1)</span></span><br><span class="line"><span class="comment">* 将一维矩阵转换成对角矩阵 </span></span><br><span class="line"><span class="keyword">mat</span> <span class="keyword">u</span> = <span class="built_in">J</span>(5,1,-0.5)</span><br><span class="line"><span class="keyword">mat</span> du = <span class="built_in">diag</span>(<span class="keyword">u</span>)  <span class="comment">// 取出对角元素 </span></span><br><span class="line"><span class="comment">* 将变量转换为矩阵 </span></span><br><span class="line"><span class="keyword">mkmat</span> <span class="keyword">varlist</span> [<span class="keyword">if</span>] [<span class="keyword">in</span>] [, <span class="built_in">matrix</span>(<span class="keyword">matname</span>) nomissing   <span class="comment">// 单变量：矩阵名默认为变量名，选项 nomissing 表示仅包含非缺漏值 </span></span><br><span class="line"><span class="comment">* 将矩阵转化为变量 </span></span><br><span class="line">xsvmat 矩阵名，<span class="keyword">list</span>(,)                                 <span class="comment">// 以变量方式列示矩阵的内容 </span></span><br><span class="line"><span class="comment">* 用矩阵存储统计结果 </span></span><br><span class="line"> makematrix [matrix_name], from (results_list) [production_options] [list_options]:[<span class="string">"] command ["</span>] [<span class="keyword">varlist</span>] ... [, options ]</span><br><span class="line"><span class="comment"> * 矩阵运算 </span></span><br><span class="line"> mgen exprlist , <span class="keyword">in</span>(<span class="keyword">matname</span>) <span class="keyword">out</span>(<span class="keyword">matname</span>) [ common (term) ]   <span class="comment">//in - 进行操作的矩阵 out - 新矩阵 exprlist：数学表达式 </span></span><br><span class="line"><span class="comment"> * 保存矩阵 </span></span><br><span class="line"> matsave <span class="keyword">matrix</span> [, <span class="keyword">replace</span> saving dropall path (path) <span class="keyword">type</span>(<span class="keyword">type</span>) ]  <span class="comment">// 保存到 dta 中 </span></span><br><span class="line"> mat2txt , <span class="built_in">matrix</span>(matrixname) saving (filename) [ title (text) <span class="keyword">note</span>(text) <span class="keyword">format</span>(formatlist) <span class="keyword">replace</span> <span class="keyword">append</span> ] <span class="comment">// 保存为 txt 格式 </span></span><br><span class="line"> dataout &lt;using filename&gt; [, options]   <span class="comment">//word: 转成 rtf 格式的 word 文档 excel: 转成 xml 格式的 excel 文档 </span></span><br></pre></td></tr></table></figure>
<h2 id="操作矩阵">1.3 操作矩阵</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 基本运算 </span></span><br><span class="line"><span class="keyword">matrix</span> A = (1,2\3,4)</span><br><span class="line"><span class="keyword">matrix</span> B = (5,7\9,2)</span><br><span class="line"><span class="keyword">matrix</span> C = A+B             <span class="comment">// 加法 </span></span><br><span class="line"><span class="keyword">matrix</span> B = A-B             <span class="comment">// 减法 </span></span><br><span class="line"><span class="keyword">matrix</span> X = (1,1\2,5\8,0\4,5)</span><br><span class="line"><span class="keyword">matrix</span> C = 3*X*A'*B        <span class="comment">// 乘法 </span></span><br><span class="line"><span class="keyword">matrix</span> <span class="keyword">D</span> = (X'*X - A'*A)/4</span><br><span class="line"><span class="keyword">matrix</span> <span class="keyword">D</span> = A#<span class="keyword">D</span>               <span class="comment">// 直乘 </span></span><br><span class="line"><span class="keyword">matrix</span> <span class="keyword">E</span> = <span class="built_in">hadamard</span>(A,B)     <span class="comment">// Hadamard 乘法 </span></span><br><span class="line"><span class="comment">* 矩阵元素的数学变换 </span></span><br><span class="line">math B = function (A)         <span class="comment">// 可供调用的 function： help math functions</span></span><br><span class="line">mgen exprlist , <span class="keyword">in</span>(<span class="keyword">matname</span>) <span class="keyword">out</span>(<span class="keyword">matname</span>) [ common (term) ]  <span class="comment">// 分列变换："v1=ln (c1)" 不可以写为 "v1 = ln (c1)"</span></span><br><span class="line"><span class="comment">* 矩阵与单值的运算 </span></span><br><span class="line"><span class="keyword">scalar</span> c = 5                 <span class="comment">// 单值 c</span></span><br><span class="line"><span class="keyword">mat</span> <span class="keyword">D</span> = <span class="built_in">J</span>(4,4,1)             <span class="comment">// 矩阵 D</span></span><br><span class="line"><span class="keyword">mat</span> Dc = <span class="keyword">D</span>*c                 <span class="comment">//mat cD = c*D   矩阵与单值相乘 </span></span><br><span class="line"><span class="keyword">mat</span> D_c = <span class="keyword">D</span>/c                <span class="comment">// 矩阵与单值相除 </span></span><br><span class="line"><span class="comment">* 矩阵的转置：行列互换 </span></span><br><span class="line"><span class="keyword">matrix</span> A = (-1, 2 \ 3, 4 )</span><br><span class="line"><span class="keyword">mat</span> At = A'                  <span class="comment">// 转置运算优先于乘法运算 </span></span><br><span class="line"><span class="comment">* 矩阵的逆矩阵 </span></span><br><span class="line"><span class="keyword">scalar</span> detA = <span class="built_in">det</span>(A)         <span class="comment">// 矩阵的行列式 </span></span><br><span class="line"><span class="keyword">dis</span> <span class="built_in">issym</span>(A)                 <span class="comment">// 判断一个矩阵是否为对称矩阵 </span></span><br><span class="line"><span class="keyword">mat</span> invA = <span class="built_in">inv</span>(A)            <span class="comment">// 求矩阵的逆矩阵 </span></span><br><span class="line"><span class="comment">* 矩阵的向量化 </span></span><br><span class="line"><span class="keyword">mat</span> vA = <span class="built_in">vec</span>(A)</span><br><span class="line"><span class="keyword">mat</span> dA = <span class="built_in">vecdiag</span>(A)          <span class="comment">// 向量化方阵的对角元素 </span></span><br><span class="line"><span class="comment">* 矩阵的对角值 (trace)</span></span><br><span class="line"><span class="keyword">matrix</span> Atr = <span class="built_in">trace</span>(A)        <span class="comment">// 方阵的对角元素之和 </span></span><br></pre></td></tr></table></figure>
<h1 id="矩阵的进阶操作">2. 矩阵的进阶操作</h1>
<h2 id="交乘矩阵">2.1 交乘矩阵</h2>
<p>  matrix accum 的定义：atrix accum (A) = A'*A，其中，A = (x1,x2,x3……)；matrix vecaccum 的定义：matrix vecaccum (A) = x1'*X, 其中，X = (x2,x3,……)。 <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">matrix</span> accum A = <span class="keyword">varlist</span> [<span class="keyword">if</span>] [<span class="keyword">in</span>] [weight] [, noconstant deviations <span class="keyword">means</span>(<span class="keyword">M</span>) absorb (varname)]  <span class="comment">//matrix accum 语法 </span></span><br><span class="line"><span class="keyword">matrix</span> vecaccum a = <span class="keyword">varlist</span> [<span class="keyword">if</span>] [<span class="keyword">in</span>] [weight] [, noconstant]                                   <span class="comment">//matrix vecaccum 语法 </span></span><br><span class="line"><span class="comment">*- 几个重要选项：</span></span><br><span class="line"><span class="comment">*  (1) noconstant 不在 X 矩阵中自动附加常数项；</span></span><br><span class="line"><span class="comment">*  (2) deviation  采用离差的形式 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">*-eg1- 线性模型的 OLS 估计 </span></span><br><span class="line"><span class="comment">*- 目的：求取 b = inv (X'X)*X'y</span></span><br><span class="line"><span class="comment">* 其中，y = price, </span></span><br><span class="line"><span class="comment">*       X =(weight,mpg,Cons)</span></span><br><span class="line"><span class="keyword">sysuse</span> auto, <span class="keyword">clear</span></span><br><span class="line"><span class="comment">* 方法 1：仅使用 matrix accum 命令 </span></span><br><span class="line"><span class="comment">* 思路：若 A = (y, X)， 则 </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*                                       [ y'y  y'X ]</span></span><br><span class="line"><span class="comment">*   mat accum (A) = S = (y, X)'(y, X) = [          ]</span></span><br><span class="line"><span class="comment">*                                       [ X'y  X'X ]</span></span><br><span class="line"><span class="keyword">matrix</span> accum S = price weight mpg  <span class="comment">//y=price, X=[weight mpg]</span></span><br><span class="line"><span class="keyword">mat</span> <span class="keyword">list</span> <span class="built_in">S</span></span><br><span class="line"><span class="keyword">matrix</span> XX = S [2..., 2...] </span><br><span class="line"><span class="keyword">matrix</span> Xy = S [2..., 1]</span><br><span class="line"><span class="keyword">mat</span> b = <span class="built_in">inv</span>(XX)*Xy</span><br><span class="line"><span class="keyword">mat</span> <span class="keyword">list</span> b</span><br><span class="line"><span class="keyword">reg</span> price weight mpg,nohead       <span class="comment">// 检验上述结果 </span></span><br><span class="line"><span class="comment">* 方法 2：结合使用 matrix accum 和 matrix vecaccum</span></span><br><span class="line"><span class="keyword">mat</span> accum XX = weight mpg</span><br><span class="line"><span class="keyword">mat</span> vecaccum <span class="keyword">yX</span> = price weight mpg</span><br><span class="line"><span class="keyword">mat</span> Xy = <span class="keyword">yX</span>'</span><br><span class="line"><span class="keyword">mat</span> b = <span class="built_in">inv</span>(XX)*Xy</span><br><span class="line"><span class="keyword">mat</span> <span class="keyword">list</span> b</span><br><span class="line"><span class="keyword">reg</span> price weight mpg, noheader   <span class="comment">// 检验上述结果 </span></span><br><span class="line"><span class="comment">* -eg2- 获取变量的相关系数矩阵 </span></span><br><span class="line"><span class="keyword">sysuse</span> auto, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">corr</span> price weight mpg <span class="built_in">length</span></span><br><span class="line"><span class="comment">* 加权交乘矩阵   -mat glsaccum-</span></span><br><span class="line"><span class="keyword">matrix</span> glsaccum A = <span class="keyword">varlist</span> [<span class="keyword">if</span>] [<span class="keyword">in</span>] [weight], <span class="built_in">group</span>(groupvar) glsmat (W|stringvar) row (rowvar) [noconstant]   <span class="comment">// 基本语法 </span></span><br><span class="line"><span class="comment">*-mat glsaccum 的定义：mat glsaccum (X) = S = X'BX</span></span><br><span class="line"><span class="comment">* 其中，B 为权重矩阵，定义如下：</span></span><br><span class="line"><span class="comment">*       [ W_1   0   ...   0  ]</span></span><br><span class="line"><span class="comment">*       |  0   W_2  ...   0  |</span></span><br><span class="line"><span class="comment">*   B = |  .    .    .    .  |    W_k (k=1,2,...,K) 表示第 k 组观察值的权重矩阵，是一个方阵 </span></span><br><span class="line"><span class="comment">*       |  .    .     .   .  |</span></span><br><span class="line"><span class="comment">*       [  0    0   ...  W_k ]</span></span><br><span class="line"><span class="comment">*  若 X 也根据组别定义，则可表示为：</span></span><br><span class="line"><span class="comment">*        [ X_1 ]</span></span><br><span class="line"><span class="comment">*        | X_2 | </span></span><br><span class="line"><span class="comment">*    X = |  .  |</span></span><br><span class="line"><span class="comment">*        |  .  | </span></span><br><span class="line"><span class="comment">*        [ X_k ]</span></span><br><span class="line"><span class="comment">*  由此可以更为细致的了解到 glsaccum 的定义方式：X'BX = X1'W1X1 + X2'W2X2 + ... + X_k'*W_k*X_k </span></span><br><span class="line"><span class="comment">*- 应用举例：White (1980) 异方差稳健性标准误的计算 </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*  Var (b) = inv (X'X)*(X'WX)*inv (X'X)  // White (1980) 稳健性方差 - 协方差矩阵 </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  其中，</span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*       [ e1^2   0    ...    0  ]</span></span><br><span class="line"><span class="comment">*       |  0    e2^2  ...    0  |</span></span><br><span class="line"><span class="comment">*   W = |  .     .     .     .  |</span></span><br><span class="line"><span class="comment">*       |  .     .     .     .  |</span></span><br><span class="line"><span class="comment">*       [  0     0    ...  eN^2 ]  NXN 矩阵 </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  ei 表示第 i 个观察值对应的残差 </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  问题的关键：求得 (X'WX) 矩阵即可，可采用 -mat glsaccum- 命令  </span></span><br><span class="line"><span class="keyword">sysuse</span> auto, <span class="keyword">clear</span></span><br><span class="line"><span class="comment">*-1 获得 OLS 估计值 </span></span><br><span class="line"><span class="keyword">mat</span> accum XX = weight mpg</span><br><span class="line"><span class="keyword">mat</span> vecaccum <span class="keyword">yX</span> = price weight mpg</span><br><span class="line"><span class="keyword">mat</span> Xy = <span class="keyword">yX</span>'</span><br><span class="line"><span class="keyword">mat</span> b = <span class="built_in">inv</span>(XX)*Xy</span><br><span class="line"><span class="keyword">mat</span> <span class="keyword">list</span> b</span><br><span class="line"><span class="comment">*-2 求取残差之平方向量：e2</span></span><br><span class="line"><span class="keyword">mkmat</span> price, <span class="keyword">mat</span>(y)</span><br><span class="line"><span class="keyword">gen</span> <span class="keyword">cons</span> = 1</span><br><span class="line"><span class="keyword">mkmat</span> wei len mpg <span class="keyword">cons</span>, <span class="keyword">mat</span>(X) <span class="comment">// 注意附加常数项 </span></span><br><span class="line"><span class="keyword">mat</span> <span class="keyword">e</span> = y - X*b                <span class="comment">// 残差向量 </span></span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>相对重要性分析：domin 命令</title>
    <url>/2019/08/02/%E7%9B%B8%E5%AF%B9%E9%87%8D%E8%A6%81%E6%80%A7%E5%88%86%E6%9E%90%EF%BC%9Adomin%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>   在实证经济学中，一个重要的问题是探究不同的解释变量 (explanatory variable) 对被解释变量 (dependent variable) 的方差的具体贡献程度，这就是相对重要性分析。 <a id="more"></a> # 1. domin 命令 <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># 基本语法 </span><br><span class="line">domin depvar indepvars [<span class="keyword">if</span>] [<span class="keyword">in</span>] [weight], sets ((<span class="keyword">varlist</span>) (<span class="keyword">varlist</span>) ...)</span><br><span class="line"># 实证运用：两变量情形 </span><br><span class="line"><span class="keyword">sysuse</span> <span class="string">"auto.dta"</span>, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">list</span> <span class="keyword">in</span> 1/10</span><br><span class="line">domin price weight length </span><br><span class="line"># 实证运用：多变量情形 </span><br><span class="line"><span class="keyword">sysuse</span> <span class="string">"nlsw88.dta"</span>, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">list</span> wage age hours tenure married <span class="keyword">in</span> 1/10</span><br><span class="line"><span class="keyword">reg</span> wage age hours tenure married</span><br><span class="line">domin wage age hours tenure married</span><br><span class="line">domin wage age hours tenure married, sets ((i.occupation) (i.industry) (i.race))</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>stata</category>
      </categories>
      <tags>
        <tag>Stata</tag>
        <tag>命令</tag>
        <tag>相对重要性</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 ActiveX 控件</title>
    <url>/2019/08/01/%E4%BD%BF%E7%94%A8ActiveX%E6%8E%A7%E4%BB%B6/</url>
    <content><![CDATA[<p>  ActiveX 控件比表单控件有更多的选项，可以实现更多的功能。 <a id="more"></a></p>
<h1 id="常用的-activex-控件">1. 常用的 ActiveX 控件</h1>
<h2 id="按钮控件commandbutton">1.1 按钮控件：CommandButton</h2>
<p>   按钮控件的常用属性有：Enabled（可用性）、Caption（标题）和 Visible（可见性）。</p>
<h2 id="标签控件label">1.2 标签控件：Label</h2>
<p>   标签控件的常用属性有：Enabled（可用性）、Caption（标题）和 Visible（可见性）。</p>
<h2 id="单选按钮控件optionbutton">1.3 单选按钮控件：OptionButton</h2>
<p>   单选按钮控件的常用属性有：Enabled（可用性）、Caption（标题）、Visible（可见性）、GroupName（组名）和 Value（返回值）。</p>
<h2 id="微调按钮控件spinbutton">1.4 微调按钮控件：SpinButton</h2>
<p>   微调按钮控件的常用属性有：Enabled（可用性）、Visible（可见性）、Value（返回值）、MIN（最小值）和 MAX（最大值）。</p>
<h1 id="案例创建考试系统">2. 案例：创建考试系统</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub csh ()</span><br><span class="line">Sheet2.SpinButton1.Max = Sheet3.Range (&quot;a65536&quot;).End (xlUp).Row - 1</span><br><span class="line">End Sub</span><br><span class="line">Sub xieru ()</span><br><span class="line">Dim i As Integer &apos; 题号 </span><br><span class="line">i = Sheet2.SpinButton1.Value</span><br><span class="line">&apos; 写入数据 </span><br><span class="line">With Sheet2</span><br><span class="line">    &apos; 清空单选按钮 </span><br><span class="line">    .OptionButton1.Value = False</span><br><span class="line">    .OptionButton2.Value = False</span><br><span class="line">    .OptionButton3.Value = False</span><br><span class="line">    .OptionButton4.Value = False</span><br><span class="line">    &apos; 写入题目 </span><br><span class="line">    .Label2.Caption = i</span><br><span class="line">    .Label3 = Sheet3.Range (&quot;a&quot; &amp; i + 1)</span><br><span class="line">    .Label4 = Sheet3.Range (&quot;b&quot; &amp; i + 1)</span><br><span class="line">    .Label5 = Sheet3.Range (&quot;c&quot; &amp; i + 1)</span><br><span class="line">    .Label6 = Sheet3.Range (&quot;d&quot; &amp; i + 1)</span><br><span class="line">    .Label7 = Sheet3.Range (&quot;e&quot; &amp; i + 1)</span><br><span class="line">    &apos; 查看是否有 CD 两个选项 </span><br><span class="line">    If .Label6.Caption = &quot;&quot; Then</span><br><span class="line">       .OptionButton3.Visible = False</span><br><span class="line">    Else</span><br><span class="line">        .OptionButton3.Visible = True</span><br><span class="line">    End If</span><br><span class="line">    </span><br><span class="line">    If .Label7.Caption = &quot;&quot; Then</span><br><span class="line">       .OptionButton4.Visible = False</span><br><span class="line">    Else</span><br><span class="line">        .OptionButton4.Visible = True</span><br><span class="line">    End If</span><br><span class="line">    &apos; 返回之前的答案 </span><br><span class="line">    If Sheet3.Range (&quot;g&quot; &amp; i + 1) = &quot;A&quot; Then</span><br><span class="line">        .OptionButton1.Value = True</span><br><span class="line">    ElseIf Sheet3.Range (&quot;g&quot; &amp; i + 1) = &quot;B&quot; Then</span><br><span class="line">        .OptionButton2.Value = True</span><br><span class="line">    ElseIf Sheet3.Range (&quot;g&quot; &amp; i + 1) = &quot;C&quot; Then</span><br><span class="line">        .OptionButton3.Value = True</span><br><span class="line">    ElseIf Sheet3.Range (&quot;g&quot; &amp; i + 1) = &quot;D&quot; Then</span><br><span class="line">        .OptionButton4.Value = True</span><br><span class="line">    End If    </span><br><span class="line">End With</span><br><span class="line"></span><br><span class="line">End Sub</span><br><span class="line">Sub chengji ()</span><br><span class="line">Dim i, k As Integer</span><br><span class="line">For i = 1 To Sheet2.SpinButton1.Max</span><br><span class="line">    If Sheet3.Range (&quot;g&quot; &amp; i + 1) = Sheet3.Range (&quot;f&quot; &amp; i + 1) Then</span><br><span class="line">        k = k + 1</span><br><span class="line">    End If</span><br><span class="line">Next</span><br><span class="line"></span><br><span class="line">MsgBox &quot; 共做对 & quot; &amp; k &amp; &quot; 道题 & quot;</span><br><span class="line"></span><br><span class="line">Sheet2.OptionButton1.Enabled = False</span><br><span class="line">Sheet2.OptionButton2.Enabled = False</span><br><span class="line">Sheet2.OptionButton3.Enabled = False</span><br><span class="line">Sheet2.OptionButton4.Enabled = False</span><br><span class="line">Sheet2.CommandButton3.Enabled = False</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Private Sub CommandButton3_Click ()</span><br><span class="line">Call chengji</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Private Sub OptionButton1_Click ()</span><br><span class="line">Sheet3.Range (&quot;g&quot; &amp; Sheet2.SpinButton1.Value + 1) = &quot;A&quot;</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Private Sub OptionButton2_Click ()</span><br><span class="line">Sheet3.Range (&quot;g&quot; &amp; Sheet2.SpinButton1.Value + 1) = &quot;B&quot;</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Private Sub OptionButton3_Click ()</span><br><span class="line">Sheet3.Range (&quot;g&quot; &amp; Sheet2.SpinButton1.Value + 1) = &quot;C&quot;</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Private Sub OptionButton4_Click ()</span><br><span class="line">Sheet3.Range (&quot;g&quot; &amp; Sheet2.SpinButton1.Value + 1) = &quot;D&quot;</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Private Sub SpinButton1_Change ()</span><br><span class="line">Call xieru</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中的正则表达式</title>
    <url>/2019/07/31/Python%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>  Python 自 1.5 版本起增加了 re 模块，它提供 Perl 风格的正则表达式模式，re 模块使 Python 语言拥有全部的正则表达式功能。 <a id="more"></a></p>
<h1 id="re-模块">1. re 模块</h1>
<h2 id="re.match-函数">1.1 re.match 函数</h2>
<p>  re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match () 就返回 none。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match (pattern, string, flags=<span class="number">0</span>) //pattern - 匹配的正则表达式；string - 要匹配的字符串；flags 控制正则表达式的匹配方式。</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr class="header">
<th>修饰符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>re.I</td>
<td>忽略大小写</td>
</tr>
<tr class="even">
<td>re.L</td>
<td>表示特殊字符集 , , , , , 依赖于当前环境</td>
</tr>
<tr class="odd">
<td>re.M</td>
<td>多行模式</td>
</tr>
<tr class="even">
<td>re.S</td>
<td>即为。并且包括换行符在内的任意字符（. 不包括换行符）</td>
</tr>
<tr class="odd">
<td>re.U</td>
<td>表示特殊字符集 , , , , , , , 依赖于 Unicode</td>
</tr>
<tr class="even">
<td>re.X</td>
<td>为了增加可读性，忽略空格和 # 后面的注释</td>
</tr>
</tbody>
</table>
<p>   对于 match 对象，如果正则表达式中定义了组，就可以在 Match 对象上用 group () 方法提取出子串来。注意到 group (0) 永远是原始字符串，group (1)、group (2)…… 表示第 1、2、…… 个子串。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="string">'19:05:30'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match (<span class="string">r'^(0 [0-9]|1 [0-9]|2 [0-3]|[0-9])\:(0 [0-9]|1 [0-9]|2 [0-9]|3 [0-9]|4 [0-9]|5 [0-9]|[0-9])\:(0 [0-9]|1 [0-9]|2 [0-9]|3 [0-9]|4 [0-9]|5 [0-9]|[0-9])$'</span>, t)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups ()</span><br><span class="line">(<span class="string">'19'</span>, <span class="string">'05'</span>, <span class="string">'30'</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="re.search-方法">1.2 re.search 方法</h2>
<p>  re.search 扫描整个字符串并返回第一个成功的匹配。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.search (pattern, string, flags=<span class="number">0</span>)  //pattern - 匹配的正则表达式；string - 要匹配的字符串；flags 控制正则表达式的匹配方式。</span><br></pre></td></tr></table></figure></p>
<p>  re.match 与 re.search 的区别是：re.match 只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回 None；而 re.search 匹配整个字符串，直到找到一个匹配。</p>
<h2 id="re.sub检索和替换">1.3 re.sub：检索和替换</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub (pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)  //repl : 替换的字符串，也可为一个函数；count : 模式匹配后替换的最大次数，默认 <span class="number">0</span> 表示替换所有的匹配。</span><br></pre></td></tr></table></figure>
<h2 id="re.compile-函数编译正则表达式">1.4 re.compile 函数：编译正则表达式</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.compile (pattern [, flags])</span><br></pre></td></tr></table></figure>
<h2 id="findall">1.5 findall</h2>
<p>   在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">findall (string [, pos [, endpos]])  //pos : 可选参数，指定字符串的起始位置，默认为 <span class="number">0</span>; endpos : 可选参数，指定字符串的结束位置，默认为字符串的长度。</span><br></pre></td></tr></table></figure></p>
<h2 id="re.finditer">1.6 re.finditer</h2>
<p>   和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.finditer (pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="re.split-分割字符串">1.7 re.split: 分割字符串</h2>
<p>  split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.split (pattern, string [, maxsplit=<span class="number">0</span>, flags=<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p>
<hr>
<p><a href="http://tool.oschina.net/regex/#" target="_blank" rel="noopener">1. 常用的正则表达式</a> <a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">2. 正则表达式手册</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 VBA 数组</title>
    <url>/2019/07/31/%E4%BD%BF%E7%94%A8VBA%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>   数组的使用会大幅度提升 VBA 代码的运行速度，所谓 VBA 数组是指存储一组数据的数据空间，有行有列。 <a id="more"></a></p>
<h1 id="声明数组">1. 声明数组</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos; 定义一维数组并赋值 </span><br><span class="line">Dim 数组名 ([下界 to] 上界)</span><br><span class="line">&apos; 定义二维数组并赋值 </span><br><span class="line">dim 数组名 (第一维下界 to 第一维上界，第二维下界 to 第二维上界)</span><br><span class="line">&apos; 将区域的值赋给数组 </span><br><span class="line">Dim arr ()</span><br><span class="line">arr = Range (&quot;a1:a5&quot;)</span><br><span class="line">&apos; 动态数组的创建：ReDim</span><br><span class="line">Dim arr ()</span><br><span class="line">j = Range (&quot;a65536&quot;).End (xlUp).Row - 1</span><br><span class="line">ReDim arr (1 To j)</span><br></pre></td></tr></table></figure>
<h1 id="输出数组的值">2. 输出数组的值</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos; 输出一维数组中的值 </span><br><span class="line">Range (&quot;#[:#]&quot;) = arr (#)</span><br><span class="line">&apos; 输出二维数组中的值 </span><br><span class="line">Range (&quot;#[:#]&quot;) = arr (行，列)</span><br></pre></td></tr></table></figure>
<h1 id="使用数组替代-range-提高代码运行速度">3. 使用数组替代 range () 提高代码运行速度</h1>
<p>   在 For 循环中，range () 函数的使用会大大拖累代码的运行速度，使用使用数组替代 range () 能够明显地提高代码运行速度。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos; 查看代码运行时间 </span><br><span class="line">t = Timer</span><br><span class="line">MsgBox Timer - t</span><br><span class="line">&apos;</span><br><span class="line">Sub test ()</span><br><span class="line">Dim i, j, k, l As Integer</span><br><span class="line">Dim arr ()</span><br><span class="line">t = Timer</span><br><span class="line">arr = Range (&quot;a1:a80&quot;)</span><br><span class="line">For i = 2 To 80</span><br><span class="line">    For j = 2 To 80</span><br><span class="line">        For k = 2 To 80</span><br><span class="line">            For l = 2 To 80</span><br><span class="line">            </span><br><span class="line">                If arr (i, 1) + arr (j, 1) + arr (k, 1) + arr (l, 1) = 124704 Then</span><br><span class="line">                    Range (&quot;f3&quot;) = arr (i, 1)</span><br><span class="line">                    Range (&quot;g3&quot;) = arr (j, 1)</span><br><span class="line">                    Range (&quot;h3&quot;) = arr (k, 1)</span><br><span class="line">                    Range (&quot;i3&quot;) = arr (l, 1)</span><br><span class="line">                    GoTo 100</span><br><span class="line">                End If</span><br><span class="line">            Next</span><br><span class="line">        Next</span><br><span class="line">    Next</span><br><span class="line">Next</span><br><span class="line">100</span><br><span class="line">MsgBox Format (Timer - t, &quot;0.00000&quot;)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>用 stata 作图</title>
    <url>/2019/07/27/%E7%94%A8stata%E4%BD%9C%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="stata-作图简介">1. stata 作图简介</h1>
<a id="more"></a>
<h2 id="stata-能做什么图">1.1 stata 能做什么图</h2>
<pre><code>graph twoway   二维图
      scatter   散点图
      line      折线图
      area      区域图
      lfit      线性拟合图
      qfit      非线性拟合图
      histogram 直方图
      kdensity  密度函数图
      function  函数图     
      matrix   矩阵图
      bar      条形图
      dot      点图
      box      箱形图
      pie      饼图
      ac       相关系数图
      pac      偏相关系数图
      irf      脉冲相应函数图</code></pre>
<p>  help graph 查看更多 stata 能做的图。</p>
<h2 id="保存图">1.2 保存图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 第一种方式 </span></span><br><span class="line"><span class="keyword">graph</span> <span class="keyword">save</span> [graphname] filename [, asis <span class="keyword">replace</span>]  </span><br><span class="line"><span class="keyword">graph</span> <span class="keyword">use</span> filename [, options]     <span class="comment">// 调用刚才保存的图 </span></span><br><span class="line"><span class="comment">* 第二种方式 </span></span><br><span class="line">[<span class="keyword">graph</span>] <span class="keyword">twoway</span> <span class="keyword">plot</span> [<span class="keyword">if</span>] [<span class="keyword">in</span>] , saving (文件名，<span class="keyword">replace</span>)</span><br><span class="line"><span class="comment">* 手动方式：在图形窗口中点击保存 </span></span><br></pre></td></tr></table></figure>
<h2 id="导出图形">1.3 导出图形</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">graph</span> export newfilename.suffix [, options]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th>后缀 (.suffix)</th>
<th>附加选项</th>
<th>输出格式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.ps</td>
<td>as (ps)</td>
<td>PostScript</td>
</tr>
<tr class="even">
<td>.eps</td>
<td>as (eps)</td>
<td>Encapsulated PostScript</td>
</tr>
<tr class="odd">
<td>.wmf</td>
<td>as (wmf)</td>
<td>Windows Metafile</td>
</tr>
<tr class="even">
<td>.emf</td>
<td>as (emf)</td>
<td>Windows Enhanced Metafile</td>
</tr>
<tr class="odd">
<td>.pict</td>
<td>as (pict)</td>
<td>Macintosh PICT format</td>
</tr>
<tr class="even">
<td>.png</td>
<td>as (png)</td>
<td>PNG (Portable Network Graphics)</td>
</tr>
<tr class="odd">
<td>.tif</td>
<td>as (tif)</td>
<td>TIFF</td>
</tr>
<tr class="even">
<td>other</td>
<td></td>
<td>must specify as ()</td>
</tr>
</tbody>
</table>
<p>   选项 widtn () 和 height () 可以用于调整图片的分辨率，但仅适用于 .png 和 .tif 格式的图片。</p>
<h2 id="浏览内存中的图片">1.4 浏览内存中的图片</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">graph</span> <span class="keyword">dir</span> [pattern] [, options]</span><br><span class="line"><span class="keyword">graph</span> <span class="keyword">display</span> [name] [, options]   <span class="comment">// 重现内存中的图片 </span></span><br><span class="line"><span class="keyword">graph</span> combine name [name ...] [, options] <span class="comment">// 合并图形 </span></span><br><span class="line">&#123;<span class="keyword">erase</span>|<span class="keyword">rm</span>&#125; [<span class="string">"] filename ["</span>]   <span class="comment">// 删除图形 </span></span><br></pre></td></tr></table></figure>
<h2 id="使用绘图模板">1.5 使用绘图模板</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 查看 Stata 内置的模板 </span></span><br><span class="line"><span class="keyword">help</span> schemes</span><br><span class="line"><span class="comment">* 使用绘图模板 </span></span><br><span class="line"><span class="keyword">set</span> scheme schemename [, permanently]       <span class="comment">// 第一种方式 </span></span><br><span class="line"><span class="keyword">graph</span> ...  [, ...  scheme (schemename) ...]  <span class="comment">// 第二种方式 </span></span><br><span class="line"><span class="comment">* 查找更多的绘图模板 </span></span><br><span class="line"><span class="keyword">findit</span> schemes</span><br><span class="line"><span class="comment">* 符合中文期刊风格的纯黑白图形 </span></span><br><span class="line"><span class="comment">* 官方提供： s1mono</span></span><br><span class="line"><span class="comment">* 用户提供： tufte</span></span><br></pre></td></tr></table></figure>
<h1 id="二维图">2. 二维图</h1>
<h2 id="二维图命令的基本结构">2.1 二维图命令的基本结构</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">graph</span>] <span class="keyword">twoway</span> <span class="keyword">plot</span> [<span class="keyword">if</span>] [<span class="keyword">in</span>] [, twoway_options]</span><br><span class="line"><span class="comment">* 多个图 </span></span><br><span class="line"><span class="keyword">twoway</span> (单元图 1) (单元图 2) (...) ，选项 1 选项 2 ...</span><br><span class="line"><span class="keyword">twoway</span>  单元图 1 || 单元图 2 || ... ， 选项 1 选项 2 ...</span><br><span class="line"><span class="comment">* 标准实例 </span></span><br><span class="line"><span class="keyword">sysuse</span> sp500, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">twoway</span> (<span class="keyword">line</span> high date) (<span class="keyword">line</span> low date)           <span class="comment">///</span></span><br><span class="line">   ,                                           <span class="comment">///  </span></span><br><span class="line">   title (<span class="string">"图 1：股票最高价与最低价时序图"</span>, box) <span class="comment">///</span></span><br><span class="line">   xtitle (<span class="string">"交易日期"</span>, margin (medsmall))        <span class="comment">///</span></span><br><span class="line">   ytitle (<span class="string">"股票价格"</span>)                          <span class="comment">///</span></span><br><span class="line">   ylabel (900 (200) 1400) ymtick (##5)            <span class="comment">///</span></span><br><span class="line">   legend (<span class="keyword">label</span>(1 <span class="string">"最高价"</span>) <span class="keyword">label</span>(2 <span class="string">"最低价"</span>)) <span class="comment">///</span></span><br><span class="line">   <span class="keyword">note</span>(<span class="string">"资料来源：Stata 公司，SP500.dta"</span>)      <span class="comment">///</span></span><br><span class="line">   caption (<span class="string">"说明：我做的第一幅 Stata 图形！"</span>)    <span class="comment">///</span></span><br><span class="line">   saving (mypig.gph, <span class="keyword">replace</span>)</span><br></pre></td></tr></table></figure>
<h2 id="二维图的选项进一步调整图形">2.2 二维图的选项：进一步调整图形</h2>
<h3 id="坐标轴">2.2.1 坐标轴</h3>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 坐标轴标题 </span></span><br><span class="line"><span class="keyword">scatter</span> var_x var_y, ytitle (<span class="string">""</span>, place ()) xtitle () <span class="comment">//place 选项有：top, right 和 left; xtitle (" 第一行 "" 第二行")</span></span><br><span class="line"><span class="comment">* 坐标轴刻度及标签 </span></span><br><span class="line"><span class="comment">* 主刻度及标签：ylabel (), xlabel () // 显示刻度标签时，同时显示刻度 </span></span><br><span class="line"><span class="comment">* 主刻度：      ytick (),  xtick ()  // 按设定显示刻度，仅显示主要刻度的标签 </span></span><br><span class="line"><span class="comment">* 子刻度及标签：ymlabel (),xmlabel ()</span></span><br><span class="line"><span class="comment">* 子刻度：      ymtick (), xmtick ()</span></span><br><span class="line"><span class="comment">* 参数设定规则：</span></span><br><span class="line"><span class="comment">*   rule     example    description</span></span><br><span class="line"><span class="comment">*  --------------------------------------------------------------</span></span><br><span class="line"><span class="comment">*   #?       #4         4 个最佳值 </span></span><br><span class="line"><span class="comment">*   ##?      ##10       10-1=9 个子刻度列印于主刻度之间 </span></span><br><span class="line"><span class="comment">*                         仅适用于 mlabel () 和 mtick () 选项 </span></span><br><span class="line"><span class="comment">*   ?(?)?    10 (5) 45    在 10 到 45 范围内，每隔 5 列印一个子刻度 </span></span><br><span class="line"><span class="comment">*   none     none       不显示刻度标签 </span></span><br><span class="line"><span class="comment">*  --------------------------------------------------------------</span></span><br><span class="line"><span class="comment">*   注：#? 和 ##? 比较常用 </span></span><br><span class="line"><span class="comment">* 自定义标签: xlable (10 20 30 中位数 40 50) </span></span><br><span class="line"><span class="comment">* 倾斜角度的设置：angle (45)</span></span><br><span class="line"><span class="comment">* 坐标轴结构：yscale () xscale ()</span></span><br><span class="line"><span class="keyword">scatter</span> mpg weight, xscale (<span class="keyword">range</span>(0 5000)) xlabel (0 (1000) 5000) <span class="comment">// 表示间隔为 1000</span></span><br><span class="line"><span class="keyword">scatter</span> mpg weight <span class="keyword">if</span> (wei&gt;=3000&amp;wei&lt;=4000)  <span class="comment">// 局部显示需要用 if 语句 </span></span><br><span class="line"><span class="keyword">scatter</span> mpg weight, xscale (titlegap (2))   <span class="comment">// 坐标轴与坐标轴标题间距 </span></span><br><span class="line"><span class="keyword">scatter</span> mpg weight, xscale (titlegap (2) outergap (-2)) <span class="comment">// 坐标轴标题下边距 </span></span><br><span class="line"><span class="comment">* 坐标轴的显示 </span></span><br><span class="line"><span class="keyword">scatter</span> mpg weight, yscale (noline) xscale (noline)  <span class="comment">// 不显示坐标轴 </span></span><br><span class="line"><span class="keyword">scatter</span> mpg weight, yscale (off) xscale (off)        <span class="comment">// 不显示坐标轴和刻度标签 </span></span><br><span class="line"><span class="keyword">scatter</span> mpg weight, yscale (off) xscale (off) plotregion (style (none)) <span class="comment">// 无边距 </span></span><br><span class="line"><span class="keyword">scatter</span> mpg weight, xscale (lcolor (red) lwidth (vthick)) <span class="comment">// 线型的选择：颜色和宽度 </span></span><br><span class="line"><span class="comment">* 双坐标系 (次坐标轴)</span></span><br><span class="line"><span class="keyword">twoway</span> (<span class="keyword">line</span> <span class="keyword">close</span>  date, yaxis (1)) (<span class="keyword">line</span> change date, yaxis (2))</span><br><span class="line"><span class="keyword">twoway</span> (<span class="keyword">line</span> <span class="keyword">close</span>  date, yaxis (1) xaxis (1)) (<span class="keyword">line</span> change date, yaxis (2) xaxis (2))</span><br></pre></td></tr></table></figure>
<h3 id="图表的标题">2.2.2 图表的标题</h3>
<p>   图表标题包括：主标题 - title ()、副标题 - subtitle ()、注释 - note ()、说明 - caption ()。 <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">catter mpg weight, title (<span class="string">"主标题"</span>) subtitle (<span class="string">"副标题"</span>) <span class="keyword">note</span>(<span class="string">"注释内容"</span>) caption (<span class="string">"进一步的说明"</span>) <span class="comment">//box：四周加边框，box 后面添加 bexpand 时边框向两边延展 </span></span><br></pre></td></tr></table></figure></p>
<p>   标题的位置： <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 重新定位：position () 的取值 </span></span><br><span class="line"><span class="comment">*        +---------------------------------------+</span></span><br><span class="line"><span class="comment">*        |        11         12        1         |</span></span><br><span class="line"><span class="comment">*        |                                       |</span></span><br><span class="line"><span class="comment">*        |       +-----------------------+       |</span></span><br><span class="line"><span class="comment">*        |10     |10 or 11   12   1 or 2 |     2 |</span></span><br><span class="line"><span class="comment">*        |       |                       |       |</span></span><br><span class="line"><span class="comment">*        |       |        绘 图 区       |       |</span></span><br><span class="line"><span class="comment">*        | 9     | 9       ring=0      3 |     3 |</span></span><br><span class="line"><span class="comment">*        |       |                       |       |</span></span><br><span class="line"><span class="comment">*        |       |                       |       |</span></span><br><span class="line"><span class="comment">*        | 8     | 7 or 8     6   4 or 5 |     4 |</span></span><br><span class="line"><span class="comment">*        |       +-----------------------+       |</span></span><br><span class="line"><span class="comment">*        |                                       |</span></span><br><span class="line"><span class="comment">*        |         7         6         5         |</span></span><br><span class="line"><span class="comment">*        +---------------------------------------+</span></span><br></pre></td></tr></table></figure></p>
<p>  ring () 的值越大，距离绘图区越远。</p>
<h3 id="图表的区域">2.2.3 图表的区域</h3>
<p>  Stata 的图表区域大致分为绘制图形的区域和外部绘制坐标轴标题的区域，以及分割两个区域之间的分割区和外部的边框区域。 <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 控制内区和外区的边距 </span></span><br><span class="line"><span class="keyword">twoway</span> function y=x, plotregion (margin (0))   <span class="comment">// 控制分割两个区域之间的分割区的宽度 </span></span><br><span class="line"><span class="keyword">twoway</span> function y=x, graphregion (margin (0))  <span class="comment">// 控制外部边框的大小  </span></span><br><span class="line"><span class="comment">* 控制图形的纵横比 </span></span><br><span class="line"><span class="keyword">twoway</span> function y=x, ysize (5) xsize (5)</span><br><span class="line"><span class="comment">* 绘图区的显示模式 </span></span><br><span class="line"><span class="keyword">twoway</span> function y=x, plotregion (style (none)) <span class="comment">//help areastyle 查看更多的显示模式 </span></span><br><span class="line"><span class="comment">* 背景颜色 </span></span><br><span class="line"><span class="keyword">sysuse</span> auto, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">scatter</span> mpg weight, graphregion (fcolor (green*0.8)) <span class="comment">///</span></span><br><span class="line">                    graphregion (ifcolor (yellow))   <span class="comment">///</span></span><br><span class="line">                    plotregion (fcolor (black*0.3))  <span class="comment">///  </span></span><br><span class="line">                    plotregion (ifcolor (white))     <span class="comment">///</span></span><br><span class="line">                    title (<span class="string">"Stata 图形分成四个区域"</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="图例的设置">2.2.4 图例的设置</h3>
<p>   在 Stata 中，图例的名称根据变量的标签自动确定，因此如果想设定中文图例，可以直接更改变量的标签。 <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">twoway</span> (<span class="keyword">line</span> high date,legend (<span class="keyword">label</span> (1 <span class="string">"最高价"</span>))) (<span class="keyword">line</span> low date, legend (<span class="keyword">label</span> (2 <span class="string">"最低价"</span>))) <span class="comment">// 每个图单独加图例 </span></span><br><span class="line"><span class="keyword">twoway</span> <span class="keyword">line</span> high date || <span class="keyword">line</span> low date, legend (<span class="keyword">label</span>(1 <span class="string">"最高价"</span>) <span class="keyword">label</span>(2 <span class="string">"最低价"</span>))            <span class="comment">// 整体加图例 </span></span><br><span class="line"><span class="keyword">twoway</span> <span class="keyword">line</span> high date || <span class="keyword">line</span> low date, legend (position (12) ring (0))                          <span class="comment">// 更改图例的位置 </span></span><br><span class="line"><span class="keyword">line</span>  le le_w le_b  year, legend (rows (#))                                                     <span class="comment">// 图例重排：# 行 </span></span><br><span class="line"><span class="keyword">line</span>  le le_w le_b  year, legend (cols (1) size (small))                                         <span class="comment">// 图例重排：# 列 </span></span><br><span class="line"><span class="keyword">twoway</span> connect <span class="keyword">open</span> <span class="keyword">close</span> low  date <span class="keyword">in</span> 1/10, lpattern (solid dash longdash)                    <span class="comment">// 控制线型：lpattern</span></span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr class="header">
<th>实线</th>
<th>solid line</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>_</td>
<td>(underscore) a long dash</td>
</tr>
<tr class="even">
<td>-</td>
<td>(hyphen) a medium dash</td>
</tr>
<tr class="odd">
<td>.</td>
<td>short dash (almost a dot)</td>
</tr>
<tr class="even">
<td>#</td>
<td>small amount of blank space</td>
</tr>
</tbody>
</table>
<h3 id="附加线">2.2.5 附加线</h3>
<p>   附加线的选项结构如下： <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">twoway</span> ..., yline (数字，子选项)  <span class="comment">// 数字：控制附加线的位置 </span></span><br><span class="line"><span class="keyword">twoway</span> ..., xline (数字，子选项)  <span class="comment">// 子选项：控制附加线的类型、颜色、宽度等 </span></span><br></pre></td></tr></table></figure></p>
<p>   附加线的风格：style ()。defult：决定于显示模式 (set scheme)；extended：延伸到绘图外区；unextended：不延伸到绘图外区。</p>
<p>   附加线的线宽：lwidth，使用 help linewidthstyle 查看详细的线宽选项。</p>
<p>   附加线的颜色：lcolor，使用 graph query colorstyle 查看所有的可使用颜色。</p>
<p>   附加线的线型：lpattern，使用 palette linepalette 命令查看图示。</p>
<h3 id="文字与文本框">2.2.6 文字与文本框</h3>
<p>   文本框是文字的更一般化定义，文字是单行且无边框，文本框则是单行或多行，并且可加边框。 <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, title (<span class="string">"SP500 开盘价"</span>, tstyle (subheading)) <span class="comment">//graph query textboxstyle</span></span><br></pre></td></tr></table></figure></p>
<p>   文本框的属性： <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, title (<span class="string">"SP500 开盘价"</span>, box) <span class="comment">// 显示文本框 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, title (<span class="string">"SP500 开盘价"</span>, box width (60) height (15)) <span class="comment">// 文本框的相对大小 </span></span><br><span class="line"><span class="comment">* 文本框的背景和边框的颜色 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, title (<span class="string">"SP500 开盘价"</span>, box fcolor (blue*0.2))        <span class="comment">// 仅背景 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, title (<span class="string">"SP500 开盘价"</span>, box bcolor (yellow*0.4))      <span class="comment">// 背景和边框 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, title (<span class="string">"SP500 开盘价"</span>, box fc (blue*0.2) lc (red))    <span class="comment">//lc - 边框；fc - 背景。</span></span><br><span class="line"><span class="comment">* 文本框中边框的粗细、线型同附加线一样 </span></span><br><span class="line"><span class="comment">* 文字与边框的相对位置 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, title (<span class="string">"SP500 开盘价"</span>, box width (60) height (15) alignment (middle))       <span class="comment">// 纵向定位 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, title (<span class="string">"SP500 开盘价"</span>, box width (60) height (15) justification (right))    <span class="comment">// 横向定位 </span></span><br></pre></td></tr></table></figure></p>
<p>   文字的属性： <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 文字的位置 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, xtitle (<span class="string">"交易日期"</span>, place (right)) ytitle (<span class="string">"开盘价格"</span>, place (top)) <span class="comment">//help compassdirstyle</span></span><br><span class="line"><span class="comment">* 文字的角度 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, xlabel (, angle (30)) ylabel (,angle (0))  <span class="comment">//help anglestyle</span></span><br><span class="line"><span class="comment">* 文字大小 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, text (1324.83 15117 <span class="string">"一个波峰"</span>,size (huge)) <span class="comment">// 绝对大小 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, text (1324.83 15117 <span class="string">"一个波峰"</span>,size (*1.6)) <span class="comment">// 相对大小 </span></span><br><span class="line"><span class="comment">* 文字颜色 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, text (1324.83 15117 <span class="string">"一个波峰"</span>,color (blue)) <span class="comment">// 颜色后跟：* 数字，调节色度 </span></span><br><span class="line"><span class="comment">* 文字行距 </span></span><br><span class="line"><span class="keyword">line</span> <span class="keyword">open</span> date, <span class="keyword">note</span>(<span class="string">"SP500 指数的时序图"</span><span class="string">"(在此期间，股市两次大跌！)"</span>, color (blue) linegap (2.5))</span><br></pre></td></tr></table></figure></p>
<h3 id="图表类">2.2.7 图表类</h3>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">scatter</span> lexp gnppc <span class="keyword">if</span> region==2, mlabel (country2)   <span class="comment">//  mlabel (varname)</span></span><br><span class="line"><span class="keyword">scatter</span> lexp gnppc <span class="keyword">if</span> region==2, mlabel (country2) mlabp (3)  <span class="comment">//mlabp ()- 图标位置 </span></span><br><span class="line"><span class="comment">*  11  12  1</span></span><br><span class="line"><span class="comment">* 10         2</span></span><br><span class="line"><span class="comment">*  9    0    3</span></span><br><span class="line"><span class="comment">*  8         4</span></span><br><span class="line"><span class="comment">*    7  6  5</span></span><br><span class="line"><span class="keyword">scatter</span> lexp gnppc <span class="keyword">if</span> region==2, mlabel (country2) mlabvp (pos) mlabsize (*0.7)   <span class="comment">//mlabsize ()- 图标大小 </span></span><br><span class="line"><span class="keyword">scatter</span> lexp gnppc <span class="keyword">if</span> region==2, mlabel (country2) mlabvp (pos) mlabangle (15)    <span class="comment">//mlabanle ()- 图标角度 </span></span><br><span class="line"><span class="keyword">scatter</span> lexp gnppc <span class="keyword">if</span> region==2, mlabel (country2) mlabvp (pos) mlabcolor (green) <span class="comment">//mlabcolor ()- 图标颜色 </span></span><br></pre></td></tr></table></figure>
<h3 id="其他选项">2.2.8 其他选项</h3>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 分组绘图 </span></span><br><span class="line"><span class="keyword">scatter</span> mpg weight, <span class="keyword">by</span>(foreign, <span class="keyword">total</span> cols (1) style (compact)) <span class="comment">//cols (#) 代表 #列，rows (#) 代表 #行，二者不能并存，style () 定义风格。</span></span><br><span class="line"><span class="keyword">twoway</span> <span class="keyword">line</span> high low date, yvarlabel (<span class="string">"最高价"</span> <span class="string">"最低价"</span>) xvarlabel (<span class="string">"交易日期"</span>) <span class="comment">// 重新设置变量标签：yvarlabel ()&amp;xvarlabel ()</span></span><br><span class="line"><span class="keyword">twoway</span> <span class="keyword">line</span> high date, xvarformat (% tdY-<span class="keyword">n</span>-<span class="keyword">d</span>) yvarformat (%6.2f) <span class="comment">// 重新设置变量显示格式:xvarformat ()&amp;yvarformat ()</span></span><br><span class="line"><span class="keyword">twoway</span> (<span class="keyword">line</span> change date <span class="keyword">if</span> change&gt;0, <span class="keyword">recast</span>(spike)) (<span class="keyword">line</span> change date <span class="keyword">if</span> change&lt;0, <span class="keyword">recast</span>(area)) <span class="comment">// 重设图形种类：recast ()</span></span><br></pre></td></tr></table></figure>
<h2 id="元素的代号">2.3 元素的代号</h2>
<h3 id="颜色代号">2.3.1 颜色代号</h3>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">full_palette  <span class="comment">// 66 种颜色，附加 RGB 代码 </span></span><br></pre></td></tr></table></figure>
<h3 id="线的代号">2.3.2 线的代号</h3>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">palette</span> linepalette                  <span class="comment">// 图示线型 </span></span><br><span class="line"><span class="keyword">graph</span> <span class="keyword">query</span> linewidthstyle           <span class="comment">// 列出所有的线宽代号 </span></span><br><span class="line"><span class="keyword">graph</span> <span class="keyword">query</span> connectstyle             <span class="comment">// 列出所有的连接方式代号 </span></span><br></pre></td></tr></table></figure>
<h3 id="标记符号的代号">2.3.3 标记符号的代号</h3>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* mlcolor ()：边界颜色； mfcolor (): 填充颜色 </span></span><br><span class="line">showmarkers, over (msymbol)   <span class="comment">// 图示所有的标记符号 </span></span><br><span class="line">showmarkers, over (msize)     <span class="comment">// 图示尺寸 </span></span><br><span class="line">showmarkers, over (mcolor)    <span class="comment">// 图示边界颜色 </span></span><br><span class="line">showmarkers, over (mfcolor)   <span class="comment">// 图示填充颜色 </span></span><br></pre></td></tr></table></figure>
<h3 id="文字相关的代号">2.3.4 文字相关的代号</h3>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">help</span> textsizestyle           <span class="comment">// 文字大小 </span></span><br><span class="line"><span class="keyword">help</span> anglestyle              <span class="comment">// 文字角度 </span></span><br><span class="line"><span class="keyword">help</span> justificationstyle      <span class="comment">// 左右对齐方式 </span></span><br><span class="line"><span class="keyword">help</span> alignmentstyle          <span class="comment">// 上下对齐方式 </span></span><br><span class="line"><span class="keyword">help</span> marginstyle             <span class="comment">// 边距大小 </span></span><br></pre></td></tr></table></figure>
<h1 id="常用图形的示例">3. 常用图形的示例</h1>
<h2 id="散点图">3.1 散点图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">help</span> <span class="keyword">twoway</span> <span class="keyword">scatter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sysuse</span> uslifeexp2, <span class="keyword">clear</span></span><br><span class="line">#delimit ;</span><br><span class="line">  <span class="keyword">scatter</span> le year,</span><br><span class="line">          title (<span class="string">"图 1: 散点图示例"</span>)</span><br><span class="line">          subtitle (<span class="string">"预期寿命，美国"</span>)</span><br><span class="line">          yvarlabel (预期寿命)</span><br><span class="line">          xvarlabel (年份)</span><br><span class="line">          <span class="keyword">note</span>(<span class="string">"1"</span>)</span><br><span class="line">          caption ("数据来源：美国国家重要统计资料报告，</span><br><span class="line">                   第 5 卷 - 第 6 期")</span><br><span class="line">          scheme (economist);</span><br><span class="line">#delimit cr</span><br></pre></td></tr></table></figure>
<h2 id="折线图">3.2 折线图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sysuse</span> uslifeexp, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">gen</span> diff = le_wmale - le_bmale</span><br><span class="line"><span class="keyword">label</span> <span class="keyword">var</span> diff <span class="string">"寿命差异"</span></span><br><span class="line">#delimit ;  </span><br><span class="line"> <span class="keyword">twoway</span> (<span class="keyword">line</span> le_wmale year, yaxis (1 2) xaxis (1 2))</span><br><span class="line">        (<span class="keyword">line</span> le_bmale year)</span><br><span class="line">        (<span class="keyword">line</span> diff  year)</span><br><span class="line">        ,</span><br><span class="line">        ylabel (0 20 (10) 80,     gmax angle (0))</span><br><span class="line">        ylabel (0 (5) 20, axis (2) gmin angle (0))</span><br><span class="line">        xlabel (1918, axis (2)) </span><br><span class="line">        title (<span class="string">"图 2：白人和黑人预期寿命"</span>)</span><br><span class="line">        subtitle (<span class="string">"美国，1900-1999"</span>)</span><br><span class="line">        ytitle (<span class="string">"预期寿命 (年)"</span>)</span><br><span class="line">        xtitle (<span class="string">"年份"</span>)</span><br><span class="line">        ytitle (<span class="string">""</span>, axis (2))</span><br><span class="line">        xtitle (<span class="string">""</span>, axis (2))</span><br><span class="line">        <span class="keyword">note</span>(<span class="string">"数据来源：美国国家重要统计资料报告，第 5 卷 - 第 6 期"</span></span><br><span class="line">             <span class="string">"(1918 巨降：源于 1918 年全国性流行感冒)"</span>,linegap (1.2))</span><br><span class="line">        legend (<span class="keyword">label</span>(1 <span class="string">"白人男性"</span>) <span class="keyword">label</span>(2 <span class="string">"黑人男性"</span>) </span><br><span class="line">               rows (1) size (*0.7));</span><br><span class="line">#delimit cr</span><br></pre></td></tr></table></figure>
<h2 id="区域图">3.3 区域图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sysuse</span> gnp96, <span class="keyword">clear</span></span><br><span class="line">#delimit ;</span><br><span class="line"> <span class="keyword">twoway</span> area <span class="keyword">d</span>.gnp96 date, </span><br><span class="line">             xlabel (36 (8) 164, angle (45))</span><br><span class="line">             ylabel (-100 (50) 200, angle (0))</span><br><span class="line">             ytitle (<span class="string">"Billions of 1996 Dollars"</span>)</span><br><span class="line">             xtitle (<span class="string">""</span>)</span><br><span class="line">             subtitle (<span class="string">"Change in U.S. GNP"</span>, position (11))</span><br><span class="line">             <span class="keyword">note</span>("Source: <span class="keyword">U</span>.S. Department of Commerce,</span><br><span class="line">                   Bureau of Economic Analysis") ;</span><br><span class="line">#delimit cr</span><br></pre></td></tr></table></figure>
<h2 id="钉形图">3.4 钉形图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">*-e.g 1: 简单钉形图 </span></span><br><span class="line">  <span class="keyword">sysuse</span> sp500, <span class="keyword">clear</span></span><br><span class="line">    <span class="keyword">replace</span> volume = volume/1000</span><br><span class="line">    #delimit ;</span><br><span class="line">        <span class="keyword">twoway</span> (rspike hi low date)</span><br><span class="line">               (<span class="keyword">line</span>   <span class="keyword">close</span>  date)</span><br><span class="line">               (bar    volume date, barw (.25) yaxis (2))</span><br><span class="line">                <span class="keyword">in</span> 1/57</span><br><span class="line">            , </span><br><span class="line">        yscale (axis (1) <span class="built_in">r</span>(900 1400))</span><br><span class="line">            yscale (axis (2) <span class="built_in">r</span>(  9   45))</span><br><span class="line">            ylabel (, axis (2) grid)</span><br><span class="line">            ytitle (<span class="string">"股价 -- 最高，最低，收盘"</span>,place (top))</span><br><span class="line">            ytitle (<span class="string">"交易量 (百万股)"</span>, axis (2) bexpand just (left))</span><br><span class="line">            xtitle (<span class="string">""</span>)</span><br><span class="line">            legend (off)</span><br><span class="line">            subtitle (<span class="string">"S&amp;P 500"</span>, margin (b+2.5))</span><br><span class="line">            <span class="keyword">note</span>(<span class="string">" 数据来源：雅虎财经！"</span>);</span><br><span class="line">    #delimit cr</span><br><span class="line"><span class="comment">*-e.g 2：区域钉形图 </span></span><br><span class="line"><span class="keyword">sysuse</span> sp500, <span class="keyword">clear</span>    </span><br><span class="line">  <span class="keyword">twoway</span> (rarea high low date)           <span class="comment">///</span></span><br><span class="line">         (spike volume date, yaxis (2)),  <span class="comment">///</span></span><br><span class="line">           legend (span)                    <span class="comment">///    </span></span><br><span class="line">           yscale (<span class="keyword">range</span>(500 1400) axis (1)) <span class="comment">///  //new!</span></span><br><span class="line">       yscale (<span class="keyword">range</span>(0 5) axis (2))      <span class="comment">///  //new!</span></span><br><span class="line">       ylabel (,angle (0))               <span class="comment">///// new!</span></span><br><span class="line">         ylabel (,angle (0) axis (2))</span><br></pre></td></tr></table></figure>
<h2 id="直方图">3.5 直方图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sysuse</span> sp500, <span class="keyword">clear</span></span><br><span class="line"> #delimit ;</span><br><span class="line"> <span class="keyword">histogram</span> volume, freq normal </span><br><span class="line">           addlabels addlabopts (mlabcolor (blue))</span><br><span class="line">           xaxis (1 2)</span><br><span class="line">           ylabel (0 (10) 65, grid)</span><br><span class="line">           xlabel ( 12321 <span class="string">"mean"</span></span><br><span class="line">                    9735 <span class="string">"-1 s.d."</span></span><br><span class="line">                   14907 <span class="string">"+1 s.d."</span></span><br><span class="line">                    7149 <span class="string">"-2 s.d."</span></span><br><span class="line">                   17493 <span class="string">"+2 s.d."</span></span><br><span class="line">                   20078 <span class="string">"+3 s.d."</span></span><br><span class="line">                   22664 <span class="string">"+4 s.d."</span></span><br><span class="line">                  ,axis (2) grid gmax</span><br><span class="line">                 )</span><br><span class="line">           subtitle (<span class="string">"图 4：S&amp;P 500 交易量 (2001 年 1 月 - 12 月)"</span>)</span><br><span class="line">           ytitle (频数)</span><br><span class="line">           xtitle (<span class="string">"交易量 (千笔)"</span>) xscale (titlegap (2))</span><br><span class="line">           xtitle (<span class="string">""</span>, axis (2))</span><br><span class="line">           <span class="keyword">note</span>(<span class="string">" 数据来源：雅虎！财经数据 "</span>);</span><br><span class="line"> #delimit cr</span><br></pre></td></tr></table></figure>
<h2 id="密度函数图">3.6 密度函数图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sysuse</span> sp500, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">twoway</span> (<span class="keyword">kdensity</span> <span class="keyword">open</span>) (<span class="keyword">kdensity</span> low)  <span class="comment">// 把多个变量的核密度函数图绘制在一张图上 </span></span><br><span class="line"><span class="comment">*- 比较不同子样本的密度函数 </span></span><br><span class="line"><span class="keyword">sysuse</span> auto, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">kdensity</span> weight              , nograph <span class="keyword">gen</span>(p_x  d_x)</span><br><span class="line"><span class="keyword">kdensity</span> weight <span class="keyword">if</span> foreign==0, nograph <span class="keyword">gen</span>(p_x0 d_x0)</span><br><span class="line"><span class="keyword">kdensity</span> weight <span class="keyword">if</span> foreign==1, nograph <span class="keyword">gen</span>(p_x1 d_x1) </span><br><span class="line"><span class="keyword">label</span> <span class="keyword">var</span> d_x  <span class="string">"all cars"</span></span><br><span class="line"><span class="keyword">label</span> <span class="keyword">var</span> d_x0 <span class="string">"Domestic cars"</span></span><br><span class="line"><span class="keyword">label</span> <span class="keyword">var</span> d_x1 <span class="string">"Foreign cars"</span></span><br><span class="line"><span class="keyword">twoway</span> (<span class="keyword">line</span> d_x p_x) (<span class="keyword">line</span> d_x0 p_x0) (<span class="keyword">line</span> d_x1 p_x1)</span><br><span class="line">- 附加置信区间    -akdensity-</span><br><span class="line"><span class="keyword">sysuse</span> auto, <span class="keyword">clear</span></span><br><span class="line">akdensity length, stdbands (2)</span><br><span class="line"><span class="comment">*- 双变量联合密度函数图  -kdens2-</span></span><br><span class="line"><span class="keyword">use</span> grunfeld, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">gen</span> linv = <span class="built_in">log</span>(invest)</span><br><span class="line"><span class="keyword">gen</span> lmkt = <span class="built_in">log</span>(mvalue)</span><br><span class="line">kdens2 linv lmkt</span><br><span class="line">kdens2 linv lmkt, <span class="keyword">n</span>(100)         <span class="comment">//defaults Min (_N,50)</span></span><br><span class="line">kdens2 linv lmkt, xw (.5) <span class="built_in">yw</span>(.5)  <span class="comment">//defaults `optimal'</span></span><br></pre></td></tr></table></figure>
<h2 id="累积分布函数图">3.7 累积分布函数图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sysuse</span> auto, <span class="keyword">clear</span></span><br><span class="line"><span class="comment">* 外部命令：distplot</span></span><br><span class="line"><span class="comment">* 支持的图形种类：area bar connected dot dropline line scatter spike</span></span><br><span class="line"><span class="keyword">foreach</span> t <span class="keyword">in</span> area bar connected dot dropline <span class="keyword">line</span> <span class="keyword">scatter</span> spike &#123;</span><br><span class="line">  distplot mpg, <span class="keyword">by</span>(foreign) <span class="keyword">recast</span>(<span class="symbol">`t'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">* 外部命令：cdfplot</span></span><br><span class="line">cdfplot length, <span class="keyword">by</span>(foreign) norm saving (mygraph, <span class="keyword">replace</span>)</span><br></pre></td></tr></table></figure>
<h2 id="线性-非线性拟合图">3.8 线性 / 非线性拟合图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sysuse</span> auto, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">scatter</span> mpg weight || <span class="keyword">lfit</span> mpg weight, <span class="keyword">by</span>(foreign, <span class="keyword">total</span> row (1))</span><br><span class="line"><span class="keyword">twoway</span> (lfitci mpg wei, stdf) (<span class="keyword">scatter</span> mpg wei)  <span class="comment">// 线性拟合：注意前后顺序 </span></span><br><span class="line"><span class="keyword">twoway</span> (qfitci mpg wei, stdf) (<span class="keyword">scatter</span> mpg wei)  <span class="comment">// 非线性拟合 </span></span><br><span class="line"><span class="keyword">twoway</span> (qfitci mpg wei, stdf level (99) color (yellow)) <span class="comment">///</span></span><br><span class="line">       (qfitci mpg wei, stdf level (90))               <span class="comment">///</span></span><br><span class="line">       (<span class="keyword">scatter</span> mpg wei)                              <span class="comment">//level: 置信水准 </span></span><br></pre></td></tr></table></figure>
<h2 id="矩阵图显示变量间的相关性">3.9 矩阵图：显示变量间的相关性</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">graph</span> <span class="keyword">matrix</span> mpg weight length, <span class="built_in">diag</span>(<span class="string">"mpg (汽车里数)"</span> . <span class="string">"length (汽车长度)"</span>)</span><br><span class="line"><span class="keyword">graph</span> <span class="keyword">matrix</span> mpg weight length, scale (0.8)     <span class="comment">// 整体缩放 </span></span><br><span class="line"><span class="keyword">graph</span> <span class="keyword">matrix</span> heatdd-tempjuly, msymbol (point)   <span class="comment">// 指定图标 </span></span><br><span class="line"><span class="keyword">graph</span> <span class="keyword">matrix</span> heatdd-tempjuly, ms (p) half       <span class="comment">// 半边显示 </span></span><br></pre></td></tr></table></figure>
<h2 id="柱状图">3.10 柱状图</h2>
<h3 id="一维柱状图">3.10.1 一维柱状图</h3>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sysuse</span> nlsw88, <span class="keyword">clear</span></span><br><span class="line">#delimit ;</span><br><span class="line"> <span class="keyword">graph</span> bar (<span class="keyword">mean</span>) wage, over (smsa) over (married) over (collgrad)</span><br><span class="line">           title (<span class="string">"Average Hourly Wage, 1988, Women Aged 34-46"</span>)</span><br><span class="line">           subtitle ("<span class="keyword">by</span> College Graduation, Marital Status,</span><br><span class="line">                      and SMSA residence")</span><br><span class="line">            <span class="keyword">note</span>("Source:  1988 data from NLS, <span class="keyword">U</span>.S. Dept. of Labor,</span><br><span class="line">                  Bureau of Labor Statistics");</span><br><span class="line">#delimit cr</span><br><span class="line"><span class="comment">* 柱体的样式: bstyle</span></span><br><span class="line"><span class="keyword">graph</span> bar (<span class="keyword">mean</span>) wage hours, over (race) over (married) <span class="comment">///</span></span><br><span class="line">                 scheme (s1mono)      <span class="comment">///</span></span><br><span class="line">                 bar (1, bstyle (p1))  <span class="comment">///</span></span><br><span class="line">                 bar (2, bstyle (p6))</span><br><span class="line"><span class="comment">* 柱体的标签： blabel</span></span><br><span class="line"><span class="keyword">graph</span> bar (<span class="keyword">mean</span>) wage, over (race) over (married) blabel (bar, position (outside) <span class="keyword">format</span>(%3.1f) color (green))  </span><br><span class="line"><span class="comment">* 累加柱体 </span></span><br><span class="line"><span class="keyword">graph</span> hbar (<span class="keyword">mean</span>) public private, over (country) <span class="keyword">stack</span>                </span><br><span class="line"><span class="comment">* 柱体间隔：bargap</span></span><br><span class="line"><span class="keyword">sysuse</span> nlsw88, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">graph</span> bar (<span class="keyword">mean</span>) hours wage, over (race) over (married) bargap (-30)</span><br><span class="line"><span class="keyword">graph</span> hbar wage, over (ind, <span class="keyword">sort</span>(1)) over (collgrad) ysize (4) xsize (8)   <span class="comment">// 图形的比例 </span></span><br></pre></td></tr></table></figure>
<h3 id="二维柱状图">3.10.2 二维柱状图</h3>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">*- 一个较复杂的例子 </span></span><br><span class="line"><span class="keyword">sysuse</span> pop2000, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">replace</span> maletotal = -maletotal/1e+6</span><br><span class="line"><span class="keyword">replace</span> femtotal = femtotal/1e+6</span><br><span class="line"><span class="keyword">gen</span> zero = 0</span><br><span class="line">#delimit ;</span><br><span class="line"> <span class="keyword">twoway</span></span><br><span class="line">     (bar maletotal agegrp, horizontal xvarlab (Males))</span><br><span class="line">     (bar  femtotal agegrp, horizontal xvarlab (Females))</span><br><span class="line">     (<span class="keyword">scatter</span>  agegrp zero, mlabel (agegrp) mlabcolor (black) msymbol (i))</span><br><span class="line">    , xtitle (<span class="string">"Population in millions"</span>) ytitle (<span class="string">""</span>)</span><br><span class="line">      plotregion (style (none))     </span><br><span class="line">      ysca (noline) ylabel (none)    </span><br><span class="line">      xsca (noline titlegap (-3.5))  </span><br><span class="line">      xlabel (-12 <span class="string">"12"</span> -10 <span class="string">"10"</span> -8 <span class="string">"8"</span> -6 <span class="string">"6"</span> -4 <span class="string">"4"</span> 4 (2) 12, </span><br><span class="line">         tlength (0) grid gmin gmax)</span><br><span class="line">      legend (<span class="keyword">label</span>(1 Males) <span class="keyword">label</span>(2 Females)) </span><br><span class="line">  legend (<span class="keyword">order</span>(1 2))</span><br><span class="line">      title (<span class="string">"US Male and Female Population by Age, 2000"</span>)</span><br><span class="line">      <span class="keyword">note</span>(<span class="string">"Source: U.S. Census Bureau, Census 2000"</span>)</span><br><span class="line">  ;</span><br><span class="line"> #delimit cr</span><br></pre></td></tr></table></figure>
<h2 id="点图">3.11 点图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sysuse</span> nlsw88, <span class="keyword">clear</span></span><br><span class="line">#delimit ;</span><br><span class="line"><span class="keyword">graph</span> dot wage, over (occ, <span class="keyword">sort</span>(1))</span><br><span class="line">      <span class="keyword">by</span>(collgrad,</span><br><span class="line">         title (<span class="string">"Average hourly wage, 1988, women aged 34-46"</span>, span)</span><br><span class="line">         subtitle (<span class="string">""</span>)</span><br><span class="line">         <span class="keyword">note</span>("Source:  1988 data from NLS, <span class="keyword">U</span>.S. Dept. of Labor, </span><br><span class="line">Bureau of Labor Statistics", span)</span><br><span class="line">        );</span><br><span class="line">#delimit cr</span><br></pre></td></tr></table></figure>
<h2 id="函数图">3.12 函数图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">twoway</span> function [[y]=] <span class="built_in">f</span>(x) [<span class="keyword">if</span>] [<span class="keyword">in</span>] [, options]</span><br></pre></td></tr></table></figure>
<h2 id="三维图">3.13 三维图</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">clear</span></span><br><span class="line"><span class="keyword">set</span> obs 900</span><br><span class="line"><span class="keyword">gen</span> x = int ((_n - <span class="built_in">mod</span>(_n-1,30) -1 ) /30 )</span><br><span class="line"><span class="keyword">gen</span> y = <span class="built_in">mod</span>(_n-1,30)</span><br><span class="line"><span class="keyword">gen</span> z = <span class="built_in">normalden</span>(x,10,3)*<span class="built_in">normalden</span>(y,15,5)</span><br><span class="line">surface x y z</span><br></pre></td></tr></table></figure>
<h2 id="地图">3.14 地图</h2>
<p>   中国地图： <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">spmap x using <span class="string">"china_map.dta"</span>, id (id)                  <span class="comment">/// </span></span><br><span class="line">  <span class="keyword">label</span>(<span class="keyword">label</span>(name)                                    <span class="comment">///</span></span><br><span class="line">    xcoord (x_coord) ycoord (y_coord) size (*.9))         <span class="comment">///</span></span><br><span class="line">plotregion (icolor (stone)) graphregion (icolor (stone)) <span class="comment">///</span></span><br><span class="line">  clnumber (8) fc (Greens2) oc (white ..) osize (medthin ..)</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>stata</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>Stata</tag>
        <tag>图形</tag>
      </tags>
  </entry>
  <entry>
    <title>Dir 函数</title>
    <url>/2019/07/27/Dir%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="将对象赋值到变量---set">1. 将对象赋值到变量 - Set</h1>
<a id="more"></a>
<p>   将对象赋值到变量使得可以对对象进行操作： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub test ()</span><br><span class="line">Dim sht As Worksheet</span><br><span class="line">&apos; 不进行 Set 赋值则无法对 sht 直接进行操作 </span><br><span class="line">Set sht = Sheets.Add</span><br><span class="line">sht.Name = Sheet1.Range (&quot;a&quot; &amp; i)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure></p>
<h1 id="认识-dir-函数">2. 认识 Dir 函数</h1>
<p>  Dir () 主要用于获取（遍历）目录下的文件名，常用的万能代码： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dim str As String</span><br><span class="line">Dim wb As Workbook</span><br><span class="line">Dim i As Integer</span><br><span class="line"></span><br><span class="line">str = Dir (&quot;d:\data\*.*&quot;)</span><br><span class="line">For i = 1 To 100</span><br><span class="line">    Set wb = Workbooks.Open (&quot;d:\data\&quot; &amp; str)</span><br><span class="line">    &apos; 这里该干什么干什么 </span><br><span class="line">    wb.Close</span><br><span class="line">    str = Dir</span><br><span class="line">    If str = &quot;&quot; Then</span><br><span class="line">        Exit For</span><br><span class="line">    End If</span><br><span class="line">Next</span><br></pre></td></tr></table></figure></p>
<h1 id="多文件合并">3. 多文件合并</h1>
<p>   每个工作簿只有一个工作表： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dim str As String</span><br><span class="line">Dim wb As Workbook</span><br><span class="line"></span><br><span class="line">str = Dir (&quot;d:\data\*.xls*&quot;)</span><br><span class="line"></span><br><span class="line">For i = 1 To 100</span><br><span class="line">    Set wb = Workbooks.Open (&quot;d:\data\&quot; &amp; str)</span><br><span class="line">    </span><br><span class="line">    wb.Sheets (1).Copy after:=ThisWorkbook.Sheets (ThisWorkbook.Sheets.Count)</span><br><span class="line">    ThisWorkbook.Sheets (ThisWorkbook.Sheets.Count).Name = Split (wb.Name, &quot;.&quot;)(0)</span><br><span class="line">    </span><br><span class="line">    wb.Close</span><br><span class="line">    str = Dir</span><br><span class="line">    If str = &quot;&quot; Then</span><br><span class="line">        Exit For</span><br><span class="line">    End If</span><br><span class="line">Next</span><br></pre></td></tr></table></figure></p>
<p>   每个工作簿有多个工作表： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">im str As String</span><br><span class="line">Dim wb As Workbook</span><br><span class="line">Dim sht As Worksheet</span><br><span class="line"></span><br><span class="line">str = Dir (&quot;d:\data\*.xls*&quot;)</span><br><span class="line"></span><br><span class="line">For i = 1 To 100</span><br><span class="line">    Set wb = Workbooks.Open (&quot;d:\data\&quot; &amp; str)</span><br><span class="line">    For Each sht In wb.Sheets</span><br><span class="line">        sht.Copy after:=ThisWorkbook.Sheets (ThisWorkbook.Sheets.Count)</span><br><span class="line">        ThisWorkbook.Sheets (ThisWorkbook.Sheets.Count).Name = Split (wb.Name, &quot;.&quot;)(0) &amp; sht.Name</span><br><span class="line">    Next</span><br><span class="line">    wb.Close</span><br><span class="line">    str = Dir</span><br><span class="line">    If str = &quot;&quot; Then</span><br><span class="line">        Exit For</span><br><span class="line">    End If</span><br><span class="line">Next</span><br></pre></td></tr></table></figure></p>
<h1 id="使用-find-功能">4. 使用 Find 功能</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dim rng As Range</span><br><span class="line"></span><br><span class="line">Set rng = Range (&quot;d:d&quot;).Find (Range (&quot;l3&quot;))</span><br><span class="line"></span><br><span class="line">If Not rng Is Nothing Then</span><br><span class="line">    Range (&quot;m3&quot;) = rng.Offset (0, 3)</span><br><span class="line">End If</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>EXCEL&amp;VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习 day04-cookies&amp;requests 库简介</title>
    <url>/2019/07/27/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0day04-cookies/</url>
    <content><![CDATA[<h1 id="如何使用-cookies">1. 如何使用 cookies</h1>
<p>   需要将 cookies 添加到请求头中： <a id="more"></a> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2. 添加到请求头 </span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>:<span class="string">'acw_tc=2f624a4c15641034837798418e32d0cc3a87af290cb4236b63222aee85bff9; PHPSESSID=pjmeqpn7ibu3pvv14thgc8mot5; yaozh_logintime=1564103627; yaozh_user=789853%09% E9% AA%91% E7%89%9B% E4% B8% BA% E4% BD%95; yaozh_userId=789853; yaozh_uidhas=1; yaozh_mylogin=1564103629; has=1; acw_tc=2f624a4c15641034837798418e32d0cc3a87af290cb4236b63222aee85bff9'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>   如果想要模拟登陆，需要用到 cookiejar: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> cookiejar</span><br><span class="line"></span><br><span class="line"><span class="comment">#    1.2 登录的参数 </span></span><br><span class="line">login_form_data = &#123;</span><br><span class="line">    <span class="string">'username'</span>:<span class="string">' 骑牛为何 '</span>,</span><br><span class="line">    <span class="string">'pwd'</span>:<span class="string">'SSJ7fmbuDsnGWLN'</span>,</span><br><span class="line">    <span class="string">'formhash'</span>:<span class="string">'2CB995D753'</span>,</span><br><span class="line">    <span class="string">'backurl'</span>:<span class="string">'https%3A%2F%2Fwww.yaozh.com%2F'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#    1.3 发送登录请求 </span></span><br><span class="line">cookie_jar = cookiejar.CookieJar ()       <span class="comment"># 保存 cookie</span></span><br><span class="line"><span class="comment"># 定义有添加 cookie 功能的处理器 </span></span><br><span class="line">cookie_handler = urllib.request.HTTPCookieProcessor (cookie_jar)</span><br></pre></td></tr></table></figure></p>
<p>   对于词典参数，必须进行转译： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 需要对参数进行转码或者转译 </span><br><span class="line">login_str = urllib.parse.urlencode (login_form_data).encode (&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure></p>
<h1 id="requests-用法简介">2. Requests 用法简介</h1>
<p>   简单的用法： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line">response = requests.get (url)</span><br><span class="line">data = response.content</span><br><span class="line">print (data)</span><br><span class="line"><span class="comment"># content 属性返回的是 bytes; 转成字符串：.decode</span></span><br><span class="line">data = response.content.decode (<span class="string">'utf-8'</span>)</span><br><span class="line">print (type (data))</span><br><span class="line">data = response.text</span><br><span class="line">print (type (data))</span><br></pre></td></tr></table></figure></p>
<p>   添加请求头： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestSpider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = <span class="string">'https://www.baidu.com/'</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        self.response = requests.get (url, headers=headers)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = self.response.content</span><br><span class="line">        <span class="comment"># 1. 获取请求头 </span></span><br><span class="line">        <span class="comment"># request_headers = self.response.request.headers</span></span><br><span class="line">        <span class="comment"># print (request_headers)</span></span><br><span class="line">        <span class="comment"># 2. 获取响应头 </span></span><br><span class="line">        <span class="comment"># response_headers = self.response.headers</span></span><br><span class="line">        <span class="comment"># print (response_headers)</span></span><br><span class="line">        <span class="comment"># 3. 获取响应状态码 </span></span><br><span class="line">        <span class="comment"># code = self.response.status_code</span></span><br><span class="line">        <span class="comment"># print (code)   </span></span><br><span class="line">        <span class="comment"># 4. 获取请求的 cookie</span></span><br><span class="line">        <span class="comment"># request_cookie = self.response.request._cookies </span></span><br><span class="line">        <span class="comment"># print (request_cookie)</span></span><br><span class="line">        <span class="comment"># 5. 获取响应的 cookie</span></span><br><span class="line">        response_cookie = self.response.cookies</span><br><span class="line">        print (response_cookie)</span><br><span class="line">RequestSpider ().run ()</span><br></pre></td></tr></table></figure></p>
<p>   在 requests 库中，dict 会自动转译： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 参数自动转译 </span></span><br><span class="line"><span class="comment"># url = 'https://www.baidu.com/s?wd = 美女 '</span></span><br><span class="line">url = <span class="string">'https://www.baidu.com/s'</span></span><br><span class="line"><span class="comment"># dict 自动转译 </span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">'wd'</span>:<span class="string">' 美女 '</span></span><br><span class="line">&#125; </span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get (url, headers=headers, params=params)</span><br><span class="line">data = response.content.decode ()</span><br><span class="line"><span class="keyword">with</span> open (<span class="string">"06-baidu.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write (data)</span><br></pre></td></tr></table></figure></p>
<p>   当网址返回的内容不是 html，而是标准的 json 时： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">url = <span class="string">'https://api.github.com/user'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 这个网址返回的内容不是 html, 而是标准的 json</span></span><br><span class="line">response = requests.get (url, headers=headers)</span><br><span class="line"><span class="comment"># data = response.content.decode ()</span></span><br><span class="line"><span class="comment"># json () 会将 json 字符串自动转成 Python 中的 dict</span></span><br><span class="line">data = response.json () </span><br><span class="line"><span class="comment"># str --&gt; dict</span></span><br><span class="line"><span class="comment"># data_dict = json.loads (data)</span></span><br><span class="line">print (data [<span class="string">'message'</span>])</span><br></pre></td></tr></table></figure></p>
<p>   当爬取内网时： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">response = requests.post (url, data=data) </span><br><span class="line"><span class="comment"># 内网：需要认证 </span></span><br><span class="line">auth = (user, pwd)</span><br><span class="line">response = requests.get (url, auth=auth, )</span><br></pre></td></tr></table></figure></p>
<p>   添加免费代理： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free_peoxy = &#123;<span class="string">'http'</span>:<span class="string">'124.192.27.246:3128'</span>&#125;</span><br><span class="line">response = requests.get (url=url,headers=headers,proxies=free_peoxy)</span><br></pre></td></tr></table></figure></p>
<p>  SSLError 的处理： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.get (url=url, headers=headers, verify=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></p>
<p>  cookies:str 转换成 dict <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cookies = <span class="string">'acw_tc=2f624a4c15641034837798418e32d0cc3a87af290cb4236b63222aee85bff9; UtzD_f52b_ulastactivity=1564103521%7C0; MEIQIA_VISIT_ID=1OWvUXPF0fsIjo5GebU3wmaL4s0; PHPSESSID=m39vjellmv9rmb9qct7caelet6; yaozh_logintime=1564559758; yaozh_user=789853%09% E9% AA%91% E7%89%9B% E4% B8% BA% E4% BD%95; yaozh_userId=789853; db_w_auth=698102%09% E9% AA%91% E7%89%9B% E4% B8% BA% E4% BD%95; UtzD_f52b_saltkey=wX6uUu66; UtzD_f52b_lastvisit=1564556159; UtzD_f52b_lastact=1564559759%09uc.php%09; UtzD_f52b_auth=46eb1zd8SCzKzXeWIuGwe3GYXfF10HVC%2BkPyDVhWb4nZWM6%2B9zsECciSAYEsCjdIQ6Y3VT3RGmPK9lf%2BqYo1IX%2FG2aI; yaozh_uidhas=1; yaozh_mylogin=1564559761; acw_tc=2f624a4c15641034837798418e32d0cc3a87af290cb4236b63222aee85bff9; MEIQIA_VISIT_ID=1OWvUXPF0fsIjo5GebU3wmaL4s0'</span></span><br><span class="line"><span class="comment"># 第一种方式 </span></span><br><span class="line">cookie_dict = &#123;&#125;</span><br><span class="line">cookies_list = cookies.split (<span class="string">';'</span>)</span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookies_list:</span><br><span class="line">    cookie_dict [cookie.split (<span class="string">'='</span>)[<span class="number">0</span>]] = cookie.split (<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 第二种方式 </span></span><br><span class="line">cookie_dict = &#123;cookie.split (<span class="string">'='</span>)[<span class="number">0</span>]:cookie.split (<span class="string">'='</span>)[<span class="number">1</span>] <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies.split (<span class="string">';'</span>)&#125;</span><br></pre></td></tr></table></figure></p>
<p>   自动保存 cookie:session <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># session: 自动保存 cookie, 类似于 cookiesJar</span></span><br><span class="line">session = requests.session ()</span><br><span class="line"><span class="comment"># 1. 代码登录 </span></span><br><span class="line">login_url = <span class="string">'https://www.yaozh.com/login/'</span></span><br><span class="line">login_form_data = &#123;</span><br><span class="line">    <span class="string">'username'</span>:<span class="string">' 骑牛为何 '</span>,</span><br><span class="line">    <span class="string">'pwd'</span>:<span class="string">'SSJ7fmbuDsnGWLN'</span>,</span><br><span class="line">    <span class="string">'formhash'</span>:<span class="string">'3121976F6C'</span>,</span><br><span class="line">    <span class="string">'backurl'</span>:<span class="string">'https%3A%2F%2Fwww.yaozh.com%2F'</span></span><br><span class="line">&#125;</span><br><span class="line">login_response = session.post (login_url, data=login_form_data, headers=headers)</span><br><span class="line"><span class="comment"># 2. 成功登陆后带着有效的 cookie 访问请求数据 </span></span><br><span class="line">data = session.get (member_url, headers=headers).content.decode ().encode (<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义函数和带参过程</title>
    <url>/2019/07/26/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E5%92%8C%E5%B8%A6%E5%8F%82%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="创建自定义函数">1. 创建自定义函数</h1>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Function zmj (x)</span><br><span class="line">    zmj = x / 6.03 - x * 0.03</span><br><span class="line">End Fuction</span><br><span class="line">Function ch (str As String)</span><br><span class="line">If str = &quot; 男 & quot; Then</span><br><span class="line">    ch = &quot; 先生 & quot;</span><br><span class="line">Else</span><br><span class="line">    ch = &quot; 女士 & quot;</span><br><span class="line">End If</span><br><span class="line">End Function</span><br><span class="line">Function jqzf (str As String, str1 As String, i As Integer)</span><br><span class="line">jqzf = Split (str, str1)(i - 1)</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure>
<h1 id="创建带参数的过程">2. 创建带参数的过程</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub cjb (str As String)</span><br><span class="line">Dim sht As Worksheet</span><br><span class="line">For Each sht In Sheets</span><br><span class="line">    If sht.Name = str Then</span><br><span class="line">        k = 1</span><br><span class="line">    End If</span><br><span class="line">Next</span><br><span class="line">If k = 0 Then</span><br><span class="line">    Sheets.Add after:=Sheets (Sheets.Count)</span><br><span class="line">    Sheets (Sheets.Count).Name = str</span><br><span class="line">End If</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<h1 id="加载宏让-vba-代码运行在所有文件中">3. 加载宏：让 VBA 代码运行在所有文件中</h1>
<p>   第一步：把代码放在代码库中。把带有 VBA 代码的 excel 工作簿保存为 Excel 加载宏的文档类型，此时会有指定的文档保存位置，不要修改。    第二步：告诉 Excel 每次打开文档都加载这个宏。点击开发工具 - 加载项：Excel 加载项，选择要添加的宏，勾选即可。    第三步：设置宏按钮。点击文件 - 选项：快速访问工具栏，左侧 - 从下列位置选择命令：宏，添加到右侧即可。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>在 VBA 中使用公式</title>
    <url>/2019/07/25/%E5%9C%A8VBA%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="使用工作表函数">1. 使用工作表函数</h1>
<a id="more"></a>
<p>   在工作表中使用函数时，一般以 Application.WorksheetFunction 作为开头： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Application.WorksheetFunction.CountA ()</span><br><span class="line">Application.WorksheetFunction.CountIf ()</span><br><span class="line">Application.WorksheetFunction.VLookup ()</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr class="header">
<th>函数名</th>
<th>函数类型</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Strings</td>
<td>文本函数</td>
</tr>
<tr class="even">
<td>Math</td>
<td>数学函数</td>
</tr>
<tr class="odd">
<td>Datetime</td>
<td>日期时间</td>
</tr>
<tr class="even">
<td>FileSystem</td>
<td>文件信息</td>
</tr>
<tr class="odd">
<td>Financial</td>
<td>财务函数</td>
</tr>
<tr class="even">
<td>Information</td>
<td>信息函数</td>
</tr>
<tr class="odd">
<td>Interaction</td>
<td>交互函数</td>
</tr>
</tbody>
</table>
<h1 id="应用实例">2. 应用实例</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos; 出错时继续运行程序 </span><br><span class="line">On Error Resume Next  // Resume 只是 Error 的一种类型 </span><br><span class="line">&apos; 判断数据类型是否为整数 </span><br><span class="line">IsNumeric ()</span><br><span class="line">&apos; 在字符串中的位置 </span><br><span class="line">Instr ()</span><br><span class="line">&apos; 分割字符串 </span><br><span class="line">Split ()</span><br><span class="line">&apos; 文本转换为数值 </span><br><span class="line">Val ()</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>就业数据</title>
    <url>/2019/07/25/%E5%B0%B1%E4%B8%9A%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="与就业相关的统计指标">1. 与就业相关的统计指标</h1>
<a id="more"></a>
<p>   目前我国关于就业情况的统计指标有很多，常见的指标包括城镇登记失业率、城镇调查失业率、求人倍率、劳动参与率、新增就业人数等。 <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190725180355.png"></p>
<h1 id="就业供给与需求">2. 就业：供给与需求</h1>
<h2 id="供给端">2.1 供给端</h2>
<p>   供给端：农民工人数增速、劳动力参与率。</p>
<h2 id="需求端">2.2 需求端</h2>
<p>   需求端：产业结构升级与就业结构升级 - 各行业就业人数同比。</p>
<h1 id="菲利普斯曲线中国的适用性">3. 菲利普斯曲线：中国的适用性</h1>
<p>  “二元经济理论”：非农和农业部门之间的就业流动，削弱了通胀与失业之间的联系。因此，求人倍率同比增减和非制造业 PMI 从业人员对通胀与利率有一定指示作用。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>爬虫学习 day03 - 设置付费代理</title>
    <url>/2019/07/24/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0day03-%E8%AE%BE%E7%BD%AE%E4%BB%98%E8%B4%B9%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>   付费代理和免费代理不同，付费代理的设置有两种方式： <a id="more"></a> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">def money_proxy_use ():</span><br><span class="line">    # 第一种方式 </span><br><span class="line">    # 1. 代理 IP</span><br><span class="line">    money_proxy = &#123;</span><br><span class="line">        &quot;http&quot;: &quot;username:password@IP 地址：端口 & quot;</span><br><span class="line">    &#125;</span><br><span class="line">    # 2. 代理的处理器 </span><br><span class="line">    proxy_handler = urllib.request.ProxyHandler (money_proxy)</span><br><span class="line">    # 3. 通过处理器创建 opener</span><br><span class="line">    opener = urllib.request.build_opener (proxy_handler)</span><br><span class="line">    # 4. open 发送请求 </span><br><span class="line">    opener.open (&quot; 网络地址 & quot;)</span><br><span class="line">    # 第二种方式：优点是速度快和方便设置多个代理 </span><br><span class="line">    user_name = &quot;&quot;</span><br><span class="line">    pass_word = &quot;&quot;</span><br><span class="line">    proxy_money = &quot;IP 地址：端口 & quot;</span><br><span class="line">    # 2. 创建密码管理器，添加用户名和密码 </span><br><span class="line">    password_manager = urllib.request.HTTPPasswordMgrWithDefaultRealm ()</span><br><span class="line">    # uri - 定位 uri&gt;url - 资源定位符 </span><br><span class="line">    password_manager.add_password (None, proxy_money)</span><br><span class="line">    # 3. 创建可以验证代理 IP 的处理器 </span><br><span class="line">    handle_auth_proxy = urllib.request.ProxyBasicAuthHandler (password_manager)</span><br><span class="line">    # 4. 根据处理器创建 opener</span><br><span class="line">    opener_auth = urllib.request.build_opener (handle_auth_proxy)</span><br><span class="line">    # 5. 发送请求 </span><br><span class="line">    opener_auth.open (&quot; 网络地址 & quot;)</span><br></pre></td></tr></table></figure></p>
<p>   对于网站管理员而言，有时候也有爬取自己网站数据的需求，代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def auth_nei_wang ():</span><br><span class="line">    # 1. 用户名和密码 </span><br><span class="line">    user = &quot;admin&quot;</span><br><span class="line">    pwd = &quot;admin123&quot;</span><br><span class="line">    nei_url = &quot;http://ip 地址 & quot;</span><br><span class="line">    # 2. 创建密码管理器 </span><br><span class="line">    pwd_manager = urllib.request.HTTPPasswordMgrWithDefaultRealm ()</span><br><span class="line">    pwd_manager.add_password (None, nei_url, use, pwd)</span><br><span class="line">    # 3. 创建认证的处理器 </span><br><span class="line">    auth_handler = urllib.request.HTTPBasicAuthHandler (pwd_manager)</span><br><span class="line">    # 4. 根据处理器创建 opener</span><br><span class="line">    opener = urllib.request.build_opener (auth_handler)</span><br><span class="line">    # 5. 发送请求 </span><br><span class="line">    response = opener.open (nei_url)</span><br><span class="line">    print (response)</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA 事件与典型应用</title>
    <url>/2019/07/23/VBA%E4%BA%8B%E4%BB%B6%E4%B8%8E%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="单元格格式设置with-语句">1. 单元格格式设置：with 语句</h1>
<a id="more"></a>
<p>   在 VBA 中，可以使用 with 语句方便地进行单元格格式的设置： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">With 对象名称 </span><br><span class="line">    . 语句 1</span><br><span class="line">    . 语句 2</span><br><span class="line">End With</span><br></pre></td></tr></table></figure></p>
<p>   上述语句等同于： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 对象名称。语句 1</span><br><span class="line"> 对象名称。语句 2</span><br></pre></td></tr></table></figure></p>
<h1 id="vba-中的事件">2. VBA 中的事件</h1>
<h2 id="工作簿的事件">2.1 工作簿的事件</h2>
<p>   工作簿的事件列表如下：</p>
<table>
<thead>
<tr class="header">
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Activate</td>
<td>激活工作薄时</td>
</tr>
<tr class="even">
<td>AddinInstall</td>
<td>当工作簿作为加载宏安装时</td>
</tr>
<tr class="odd">
<td>AddinUninstall</td>
<td>工作簿作为加载宏卸载时</td>
</tr>
<tr class="even">
<td>BeforeClose</td>
<td>关闭工作薄前</td>
</tr>
<tr class="odd">
<td>BeforePrint</td>
<td>打印工作薄 (或其中任何内容) 之前</td>
</tr>
<tr class="even">
<td>BeforeSave</td>
<td>保存工作薄前</td>
</tr>
<tr class="odd">
<td>Deactivate</td>
<td>工作簿从活动状态转为非活动状态时</td>
</tr>
<tr class="even">
<td>NewSheet</td>
<td>在工作簿中新建工作表时</td>
</tr>
<tr class="odd">
<td>Open</td>
<td>打开工作簿时</td>
</tr>
<tr class="even">
<td>PivotTableCloseConnection</td>
<td>在数据透视表关闭与其数据源的连接之后</td>
</tr>
<tr class="odd">
<td>PivotTableOpenConnection</td>
<td>在数据透视表打开与其数据源的连接之后</td>
</tr>
<tr class="even">
<td>SheetActivate</td>
<td>激活任何一张表时</td>
</tr>
<tr class="odd">
<td>SheetBeforeDoubleClick</td>
<td>双击任何工作表时</td>
</tr>
<tr class="even">
<td>SheetBeforeRightClick</td>
<td>鼠标右键单击任一工作表时</td>
</tr>
<tr class="odd">
<td>SheetCalculate</td>
<td>工作表重新计算时</td>
</tr>
<tr class="even">
<td>SheetChange</td>
<td>更改工作表中的单元格时</td>
</tr>
<tr class="odd">
<td>SheetDeactivate</td>
<td>任一工作表由活动状态转为非活动状态时</td>
</tr>
<tr class="even">
<td>SheetFollowHyperlink</td>
<td>单击 Microsoft Excel 中的任意超链接时</td>
</tr>
<tr class="odd">
<td>SheetPivotTableUpdate</td>
<td>数据透视表的工作表更新之后</td>
</tr>
<tr class="even">
<td>SheetSelectionChange</td>
<td>工作簿中的数据透视表更新之后</td>
</tr>
<tr class="odd">
<td>WindowActivate</td>
<td>工作簿的窗口激活时</td>
</tr>
<tr class="even">
<td>WindowDeactivate</td>
<td>工作簿的窗口变为非活动状态时</td>
</tr>
<tr class="odd">
<td>WindowResize</td>
<td>工作簿窗口调整大小时</td>
</tr>
</tbody>
</table>
<h2 id="工作表的事件">2.2 工作表的事件</h2>
<p>   工作表的事件列表如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">事件</th>
<th style="text-align: center;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Activate</td>
<td style="text-align: center;">激活工作表时</td>
</tr>
<tr class="even">
<td style="text-align: center;">Deactivate</td>
<td style="text-align: center;">工作表从活动状态转为非活动状态时</td>
</tr>
<tr class="odd">
<td style="text-align: center;">BeforeDoubleClick</td>
<td style="text-align: center;">双击工作表前</td>
</tr>
<tr class="even">
<td style="text-align: center;">BeforeRightClick</td>
<td style="text-align: center;">右键单击工作表时</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Calculate</td>
<td style="text-align: center;">对工作表进行重新计算之后</td>
</tr>
<tr class="even">
<td style="text-align: center;">Change</td>
<td style="text-align: center;">更改工作表中的单元格，或外部链接引起单元格时</td>
</tr>
<tr class="odd">
<td style="text-align: center;">FollowHyperlink</td>
<td style="text-align: center;">单击工作表上的任意超链接时</td>
</tr>
<tr class="even">
<td style="text-align: center;">PivotTableUpdate</td>
<td style="text-align: center;">在工作簿中的数据透视表更新之后</td>
</tr>
<tr class="odd">
<td style="text-align: center;">SelectionChange</td>
<td style="text-align: center;">工作表上的选定区域发生改变时</td>
</tr>
</tbody>
</table>
<h2 id="activex-控件的事件">2.3 ActiveX 控件的事件</h2>
<p>  ActiveX 控件的事件就是编写宏，不同于表单控件指定现成的宏。</p>
<h1 id="有用的操作实例">3. 有用的操作实例</h1>
<h2 id="高亮显示当前单元格所在的整行数据">3.1 高亮显示当前单元格所在的整行数据</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub 高亮 ()</span><br><span class="line">Cells.Interior.Pattern = xlNone</span><br><span class="line">Selection.EntireRow.Interior.Color = 65535</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<p>   添加到工作表的事件当中：(1) 在 VBA 中选中需要操作的工作表，在顶部左栏选中 Worksheet，在顶部右栏选中工作表事件：SelectionChange。(2) 复制上述 VBA 代码到此。</p>
<h2 id="输入条件后自动完成筛选">3.2 输入条件后自动完成筛选</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub 自动筛选 ()</span><br><span class="line">Range (&quot; 筛选后数据所在区域 & quot;).ClearContents</span><br><span class="line">Range (&quot; 原始数据所在区域 & quot;).AutoFilter Field:=4, Criteria1:=Range (&quot;i2&quot;)</span><br><span class="line">Range (&quot; 原始数据所在区域 & quot;).Copy Range (&quot;l1&quot;)</span><br><span class="line">Range (&quot; 原始数据所在区域 & quot;).AutoFilter</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<p>   添加到工作表的事件当中：(1) 在 VBA 中选中需要操作的工作表，在顶部左栏选中 Worksheet，在顶部右栏选中工作表事件：Change。(2) 复制上述 VBA 代码到此。</p>
<p>   但是，上述代码运行时会出错，因为工作表事件：change 会导致代码的循环运行，因此必须在原代码前后添加控制事件的代码： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Application.EnableEvents = False</span><br><span class="line"> 原代码 </span><br><span class="line">Application.EnableEvents = True</span><br></pre></td></tr></table></figure></p>
<h2 id="自动更新">3.3 自动更新</h2>
<p>   在 VBA 中选中需要操作的工作表，在顶部左栏选中 Worksheet，在顶部右栏选中工作表事件：Activate, 然后添加下述代码： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ActiveWorkbook.RefreshAll</span><br></pre></td></tr></table></figure></p>
<h2 id="自动备份">3.5 自动备份</h2>
<p>   在 VBA 中选中 ThisWorkbook，在顶部左栏选中 Workbook，在顶部右栏选中工作簿事件：BeforeSave, 然后添加下述代码： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ThisWorkbook.SaveCopyAs &quot; 存储路径 & quot; &amp; Format (Now (), &quot;yyyymmddhhmmss&quot;) &amp; &quot;.xlsx&quot;</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习 day02 - 参数的传递与代理的使用</title>
    <url>/2019/07/23/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0day02-%E5%8F%82%E6%95%B0%E7%9A%84%E4%BC%A0%E9%80%92%E4%B8%8E%E4%BB%A3%E7%90%86%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="中文参数的传递">1. 中文参数的传递</h1>
<p>   在 Python 的 urllib 库中，有专门用来处理中文参数的模块：parse。 <a id="more"></a> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.parse</span><br></pre></td></tr></table></figure></p>
<p>   一个实例： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import urllib.parse</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">def get_parmas ():</span><br><span class="line">    url = &quot;http://www.baidu.com/s?wd=&quot;</span><br><span class="line"></span><br><span class="line">    parmas = &#123;</span><br><span class="line">        &quot;wd&quot;: &quot; 中文 & quot;,</span><br><span class="line">        &quot;key&quot;: &quot;zhang&quot;,</span><br><span class="line">        &quot;value&quot;: &quot;San&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    str_parmas = urllib.parse.urlencode (parmas)                      // 使用 urlencode 模块将 dict 转换为 url 编码后的字符串 </span><br><span class="line">    print (str_parmas)</span><br><span class="line">    final_url = url + str_parmas</span><br><span class="line">    end_url = urllib.parse.quote (final_url, safe=string.printable)   // 将中文转换为 URL 编码格式 </span><br><span class="line">    response = urllib.request.urlopen (end_url)</span><br><span class="line">    data = response.read ().decode (&quot;utf-8&quot;)</span><br><span class="line">    print (data)</span><br><span class="line"></span><br><span class="line">get_parmas ()</span><br></pre></td></tr></table></figure></p>
<p>   从上述实例中可以看出，主要分为两步： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">import string</span><br><span class="line"> 新变量名 = urllib.parse.urlencode (包含中文的 dict)</span><br><span class="line"> 最终变量名 = urllib.parse.quote (+ 链接前缀 + 新变量名，safe=string.printable)</span><br></pre></td></tr></table></figure></p>
<h1 id="请求头headers">2. 请求头：headers</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"># 获取所有请求头的信息 </span><br><span class="line"> 新变量名 = request.headers</span><br><span class="line"># 获取指定请求头的信息 </span><br><span class="line">request.add_header (&quot; 请求头名 & quot;: &quot; 请求头内容 & quot;)                             # 添加请求头信息 </span><br><span class="line"> 新变量名 = request_headers = request.get_heade (&quot; 请求头名 & quot;)      # 注意：首字母必须大写，其他字母必须是小写 </span><br><span class="line"># 添加请求列表并实现随机获取 </span><br><span class="line"> 新变量名 =[ </span><br><span class="line">    &quot;&quot;,</span><br><span class="line">    &quot;&quot;,</span><br><span class="line">    &quot;&quot;</span><br><span class="line">]</span><br><span class="line"> 新变量名 1 = random.choice (新变量名)</span><br><span class="line">request.add_header (&quot; 请求头名 & quot;, 新变量名 1)</span><br></pre></td></tr></table></figure>
<p>   常用的请求头是：<a href="https://www.jianshu.com/p/da6a44d0791e" target="_blank" rel="noopener">User-Agent</a>。 # 3. 设置代理 IP ## 3.1 自定义添加代理的功能    在 urlopen 函数中，没有添加代理的选项，因此需要自己添加代理。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建自己的代理处理器 </span><br><span class="line"> 新变量名 = urllib.request.ProxyHandler (代理 IP)   </span><br><span class="line"># 创建自己的 opener</span><br><span class="line"> 新变量名 1 = urllib.request.build_opener (新变量名)</span><br></pre></td></tr></table></figure></p>
<p>   代理 IP 可以在网上查找，既有免费的 IP 也有付费的 IP： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 免费 IP</span><br><span class="line"> 新变量名 = &#123;</span><br><span class="line">    &quot;http&quot;:&quot;http://IP 地址：端口 & quot;</span><br><span class="line">&#125;</span><br><span class="line"># 付费 IP</span><br><span class="line"> 新变量名 = &#123;</span><br><span class="line">    &quot;http&quot;:&quot; 账号 & quot;:&quot; 密码 & quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>   一个代理 IP，尤其是免费代理 IP，时常会失效，一个解决方法是以数量提升质量： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 定义 proxy_list</span><br><span class="line">proxy_list = [</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    &#123;&#125;</span><br><span class="line">]</span><br><span class="line">for proxy in proxy_list:</span><br><span class="line">    proxy_handler = urllib.request.ProxyHandler (proxy)</span><br><span class="line">    opener = urllib.request.build_opener (proxy_handler)</span><br><span class="line">    response = opener.open (url)</span><br><span class="line">    data = response.read ()</span><br><span class="line">    print (data)</span><br><span class="line"># 避免错误导致程序运行停止 </span><br><span class="line">try:</span><br><span class="line">    opener.open (&quot;url&quot;, timeout=1)  # timeout 设置响应时间，超过响应时间就报错 </span><br><span class="line">except Exception as e:</span><br><span class="line">    print (e)</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫学习 day01: 爬虫的工作原理</title>
    <url>/2019/07/22/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0day01-%E7%88%AC%E8%99%AB%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="爬虫的工作原理和步骤">1. 爬虫的工作原理和步骤</h1>
<a id="more"></a>
<p>   爬虫的工作原理和步骤是：</p>
<p>   第一， 确认你抓取的目标 url 是哪一个。</p>
<p>   第二， 使用 python 代码发送请求获取数据。</p>
<p>   第三， 解析获取到的数据。此时，可能发现原有的目标 url 不适合， 找到新的目标 url 回到第一步。</p>
<p>   第四， 数据持久化， 将数据存储到本地。</p>
<h1 id="一个实例">2. 一个实例</h1>
<p>   目标：将百度搜索中美女搜索结果的网页下载到本地</p>
<p>   第一步：确认抓取的目标 url: https://www.baidu.com/s?wd = 美女</p>
<p>   第二步：使用 python 代码发送请求获取数据。在这里，使用到的第三方库是 urllib, 模块是 request。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">def get_baidu_meinv ():</span><br><span class="line">    url = &quot;https://www.baidu.com/s?wd=&quot;  </span><br><span class="line">    name = &quot; 美女 & quot;</span><br><span class="line">    final_url = url + name</span><br><span class="line">    print (final_url)</span><br><span class="line">    response = urllib.request.urlopen (final_url) </span><br><span class="line">get_baidu_meinv ()</span><br></pre></td></tr></table></figure></p>
<p>   此时，返回了如下错误提示： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 10-11: ordinal not in range (128)</span><br></pre></td></tr></table></figure></p>
<p>   由如上错误信息可知是编码问题，解决方法如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">import string</span><br><span class="line">encode_new_url = urllib.parse.quote (final_url, safe = string.printable)</span><br><span class="line">response = urllib.request.urlopen (encode_new_url)</span><br></pre></td></tr></table></figure></p>
<p>   第三步：解析获取到的数据： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data = response.read ().decode ()</span><br><span class="line">print (data)</span><br></pre></td></tr></table></figure></p>
<p>   第四步：数据持久化，将数据下载到本地： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open (&quot;D:\ 代码 \ 爬虫 \day01\02-baidu - 美女.html&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">    f.write (data)</span><br></pre></td></tr></table></figure></p>
<hr>
<p><a href="https://www.cnblogs.com/ymjyqsx/p/6554817.html" target="_blank" rel="noopener">python 文件读写，以后就用 with open 语句</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>操作单元格</title>
    <url>/2019/07/21/%E6%93%8D%E4%BD%9C%E5%8D%95%E5%85%83%E6%A0%BC/</url>
    <content><![CDATA[<h1 id="单元格的常见表示方式">1. 单元格的常见表示方式</h1>
<a id="more"></a>
<p>   在 VBA 代码中，常用的表示单元格的方法如下: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[A1]</span><br><span class="line">Range (&quot;A1&quot;)</span><br><span class="line">Cells (1,1)</span><br></pre></td></tr></table></figure></p>
<h1 id="单元格的常用操作">2. 单元格的常用操作</h1>
<p>   针对单元格的对象，有以下操作： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select: 选中单元格 </span><br><span class="line">Delete：删除单元格 </span><br><span class="line">Copy：复制单元格 </span><br><span class="line">ClearContents：清空单元格内容 </span><br></pre></td></tr></table></figure></p>
<p>   针对单元格的属性，有以下操作: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Value: 单元格的值 </span><br><span class="line">Text：单元格的文本内容 </span><br><span class="line">Row：行号 </span><br><span class="line">Column：列号 </span><br><span class="line">Entire row: 整行 </span><br><span class="line">Offset: 偏移 </span><br></pre></td></tr></table></figure></p>
<h1 id="实例拆分工作表">3. 实例：拆分工作表</h1>
<p>   任务：将下表按部门进行拆分 <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190721163324.png"> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub 用循环拆分 ()</span><br><span class="line"></span><br><span class="line">Dim i, j As Integer</span><br><span class="line"></span><br><span class="line">For i = 2 To Sheet1.Range (&quot;a65535&quot;).End (xlUp).Row</span><br><span class="line">    j = Sheets (Sheet1.Range (&quot;d&quot; &amp; i).Value).Range (&quot;a65535&quot;).End (xlUp).Row + 1</span><br><span class="line">    Sheet1.Range (&quot;a&quot; &amp; i).EntireRow.Copy Sheets (Sheet1.Range (&quot;d&quot; &amp; i).Value).Range (&quot;a&quot; &amp; j)</span><br><span class="line">Next</span><br><span class="line"></span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub 用筛选拆分 ()</span><br><span class="line">Dim i As Integer</span><br><span class="line">Dim sht As Worksheet</span><br><span class="line"></span><br><span class="line">i = Sheet1.Range (&quot;a65535&quot;).End (xlUp).Row</span><br><span class="line">For Each sht In Worksheets</span><br><span class="line">    If sht.Name &lt;&gt; 数据 Then</span><br><span class="line">    </span><br><span class="line">        Sheet1.Range (&quot;a1:f&quot; &amp; i).AutoFilter field:=4, Criteria1:=&quot;=&quot; &amp; sht.Name</span><br><span class="line">        Sheet1.Range (&quot;a1:f&quot; &amp; i).Copy sht.Range (&quot;a1&quot;)</span><br><span class="line">    </span><br><span class="line">    End If</span><br><span class="line">Next</span><br><span class="line"></span><br><span class="line">Sheet1.Range (&quot;a1:f&quot; &amp; i).AutoFilter</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<h1 id="实例-按需拆分工作表">4. 实例： 按需拆分工作表</h1>
<p>   前述 VBA 代码只能按第四列进行筛选和拆分，但实际工作情况更为复杂一些，需要按需进行筛选和拆分，代码如下:</p>
<pre><code>Sub cfsj ()
Dim sht As Worksheet
Dim k, i, j As Integer
Dim irow As Integer &#39; 这个说的是一共多少行

Dim l As Integer

l = InputBox (&quot;请输入你要按第几列分&quot;)

irow = Sheet1.Range (&quot;a65536&quot;).End (xlUp).Row

If Sheets.Count &gt; 1 Then

    Application.DisplayAlerts = False
    
    For Each sht1 In Sheets
        If sht1.Name &lt;&gt; &quot;数据&quot; Then
            sht1.Delete
        End If
    Next
    
    Application.DisplayAlerts = True

End If

&#39; 拆分表
For i = 2 To irow
    k = 0
    For Each sht In Sheets
        If sht.Name = Sheet1.Cells (i, l) Then
            k = 1
        End If
    Next
    
    
    If k = 0 Then
        Sheets.Add after:=Sheets (Sheets.Count)
        Sheets (Sheets.Count).Name = Sheet1.Cells (i, l)
    End If

Next
&#39; 拷贝数据

For j = 2 To Sheets.Count
    Sheet1.Range (&quot;a1:f&quot; &amp; irow).AutoFilter Field:=4, Criteria1:=Sheets (j).Name
    Sheet1.Range (&quot;a1:f&quot; &amp; irow).Copy Sheets (j).Range (&quot;a1&quot;)
Next

Sheet1.Select
Selection.AutoFilter

MsgBox &quot;主人，数据已经做好了&quot;


End Sub</code></pre>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>操作工作簿</title>
    <url>/2019/07/20/%E6%93%8D%E4%BD%9C%E5%B7%A5%E4%BD%9C%E7%B0%BF/</url>
    <content><![CDATA[<h1 id="for-each-循环">1. for each 循环</h1>
<p>  for each 和 for 语句的作用基本相同，但 for each 语句相对简洁一点，但是 for each 的对象是数组或集合，不能直接指定对象。 <a id="more"></a> 实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos; for each 循环 </span><br><span class="line">Dim sht As Worksheet</span><br><span class="line">Dim i As Integer</span><br><span class="line">For Each sht In Worksheets</span><br><span class="line">    If sht.Name &lt;&gt; &quot; 部门 & quot; Then</span><br><span class="line">        i = i + 1</span><br><span class="line">        Range (&quot;a&quot; &amp; i) = sht.Name</span><br><span class="line">    End If</span><br><span class="line">Next</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos; for 循环 </span><br><span class="line">Dim i As Integer</span><br><span class="line">For i = 2 To Sheets.Count</span><br><span class="line">    Range (&quot;a&quot; &amp; i - 1) = Sheets (i).Name</span><br><span class="line">Next</span><br></pre></td></tr></table></figure>
<h1 id="操作工作簿">2. 操作工作簿</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos; 新建工作簿 </span><br><span class="line">Workbooks.Add </span><br><span class="line">&apos; 保存工作簿 </span><br><span class="line">Workbooks.SaveAs filename：=&quot; 完整的文件路径 + 文件名 & quot;</span><br><span class="line">&apos; 保存已创建的工作簿 </span><br><span class="line">Workbooks.Save</span><br><span class="line">&apos; 打开工作簿 </span><br><span class="line">Workbooks.Open</span><br><span class="line">&apos; 关闭工作簿 </span><br><span class="line">Workbooks.Close</span><br></pre></td></tr></table></figure>
<h1 id="重新理解取表名dim-sht-as-worksheet">3. 重新理解取表名：Dim sht As Worksheet</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dim i As Integer</span><br><span class="line">Dim sht As Worksheet</span><br><span class="line"></span><br><span class="line">For Each sht In Worksheets</span><br><span class="line">    sht.Select</span><br><span class="line">    For i = 100 To 2 Step -1</span><br><span class="line">        &apos; 处理性别的代码 </span><br><span class="line">        If Range (&quot;e&quot; &amp; i) = &quot; 男 & quot; Then</span><br><span class="line">            Range (&quot;f&quot; &amp; i) = &quot; 先生 & quot;</span><br><span class="line">        Else</span><br><span class="line">            Range (&quot;f&quot; &amp; i) = &quot; 女士 & quot;</span><br><span class="line">        End If</span><br><span class="line">        </span><br><span class="line">        &apos; 处理专业代号 </span><br><span class="line">        If Range (&quot;b&quot; &amp; i) = &quot; 理工 & quot; Then</span><br><span class="line">            Range (&quot;c&quot; &amp; i) = &quot;LG&quot;</span><br><span class="line">        ElseIf Range (&quot;b&quot; &amp; i) = &quot; 文科 & quot; Then</span><br><span class="line">            Range (&quot;c&quot; &amp; i) = &quot;WK&quot;</span><br><span class="line">        Else</span><br><span class="line">            Range (&quot;c&quot; &amp; i) = &quot;CJ&quot;</span><br><span class="line">        End If</span><br><span class="line">            </span><br><span class="line">        &apos; 删除空行 </span><br><span class="line">        If Range (&quot;d&quot; &amp; i) = &quot;&quot; Then</span><br><span class="line">            Range (&quot;D&quot; &amp; i).Select</span><br><span class="line">            Selection.EntireRow.Delete</span><br><span class="line">        End If</span><br><span class="line">    Next</span><br><span class="line">    </span><br><span class="line">    &apos; 拆分表 </span><br><span class="line">    sht.Copy</span><br><span class="line">    ActiveWorkbook.SaveAs Filename:=&quot;d:\data\&quot; &amp; sht.Name &amp; &quot;.xlsx&quot;</span><br><span class="line">    ActiveWorkbook.Close</span><br><span class="line">    </span><br><span class="line">Next</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>stata 处理数据的技巧</title>
    <url>/2019/07/10/stata%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="创建数据的技巧">1. 创建数据的技巧</h1>
<a id="more"></a>
<h1 id="n-和-_n">1.1 _n 和 _N</h1>
<p>  _n 是数据左侧 stata 自动提供的编号，是一个没有变量名的特殊变量，不能通过 list 方法进行列示，也会随着样本排序的变化而变化； _N 则是样本数。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysuse sp500.dta, clear  // 导入数据 </span><br><span class="line">sort open</span><br><span class="line">gen open_max = open [_N]  // 利用排序和 _N 得到最大值 </span><br><span class="line">gen open_diff = open [_n] - open [_N]  // 计算每个数据和最大值之间的差 </span><br><span class="line">gen open_range = open [_N] - open [1]  // 计算数据之间的最大差异 </span><br><span class="line">sort date</span><br><span class="line">gen date_diff = open [_n] - open [_n-1] // 先对时间变量进行排序， 然后计算 open 变量的差分 </span><br><span class="line">gen ln_date_diff = ln (open [_n]) - ln (open [_n-1]) // 计算对数差分 </span><br><span class="line">gen mv3_open = (open [_n-1] + open [_n] + open [_n+1]) / 3   // 计算移动平均 </span><br><span class="line">* 时间序列 </span><br><span class="line">* 滞后项、前推项、差分 </span><br><span class="line">qui tsset date // 声明数据为时间序列：对时间进行排序 qui 表示不再屏幕上显示结果，只在后台运行命令 </span><br><span class="line">gen open_lag  = L.open   // 滞后一期，以日期而非序号作为前推量，如 2019-07-02，前推 1 期为 2019-07-01，如果 2019-07-01 的数据不存在，则无法计算。  </span><br><span class="line">gen open_lag2 = L2.open  // 滞后两期 </span><br><span class="line">gen open_forward         // 前推一期 </span><br><span class="line">gen open_diff  = D.open  // 一期差分 </span><br><span class="line">gen open_diff2 = D2.open// 两期差分 </span><br><span class="line">reg close L (1/3).(close open)  // L (close open) 表示对 close 和 open 变量做滞后期，(1/3) 则表示滞后 1 期、2 期和 3 期。</span><br><span class="line">* 增长率 </span><br><span class="line">qui tsset date</span><br><span class="line">gen r1 = D.close/L.close// 第一种计算方法 </span><br><span class="line">gen ln_close = ln (close)</span><br><span class="line">gen r2 = D.ln_close      // 第二种计算方法：文献中常用的方法，与第一种方法略有差距。</span><br><span class="line">* 分组计算 </span><br><span class="line">bysort industry: gen gid = _n  // 根据 _n 产生新变量 gid, gid 中的数字序号是分组的。</span><br></pre></td></tr></table></figure></p>
<h2 id="创建虚拟变量">1.2 创建虚拟变量</h2>
<p>   所谓虚拟变量，就是把原来的一个多分类变量转化为多个二分变量，总的来说就是，如果多分类变量有 k 个类别，则可以转化为 k-1 个二分变量。如变量 x 为赋值 1、2、3、4 的四分类变量，就可以转换为 3 个赋值为 0 和 1 的二分类变量。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysuse nlsw88.dta, clear // 导入数据 </span><br><span class="line">* 产生虚拟变量 </span><br><span class="line">gen dum_race = 0                       </span><br><span class="line">    replace dum_race = 1 if race = 2</span><br><span class="line">gen dum_race3 = 0</span><br><span class="line">        replace dum_race3=1 if race==3</span><br><span class="line">* 基于类别变量直接生成虚拟变量：tab 命令 </span><br><span class="line">tab race, gen (dum_r) //  tab 类别变量名，gen (虚拟变量名)：此命令会产生 k 个变量，其中 k 为类别变量的类别数。</span><br><span class="line">* 基于类别变量自定义生成虚拟变量：recode 命令 </span><br><span class="line">recode race (1 = 0) (2 3 = 1), gen (dum_r)  // 此命令只会基于 rule 产生一个虚拟变量：recode varlist (rule) [(rule) ...] [, generate (newvar)]</span><br><span class="line">* 自定义规则生成虚拟变量：cond</span><br><span class="line">gen dum_r = cond (race &gt; 1, 0, 1) //cond (x,a,b [,c]): x 是条件，表示等于时符号为 ==； a 为条件 x 成立时返回的值，b 为条件 x 不成立时返回的值，c 为条件 x 中变量出现缺失值时返回的值。</span><br><span class="line">* 通过 todummy 创建虚拟变量 </span><br><span class="line">todummy race, values (1 \ 2 3) generate (dum_r1 dum_r2) //race=1 则 dum_r1=1; race=2 或 race3 则 dum_r2=1。</span><br><span class="line">* 基于类别变量生成虚拟变量: xi 命令 </span><br><span class="line">xi i.race, prefix (dum_) noomit // 为了避免再次使用 xi 命令时以前创建的虚拟变量被覆盖，可以使用 prefix () 自定义前缀；为了生成 k 个虚拟变量，也需要使用 noomit 选项。</span><br></pre></td></tr></table></figure></p>
<h2 id="创建因子变量">1.3 创建因子变量</h2>
<p>   因子变量（Factor Variable）是对现有变量的延伸，是从类别变量中生成虚拟变量、设定类别变量之间的交乘项、类别变量与连续型变量之间的交乘项或连续变量之间的交乘项（或多项式）。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg wage i.race#i.occupation  // 两个类别变量的交乘项 </span><br><span class="line">reg wage i.race##i.occupation// 虚拟变量 + 两个类别变量的交乘项 </span><br><span class="line">reg wage i.race#c.hours       // 类别变量与连续变量的交乘项 </span><br><span class="line">reg wage c.age##c.age         // 连续变量与连续变量的交乘项（高次项）- 三次方：c.age##c.age##c.age</span><br></pre></td></tr></table></figure></p>
<p>   对照组的设定： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg wage ib3.race  //ib - 设定对照组；3 代表将 race=3 的类别变量作为对照组 </span><br><span class="line">fvset base 3 race  // 在后续使用 i.race 过程中，race=3 都是对照组 </span><br></pre></td></tr></table></figure></p>
<h1 id="egen-命令">2. egen 命令</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">egen [type] newvar = fcn (arguments) [if] [in] [, options]</span><br></pre></td></tr></table></figure>
<h2 id="egen-与-gen-的区别">2.1 egen 与 gen 的区别</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* sum 命令的含义不同 </span><br><span class="line">sysuse sp500, clear</span><br><span class="line">gen  sum_close0 = sum (close)  // 累加 </span><br><span class="line">egen sum_close1 = sum (close)  // 全部加总 </span><br><span class="line">* 对缺漏值的处理方法不同 </span><br><span class="line">clear</span><br><span class="line">input v1  v2</span><br><span class="line">    1   5</span><br><span class="line">    2   .</span><br><span class="line">    .   3</span><br><span class="line">    2   4</span><br><span class="line">    4   . </span><br><span class="line">    .   6</span><br><span class="line">end</span><br><span class="line">gen mean       = (v1+v2)/2     // 遇到缺漏值会停止计算，显示为缺漏值 </span><br><span class="line">egen mean_egen = rmean (v1 v2)  // 遇到缺漏值会直接忽略，继续计算。如 rmean (2 .) = 2/1 = 2</span><br><span class="line">list</span><br></pre></td></tr></table></figure>
<h2 id="产生等差数列seq-函数">2.2 产生等差数列：seq () 函数</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clear </span><br><span class="line">set obs 100 // 设定数据量 </span><br><span class="line">egen 变量名 = seq (), from (起始值) to (结束值) block (重复次数)</span><br></pre></td></tr></table></figure>
<h2 id="填充数据fill-函数">2.3 填充数据：fill () 函数</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">egen 变量名 =  fill (numlist) // 对于 numlist 的用法，可以使用 help numlist 命令进行查看。</span><br></pre></td></tr></table></figure>
<h2 id="产生组内均值和中位数">2.4 产生组内均值和中位数</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">egen 变量名 = mean (变量名), by (类别变量名)    // 分组产生组内均值 </span><br><span class="line">egen 变量名 = median (变量名), by (类别变量名)  // 分组产生中位数 </span><br></pre></td></tr></table></figure>
<h2 id="变量的标准化和平滑化">2.5 变量的标准化和平滑化</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">egen 变量名 = std (变量名), mean (平均值) std (标准差)  // 将变量呈现为（平均值，标准差）的正态分布 </span><br><span class="line">egen 变量名 = ma (open), t (几期) nomiss // 数据的平滑意味着移动平局，t () 设定期数，nomiss 表示没有缺漏值，强制移动平均。</span><br></pre></td></tr></table></figure>
<h1 id="分位数">3. 分位数</h1>
<p>   分位数指的就是连续分布函数中的一个点，这个点对应概率 p。</p>
<h2 id="命令pctitle">3.1 命令：pctitle</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 命令结构 </span><br><span class="line">pctile [type] newvar = exp [if] [in] [weight] [, pctile_options]</span><br><span class="line">* 实例 </span><br><span class="line">sysuse auto, clear</span><br><span class="line">pctile p_price = price, nq (10) gen (percent)   // 指定分 9 个百分位数，把样本切割为 10 组；gen () 选项用于生成对应的百分位标识。</span><br></pre></td></tr></table></figure>
<h2 id="命令xtile">3.2 命令：xtile</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 命令结构 </span><br><span class="line">xtile newvar = exp [if] [in] [weight] [, xtile_options] // 根据指定的百分位数将连续变量定义为类别变量 </span><br><span class="line">* 实例 </span><br><span class="line">use bp1.dta, clear</span><br><span class="line">xtile x_bp = bp, nq (4) //nq (4) 的创建规则为： (-OO,x25], (x25,x50], (x50,x75], (x75,+OO)</span><br><span class="line">* cutpiont () 选项：根据指定的分类标准定义类别变量 </span><br><span class="line">input class</span><br><span class="line">    100</span><br><span class="line">    110</span><br><span class="line">    120</span><br><span class="line">    130</span><br><span class="line">end</span><br><span class="line">xtile c_bp = bp, cutpoints (class)</span><br></pre></td></tr></table></figure>
<h2 id="命令_pctile">3.3 命令：_pctile <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> _pctile varname [if] [in] [weight] [, _pctile_options] // 计算百分数并将其存储在 r () 中 </span><br><span class="line">* 实例 </span><br><span class="line">sysuse auto, clear</span><br><span class="line">_pctile length, nq (10)  // 指定分 9 个百分位数，把样本切割为 10 组 </span><br><span class="line">_pctile length, p (10, 33.333, 45 50, 55, 66.667, 90)  // 根据 p () 内制定的分位点进行分位 </span><br></pre></td></tr></table></figure></h2>
<h1 id="重复样本值的处理">4. 重复样本值的处理</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 检查变量是否是唯一识别码 </span><br><span class="line">isid 变量名 </span><br><span class="line">* 列出重复记录 </span><br><span class="line">duplicates list [varlist] [if] [in] [, options]</span><br><span class="line">* 报告重复记录 </span><br><span class="line">duplicates report [varlist] [if] [in]</span><br><span class="line">* 列出重复值中的一个 </span><br><span class="line">duplicates examples [varlist] [if] [in] [, options]</span><br><span class="line">tab [varlist]     // 详细列出重复值的信息 </span><br><span class="line">* 标记重复值 </span><br><span class="line">egen 变量名 = group ([varlist]), label  //label 表示产生数字 - 文字对应表，之后可以使用 tab 命令创建虚拟变量。 </span><br><span class="line">egen rm_tag = tag ([varlist])  // 第一个非重复样本为 1，其他为零。 </span><br><span class="line"> duplicates tag [varlist] [if] [in] , generate (newvar)</span><br><span class="line">* 删除重复值 </span><br><span class="line">duplicates drop varlist [if] [in] , force</span><br></pre></td></tr></table></figure>
<h1 id="缺漏值的处理">5. 缺漏值的处理</h1>
<p>   在 stata 中，缺漏值用 &quot;.&quot; 表示，大于任何自然数。对于缺漏值，有些命令会自动忽略，如 sum, regress, generate 等，但有些命令如 count, keep 等，则会将 &quot;.&quot; 视为一个无穷大的数值。</p>
<h2 id="标记缺漏值">5.1 标记缺漏值</h2>
<p>   在不同的数据来源中，缺漏值会表现为不同的形式，因此需要统一为 stata 可以识别的缺漏值表示方式：“.”，为此，需要进行处理 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvdecode varlist [if] [in], mv (numlist | numlist=mvc [\ numlist=mvc...]) // 将 varlist 中的数值型缺漏值转为 stata 可以识别的缺漏值格式 </span><br><span class="line">mvencode _all [if] [in], mv (numlist | numlist=mvc [\ numlist=mvc...])  // 将数据中的所有数值型缺漏值转为 stata 可以识别的缺漏值格式 </span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replace x1 =&quot;.&quot;  if x1== &quot;N/A&quot;  // 利用 replace 命令将文本型缺漏值转换为 stata 可以识别的缺漏值格式 </span><br><span class="line">gen x1_new = real (x1) // 将文本型的缺漏值转换为数值型的缺漏值 </span><br></pre></td></tr></table></figure>
<h2 id="显示缺漏值的详细情况">5.2 显示缺漏值的详细情况</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">misstable summarize [varlist] [if] [in] [, summarize_options] // 对于缺漏值的基本统计 </span><br><span class="line">misstable patterns [varlist] [if] [in] [, patterns_options]   // 显示缺漏值的缺漏模式，即使所有变量都有变量还是只有某个变量有缺漏 </span><br><span class="line">misstable tree [varlist] [if] [in] [, tree_options]           // 以树状形式显示缺漏值的基本统计 </span><br></pre></td></tr></table></figure>
<h2 id="删除缺漏值">5.3 删除缺漏值</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 利用 egen 中的 rmiss 选项删除缺漏值 </span><br><span class="line">egen miss = rmiss (varlist)  //miss=0 表示无缺漏值，=n 表示有 n 个缺漏值 </span><br><span class="line">drop if miss != 0    </span><br><span class="line">* 利用 missing () 函数删除缺漏值 </span><br><span class="line">drop if missing (varlist)</span><br><span class="line">* 更为简洁的命令：-dropmiss-</span><br><span class="line">dropmiss [varlist] [if] [in] , obs [force any trim piasm] // 以观察值为单位 </span><br><span class="line">dropmiss, any  // 以变量为单位 </span><br></pre></td></tr></table></figure>
<h2 id="填补缺漏值">5.4 填补缺漏值</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replace x = x [_n-1] if x==.  // 根据前期数值进行填补 </span><br><span class="line">replace x = x [_n+1] if x==.  // 根据后期数值进行填补 </span><br><span class="line">replace x = （x [_n-1] + x [_n+1]）/2 if x==. // 根据前期和后期数值的平均值进行填充 </span><br></pre></td></tr></table></figure>
<p>  carryforward 命令也能方便的根据前期数值进行填补： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">carryforward varlist [if exp] [in range], &#123;gen (newvarlist1) | replace&#125; [cfindic (newvarlist2) back carryalong (varlist2) strict nonotes dynamic_condition (dyncond) extmiss] //carryalong 意味着同样进行填充 </span><br></pre></td></tr></table></figure></p>
<h2 id="多重补漏分析">5.5 多重补漏分析</h2>
<p>   缺漏值的产生如果是非随机的，会导致相应的统计推断存在严重的偏误。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 声明数据的结构 </span><br><span class="line">mi set wide // 数据格式包括：wide mlong flong flongsep name</span><br><span class="line">mi register &#123;imputed | passive | regular&#125; varlist        // 声明需要插值的变量 </span><br><span class="line">mi impute method ...  [, impute_options ... ]            // 选择插值的方法 </span><br></pre></td></tr></table></figure></p>
<h1 id="离群值的处理">6. 离群值的处理</h1>
<p>   离群值会对回归结果造成巨大的影响，因此必须对它进行适当的处理。</p>
<h2 id="查找离群值">6.1 查找离群值</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adjacent varlist [weight] [if exp] [in range] [ , by (varlist) missing ] // 检验数据的上界与下界 </span><br><span class="line">egen 新变量名 = outside (varname) [ , by (byvarlist) factor (#) ]  // 计算出离群值，factor 用于指定界限 </span><br></pre></td></tr></table></figure>
<h2 id="处理离群值">6.2 处理离群值</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 删除离群值 - egen 命令处理后 </span><br><span class="line">keep if 新变量名 == .</span><br><span class="line">drop if 新变量名！= .</span><br><span class="line">* 截尾处理 </span><br><span class="line">_pctile varname [if] [in] [weight] [, _pctile_options]</span><br><span class="line">drop if varnem 条件 </span><br></pre></td></tr></table></figure>
<p>   对数转换也能在一定程度上解决离群值问题，也可以进行缩尾处理： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">winsor varname [if exp] [in range] , generate (newvar) &#123; p (#) | h (#) &#125; [ &#123; highonly | lowonly &#125; ]</span><br></pre></td></tr></table></figure></p>
<h1 id="资料的合并和追加">7. 资料的合并和追加</h1>
<h2 id="横向合并增加变量">7.1 横向合并：增加变量</h2>
<p>   在 Stata 中，横向合并一般使用 merge 命令： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 一对一合并 </span><br><span class="line">merge 1:1 varlist using filename [, options] </span><br><span class="line">* 多对一合并 </span><br><span class="line">merge m:1 varlist using filename [, options]</span><br><span class="line">* 一对多合并 </span><br><span class="line">merge 1:m varlist using filename [, options]</span><br><span class="line">* 多对多合并 </span><br><span class="line">merge m:m varlist using filename [, options]</span><br></pre></td></tr></table></figure></p>
<h3 id="一对一合并">7.1.1 一对一合并</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use merge_m.dta, clear</span><br><span class="line">merge 1:1 date using merge_u</span><br><span class="line">merge 1:1 date using merge_u, keepusing (close)  //keepusing (varlist) 选项表示仅合并部分数据 </span><br><span class="line">merge 1:1 date using merge_u, gen (m1) //nongenerate 表示不产生 _merge 变量；generate (新变量名) 表示产生 _merge 变量并对其重新命名 </span><br><span class="line">merge 1:1 date using merge_u, update  // 用调用的数据补充原始数据的缺漏值 </span><br><span class="line">merge 1:1 date using merge_u, update replace // 用调用的数据中没有缺漏的数据值来替代原始数据 </span><br></pre></td></tr></table></figure>
<p>  _merge=1 表示观察值来自于原始数据；_merge=2 表示观察值来自于调用的数据；_merge=3 表示观察值同时来自于两份数据。</p>
<h3 id="多对一合并数据多的和数据少的合并">7.1.2 多对一合并：数据多的和数据少的合并</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use GTA_FS.dta, clear</span><br><span class="line">erge m:1 id using GTA_basic.dta, nogen</span><br></pre></td></tr></table></figure>
<h3 id="一对多合并数据少的和数据多的合并">7.1.3 一对多合并：数据少的和数据多的合并</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">merge 1:m id using GTA_FS.dta, nogen</span><br></pre></td></tr></table></figure>
<h2 id="横向关联joinby">7.2 横向关联：joinby</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">joinby [varlist] using filename [, options]</span><br></pre></td></tr></table></figure>
<p>   实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use parent.dta, clear</span><br><span class="line">sort family_id                      // 这一步是必要的前置操作 </span><br><span class="line">joinby family_id using child.dta</span><br></pre></td></tr></table></figure></p>
<h2 id="纵向合并追加样本">7.3 纵向合并：追加样本</h2>
<p>   在 Stata 中，纵向合并一般使用 append 命令： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">append using filename [filename ...] [, options]</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* generate () 选项 </span><br><span class="line">use append_m.dta, clear</span><br><span class="line">append using append_u.dta, gen (append_id) // 产生新变量来表明前后的不同 </span><br><span class="line">* nolabel &amp; nonotes 选项 用于不产生 label 和 notes</span><br></pre></td></tr></table></figure>
<h1 id="对样本进行重新组合">8. 对样本进行重新组合</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xpose, clear [options]             // 转置 </span><br><span class="line">* 长宽数据相互转换 </span><br><span class="line">reshape long stubnames, i (varlist) [options]   // 将宽数据转换为长数据 </span><br><span class="line">reshape wide stubnames, i (varlist) [options]   // 将长数据转换为宽数据 </span><br><span class="line">reshape long                                   // 退回为长数据 </span><br><span class="line">reshape wide                                   // 退回为宽数据 </span><br><span class="line">reshape error                                  // 当转换失败时报告问题观察值 </span><br><span class="line">* 交叉组合样本 </span><br><span class="line">fillin varlist                                 // 作用是对变量中的观察值进行组合 </span><br><span class="line">* 堆砌样本 </span><br><span class="line">stack varlist [if] [in] , &#123;into (newvars)|group (#)&#125; [options]</span><br></pre></td></tr></table></figure>
<h1 id="处理文字变量">9. 处理文字变量</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 文字变量转为数字变量 </span><br><span class="line">destring [varlist] , &#123;generate (newvarlist)|replace&#125; [destring_options]</span><br><span class="line">* 文字类别变量转为数字变量 </span><br><span class="line">encode varname [if] [in] , generate (newvar) [label (name) noextend]</span><br><span class="line">/*encode 和 destring 的区别是：destring 针对的是数字 “误存” 为文字型变量；encode 针对的是文字型变量。 */</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 数字变量转文字变量 </span><br><span class="line">tostring varlist , &#123;generate (newvarlist)|replace&#125; [tostring_options]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 分解文字样本值 </span><br><span class="line">split strvar [if] [in] [, options] // 选项 parse (分割符号)</span><br><span class="line">* 其他处理文字的函数 </span><br><span class="line">help string functions</span><br></pre></td></tr></table></figure>
<h1 id="分析类别变量">10. 分析类别变量</h1>
<p>   类别变量是由文字变量转变而来的，也可以成为分类变量。</p>
<h2 id="对类别数的统计">10.1 对类别数的统计</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 类别数的基本统计 </span><br><span class="line">tabulate varname1 [varname2] [if] [in] [weight] [, options] // 局限：无法直接看到类别数目 </span><br><span class="line">* 汇报类别数目 </span><br><span class="line">distinct [varlist] [if] [in] [, missing abbrev (#) joint minimum (#) maximum (#) ]</span><br></pre></td></tr></table></figure>
<h2 id="生成交叉类别变量">10.2 生成交叉类别变量</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xgroup varlist [if] [in] , [ generate (varname) saving (filename [, replace]) missing label lname (name) truncate (#) ]</span><br></pre></td></tr></table></figure>
<h2 id="根据类别变量分组统计">10.3 根据类别变量分组统计</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 单层分组 </span><br><span class="line">bysort varlist: stata_cmd</span><br><span class="line">tabstat varlist [if] [in] [weight] [, options]                     //by 选项 </span><br><span class="line">tabulate varname1 [varname2] [if] [in] [weight] [, options]        //sort 选项： 按数量从大到小排序 </span><br><span class="line">* 二层次和三层次分组统计量 </span><br><span class="line">bysort varlist: stata_cmd</span><br><span class="line">* 多层次分组统计量 </span><br><span class="line">table var1 var2 var3, by (var4) contents (...)   // 不能超过四个 var</span><br><span class="line">* 根据分组变量的类别计算其他变量的值 </span><br><span class="line">bysort varlist: egen</span><br><span class="line">* 转换原资料为分组统计量：collapse 命令 </span><br><span class="line">collapse clist [if] [in] [weight] [, options]  </span><br><span class="line">collapse (统计量 1) 新变量名 = 原变量名 (统计量 2) ...</span><br></pre></td></tr></table></figure>
<h2 id="图示类别变量">10.4 图示类别变量</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 柱状图 </span><br><span class="line">graph bar  yvars [if] [in] [weight] [, options] //  over (varname [, over_subopts]) 选项表示 categories; option may be repeated</span><br><span class="line">graph hbar yvars [if] [in] [weight] [, options] // 横向柱状图 </span><br><span class="line">* 箱形图 </span><br></pre></td></tr></table></figure>
<h1 id="时间序列资料的处理">11. 时间序列资料的处理</h1>
<h2 id="基本操作和命令">11.1 基本操作和命令</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 声明时间序列：tsset 命令 </span></span><br><span class="line"><span class="keyword">tsset</span> timevar [, options] <span class="comment">// 相当于给时间变量进行从小到大的排序 </span></span><br><span class="line"><span class="keyword">tsset</span>, <span class="keyword">clear</span>              <span class="comment">// 清楚时间标示 </span></span><br><span class="line"><span class="comment">* 检查是否有断点：tsreport</span></span><br><span class="line"><span class="keyword">tsreport</span> [<span class="keyword">varlist</span>] [<span class="keyword">if</span>] [<span class="keyword">in</span>] [, options]</span><br><span class="line"><span class="comment">* 填充缺漏的日期 </span></span><br><span class="line"><span class="keyword">tsfill</span> [, full] </span><br><span class="line"><span class="comment">* 追加样本 </span></span><br><span class="line"><span class="keyword">tsappend</span>, &#123; add (#) | last (date|clock) tsfmt (string) &#125; [options]</span><br></pre></td></tr></table></figure>
<h2 id="生成时序变量">11.2 生成时序变量</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 生成滞后项 </span></span><br><span class="line"><span class="keyword">L</span>.varname   <span class="comment">// 一阶滞后 </span></span><br><span class="line">L2.vaename  <span class="comment">// 二阶滞后 </span></span><br><span class="line"><span class="comment">* 生成超前向 </span></span><br><span class="line">F.varname   <span class="comment">// 一阶超前 </span></span><br><span class="line">F2.varname  <span class="comment">// 二阶超前 </span></span><br><span class="line"><span class="comment">* 生成差分项 </span></span><br><span class="line"><span class="keyword">D</span>.varname   <span class="comment">// 一阶差分 </span></span><br><span class="line">D2.varname  <span class="comment">// 二阶差分 </span></span><br><span class="line"><span class="comment">* 生成对数差分：近似于增长率 </span></span><br><span class="line"><span class="keyword">gen</span> 对数变量 = <span class="built_in">ln</span>(varname)</span><br><span class="line"><span class="keyword">gen</span> 增长率 = <span class="keyword">D</span>. 对数变量 </span><br></pre></td></tr></table></figure>
<h1 id="面板资料的处理">12. 面板资料的处理</h1>
<h2 id="基本操作和命令-1">12.1 基本操作和命令</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 声明面板资料 </span></span><br><span class="line"><span class="keyword">xtset</span> panelvar timevar [, tsoptions] <span class="comment">// 或者为：xtset panelvar</span></span><br><span class="line"><span class="keyword">xtset</span>, <span class="keyword">clear</span> <span class="comment">// 清除对面板资料的声明 </span></span><br><span class="line"><span class="comment">* 处理错误信息：repeated time values within panel</span></span><br><span class="line"><span class="keyword">duplicates</span> <span class="keyword">report</span> panelvar timevar   <span class="comment">// 报告重复值 </span></span><br><span class="line"><span class="keyword">duplicates</span> <span class="keyword">drop</span> panelvar timevar, force <span class="comment">// 删除重复值 </span></span><br><span class="line"><span class="keyword">tsset</span> panelvar timevar</span><br><span class="line"><span class="comment">* 描述面板数据的 pattern</span></span><br><span class="line">xtdescribe [<span class="keyword">if</span>] [<span class="keyword">in</span>] [, options]</span><br><span class="line"><span class="comment">* 记录面板数据的资料形态 </span></span><br><span class="line">xtpattern [<span class="keyword">if</span> exp] , <span class="keyword">generate</span>(newvar)</span><br><span class="line"><span class="comment">* 统计面板变量的数目 </span></span><br><span class="line">panels <span class="keyword">varlist</span> [<span class="keyword">if</span>] [<span class="keyword">in</span>] [weight] [, options ]</span><br><span class="line"><span class="comment">* 产生连续的面板代码 </span></span><br><span class="line"><span class="keyword">egen</span> 新面板变量名 = <span class="built_in">group</span>(面板变量名) </span><br><span class="line"><span class="comment">* 将非平行面板处理为平行面板（面板变量的时序数一样）</span></span><br><span class="line">xtbalance, <span class="keyword">range</span>(<span class="keyword">numlist</span>) [ miss (<span class="keyword">varlist</span>) ]</span><br><span class="line"><span class="comment">* miss () 选项：缺漏值的处理 - 删除缺漏值 </span></span><br><span class="line"><span class="comment">* range () 选项：起始日期 结束日期 </span></span><br></pre></td></tr></table></figure>
<h2 id="进阶操作">12.2 进阶操作</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">* 删除面板资料首尾的缺漏值 </span></span><br><span class="line"><span class="keyword">by</span> panelvar, <span class="keyword">sort</span>: <span class="keyword">egen</span> firstnonmis = <span class="built_in">min</span>(<span class="built_in">cond</span>(!<span class="built_in">missing</span>(x), timevar, .))</span><br><span class="line"><span class="keyword">by</span> panelvar, <span class="keyword">sort</span>: <span class="keyword">egen</span> lastnonmis  = <span class="built_in">max</span>(<span class="built_in">cond</span>(!<span class="built_in">missing</span>(x), timevar, .))</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">if</span> (timevar&lt;firstnonmis) | (timevar&gt;lastnonmis)</span><br><span class="line"><span class="comment">* 仅保留连续 T 期以上可获得资料的 panelvar</span></span><br><span class="line">xtpattern, <span class="keyword">gen</span>(新变量名) <span class="comment">// 记录每家公司的样本形态 </span></span><br><span class="line"><span class="keyword">gen</span> 新变量名 1 = <span class="built_in">strpos</span>(新变量名，<span class="string">"1111 (T 个 1)"</span>)</span><br><span class="line"><span class="keyword">sort</span> 新变量名 1</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">if</span> 新变量名 1==0</span><br><span class="line"><span class="comment">* 删除某些期度资料缺失的观察值 </span></span><br><span class="line"> xtpattern, <span class="keyword">gen</span>(新变量名) <span class="comment">// 记录每家公司的样本形态 </span></span><br><span class="line"> <span class="keyword">gen</span> 新变量名 1 = <span class="built_in">strpos</span>(新变量名，<span class="string">"1."</span>)</span><br><span class="line"> <span class="keyword">order</span> panelvar timevar 新变量名 新变量名 1</span><br><span class="line"> <span class="keyword">drop</span> <span class="keyword">if</span> 新变量名 1&gt;0</span><br><span class="line"><span class="comment">* 删除某个间断期度以后的所有数据 </span></span><br><span class="line"><span class="keyword">gen</span> Dtimevar = <span class="keyword">D</span>.timevar</span><br><span class="line"><span class="keyword">bysort</span> panelvar (timevar): <span class="keyword">replace</span> Dtimevar=1 <span class="keyword">if</span> _n==1</span><br><span class="line"><span class="keyword">bysort</span> panelvar: <span class="keyword">egen</span> firsttimevar_mis = <span class="built_in">min</span>(<span class="built_in">cond</span>(<span class="built_in">missing</span>(Dtimevar), timevar, .))</span><br><span class="line"><span class="keyword">bysort</span> id: <span class="keyword">drop</span> <span class="keyword">if</span> timevar&gt;=firsttimevar_mis</span><br></pre></td></tr></table></figure>
<h2 id="面板资料廋身">12.3 面板资料廋身</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">panelthin [<span class="keyword">if</span> exp] [<span class="keyword">in</span> <span class="keyword">range</span>] , <span class="keyword">generate</span>(newvar) minimum (#)</span><br><span class="line"><span class="comment">* 采用 P 年平均值进行估计 </span></span><br><span class="line">paverage <span class="keyword">varlist</span>, p (#) indiv (varname) yr (varname)</span><br></pre></td></tr></table></figure>
<h2 id="扩充面板缺漏值">12.4 扩充面板缺漏值</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">enlarge variable, <span class="keyword">by</span>(grouping variables)</span><br></pre></td></tr></table></figure>
<h2 id="变量的-去均值-和标准化">12.5 变量的 “去均值” 和标准化</h2>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">center <span class="keyword">varlist</span> [weight] [<span class="keyword">if</span> exp] [<span class="keyword">in</span> <span class="keyword">range</span>] [, casewise inplace &#123; prefix (prefix) | <span class="keyword">generate</span>(newvar) &#125;theta (#|varname) standardize <span class="keyword">replace</span> double nolabel addtolabel (string) meansave [(prefix|newvar)] sdsave [(prefix|newvar)] ]</span><br><span class="line"><span class="comment">* 应用实例 </span></span><br><span class="line"><span class="keyword">use</span> xtcs.dta, <span class="keyword">clear</span></span><br><span class="line"><span class="keyword">bysort</span> code: center tl fr size ndts tang tobin, prefix (c_)</span><br></pre></td></tr></table></figure>
<h1 id="数据的查验和比较">13. 数据的查验和比较</h1>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">count</span> [<span class="keyword">if</span>] [<span class="keyword">in</span>]                             <span class="comment">// 计数 </span></span><br><span class="line"><span class="keyword">assert</span> exp [<span class="keyword">if</span>] [<span class="keyword">in</span>] [, rc0 null fast]      <span class="comment">// 条件确认 </span></span><br><span class="line"><span class="keyword">compare</span> varname1 varname2 [<span class="keyword">if</span>] [<span class="keyword">in</span>]         <span class="comment">// 比较变量的大小 </span></span><br><span class="line"><span class="keyword">cf</span> <span class="keyword">varlist</span> using filename [, all verbose]   <span class="comment">// 查验观察值 </span></span><br><span class="line">cfvars filename1 [filename2]                <span class="comment">// 查验变量 </span></span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>stata</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>Stata</tag>
        <tag>数据</tag>
      </tags>
  </entry>
  <entry>
    <title>数据存取</title>
    <url>/2019/07/10/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%8F%96/</url>
    <content><![CDATA[<h1 id="csv-格式数据的存取">1. csv 格式数据的存取</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">pd.read_csv              // 取数据 </span><br><span class="line"> 数据文件名.to_csv         // 存数据 </span><br><span class="line">print 数据文件名 [&apos; 索引 & apos;]  // 等同于切片 </span><br></pre></td></tr></table></figure>
<h1 id="excel-格式数据的读取">2. excel 格式数据的读取</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from openpyxl import Workbook</span><br><span class="line">wb2 = load_workbook (&apos;test.xlsx&apos;)   // 取数据 </span><br><span class="line">wb.save (&apos;balances.xlsx&apos;)          // 存数据 </span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>绘图</title>
    <url>/2019/07/09/%E7%BB%98%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="使用-matplotlib-绘图">1. 使用 Matplotlib 绘图</h1>
<p>   在 Python 中，绘图主要使用 matplotlib 这个库，具体来说是 pylab 和 pyplot 这两个子库，它的绘图风格类似于 Matlab. <a id="more"></a></p>
<h2 id="指定图的大小和进度">1.1 指定图的大小和进度</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.figure (figsize=(长，宽), dpi = 精度) //</span><br></pre></td></tr></table></figure>
<h2 id="建立多个子图">1.2 建立多个子图</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.subplot (行数，列数，图号) // 最后一个图的图号 = 行数 * 列数 </span><br></pre></td></tr></table></figure>
<h2 id="图表类型">1.3 图表类型</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.scatter (横坐标数据，纵坐标数据，color=&apos; 颜色 & apos;, marker=&apos; 标记类型 & apos;) // 散点图 </span><br><span class="line">plt.plot (横坐标数据，纵坐标数据，color=&apos; 颜色 & apos;, linewidth = 线条宽度，linestyle=&apos; 线条类型 & apos;) // 折线图 </span><br><span class="line">plt.bar (横坐标数据，纵坐标数据，color=&apos; 颜色 & apos;, align=&apos;&apos;) // 垂直方向的条形图 </span><br><span class="line">plt.barh (横坐标数据，纵坐标数据，color=&apos; 颜色 & apos;, align=&apos;&apos;) // 水平方向的条形图 </span><br><span class="line">plt.pie (数据，explode = 偏移切片) // 饼图 </span><br></pre></td></tr></table></figure>
<h2 id="颜色">1.4 颜色</h2>
<p>   常用的内建颜色见下表：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">内建颜色</th>
<th style="text-align: center;">对应字符</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">蓝色</td>
<td style="text-align: center;">'b'</td>
</tr>
<tr class="even">
<td style="text-align: center;">绿色</td>
<td style="text-align: center;">'g'</td>
</tr>
<tr class="odd">
<td style="text-align: center;">红色</td>
<td style="text-align: center;">'r'</td>
</tr>
<tr class="even">
<td style="text-align: center;">青色</td>
<td style="text-align: center;">'c'</td>
</tr>
<tr class="odd">
<td style="text-align: center;">品红</td>
<td style="text-align: center;">'m'</td>
</tr>
<tr class="even">
<td style="text-align: center;">黄色</td>
<td style="text-align: center;">'y'</td>
</tr>
<tr class="odd">
<td style="text-align: center;">黑色</td>
<td style="text-align: center;">'k'</td>
</tr>
</tbody>
</table>
<p>   除此之外，也可以使用 <a href="http://tool.oschina.net/commons?type=3" title="RGB 颜色" target="_blank" rel="noopener">RGB 颜色</a>。 ## 1.5 标记类型和线条类型 <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190709214855.png"> <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190709214954.png"> <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190709215009.png"> ## 1.6 设置标签 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.xlabel (&quot; 横轴标签 & quot;)</span><br><span class="line">plt.ylabel (&quot; 纵轴标签 & quot;)</span><br></pre></td></tr></table></figure></p>
<h2 id="设置刻度">1.6 设置刻度</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.xticks ([], []) // 设置横轴刻度 </span><br><span class="line">plt.yticks ([], []) // 设置纵轴刻度 </span><br></pre></td></tr></table></figure>
<p>   基本示例： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.xticks ([-1, 0, 1, 2, 3, 4, 5, 6], [&quot;-1m&quot;, &quot;0m&quot;, &quot;1m&quot;, &quot;2m&quot;, &quot;3m&quot;, &quot;4m&quot;, &quot;5m&quot;, &quot;6m&quot;])</span><br><span class="line">plt.yticks ([-2, 0, 2, 4, 6, 8, 10], [&quot;-2m&quot;, &quot;0m&quot;, &quot;2m&quot;, &quot;4m&quot;, &quot;6m&quot;, &quot;8m&quot;, &quot;10m&quot;])</span><br></pre></td></tr></table></figure></p>
<h2 id="添加图例">1.6 添加图例</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.legend (handles=[线段名], labels=[标签名], loc=&apos; 图例位置 & apos;)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">位置 - 字符串</th>
<th style="text-align: center;">位置 - 代码</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">'best'</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">'upper right'</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">'upper left'</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="even">
<td style="text-align: center;">'lower left'</td>
<td style="text-align: center;">3</td>
</tr>
<tr class="odd">
<td style="text-align: center;">'lower right'</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="even">
<td style="text-align: center;">'right'</td>
<td style="text-align: center;">5</td>
</tr>
<tr class="odd">
<td style="text-align: center;">'center left'</td>
<td style="text-align: center;">6</td>
</tr>
<tr class="even">
<td style="text-align: center;">'center right'</td>
<td style="text-align: center;">7</td>
</tr>
<tr class="odd">
<td style="text-align: center;">'lower center'</td>
<td style="text-align: center;">8</td>
</tr>
<tr class="even">
<td style="text-align: center;">'upper center'</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="odd">
<td style="text-align: center;">'center'</td>
<td style="text-align: center;">10</td>
</tr>
</tbody>
</table>
<h2 id="设置图标标题">1.7 设置图标标题</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plt.title (&apos; 图标标题 & apos;)</span><br></pre></td></tr></table></figure>
<h2 id="中文和负号">1.8 中文和负号</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.font_manager as fm</span><br><span class="line">myfont = fm.FontProperties (fname=r&apos; 字体路径 + 字体文件名.ttf&apos;) # 设置字体 </span><br><span class="line">fontproperties=myfont #使用字体。方法是在中文后面紧跟: , fontproperties=myfont </span><br><span class="line">plt.rcParams [&apos;axes.unicode_minus&apos;] = False  # 用来正常显示负号 </span><br></pre></td></tr></table></figure>
<h1 id="使用-pandas-绘图-1">2. 使用 Pandas 绘图 <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">DataFrame.plot (x=None, y=None, kind=&apos;line&apos;, ax=None, subplots=False, sharex=None, sharey=False, layout=None, figsize=None, use_index=True, title=None, grid=None, legend=True, style=None, logx=False, logy=False, loglog=False, xticks=None, yticks=None, xlim=None, ylim=None, rot=None, fontsize=None, colormap=None, table=False, yerr=None, xerr=None, secondary_y=False, sort_columns=False, **kwds)</span><br></pre></td></tr></table></figure>
<p>   也可以结合 Matplotlib 进行绘图： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df.plot ()  # 折线图 </span><br><span class="line">plt.grid (linewidth=0.2, alpha=0.5)  # 结合 Matplotlib 编程 </span><br></pre></td></tr></table></figure></p>
<h1 id="使用-seaborn-绘图">3. 使用 seaborn 绘图</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import seaborn as sns</span><br><span class="line">sns.barplot (x=&quot;sepal_length&quot;,y=&quot;species&quot;,data=iris)   // 条形图 </span><br><span class="line">sns.distplot (iris [&quot;sepal_length&quot;])                    // 直方图 </span><br><span class="line">sns.pointplot (x=&quot;sepal_length&quot;,y=&quot;species&quot;,data=iris) // 折线图 </span><br><span class="line">sns.stripplot (x=&quot;sepal_length&quot;, y=&quot;species&quot;, data=iris, jitter=True, edgecolor=&quot;gray&quot;) // 散点图 </span><br><span class="line">sns.regplot (x=&quot;sepal_length&quot;,y=&quot;sepal_length&quot;,data=iris) // 带回归线的散点图 </span><br><span class="line">sns.boxplot (x=&quot;sepal_length&quot;,y=&quot;species&quot;,data=iris) // 箱形图 </span><br></pre></td></tr></table></figure>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.plot.html#pandas.DataFrame.plot" target="_blank" rel="noopener">Pandas 绘图</a> <a href="https://zhuanlan.zhihu.com/p/58410775" target="_blank" rel="noopener">大白话 Python 绘图系列: Pandas 篇</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>操作工作表</title>
    <url>/2019/07/09/%E6%93%8D%E4%BD%9C%E5%B7%A5%E4%BD%9C%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="worksheets-工作表对象">1. Worksheets 工作表对象</h1>
<p>   对于 Worksheet 工作表对象而言，可以执行动作或呈现属性，前者包括 select、add、delete 和 copy; 后者包括 count 和 name，二者都是通过：工作表对象。动作 / 属性执行的。 <a id="more"></a></p>
<h1 id="application-主程序对象">2. Application 主程序对象</h1>
<p>   在 VBA 中，为了优化代码，可以关闭屏幕更新，只需执行如下代码： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Application.ScreenUpdating = False    &apos; 关闭屏幕更新 </span><br><span class="line">Application.ScreenUpdating = True     &apos; 开启屏幕更新。tips: 执行完代码后，重新开启屏幕更新， 避免以后出错。</span><br></pre></td></tr></table></figure></p>
<p>   关闭弹出警告窗口只需执行以下代码： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Application.DisplayAlerts = False  &apos; 关闭弹出警告窗口 </span><br><span class="line">Application.DisplayAlerts = True   &apos; 开启弹出警告窗口。执行完代码后必须重新开启弹出警告窗口， 避免以后出错。</span><br></pre></td></tr></table></figure></p>
<h1 id="操作实例">3. 操作实例</h1>
<h2 id="批量创建工作表">3.1 批量创建工作表</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub 批量创建工作表 ()</span><br><span class="line">Dim i As Integer</span><br><span class="line">For i = 1 To 31</span><br><span class="line">    Sheet1.Copy after:=Sheets (Sheets.Count)</span><br><span class="line">    Sheets (Sheets.Count).Name = &quot;5 月 & quot; &amp; i &amp; &quot; 日 & quot;</span><br><span class="line">    Sheets (Sheets.Count).Range (&quot;e5&quot;) = &quot;2016-5-&quot; &amp; i</span><br><span class="line">Next    </span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<h2 id="多表取值合并">3.2 多表取值合并</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub test ()</span><br><span class="line">Dim i As Integer</span><br><span class="line"></span><br><span class="line">For i = 2 To Sheets.Count</span><br><span class="line">    Sheet1.Range (&quot;b&quot; &amp; i + 8) = Sheets (i).Range (&quot;e5&quot;)</span><br><span class="line">    Sheet1.Range (&quot;c&quot; &amp; i + 8) = Sheets (i).Range (&quot;e6&quot;)</span><br><span class="line">    Sheet1.Range (&quot;d&quot; &amp; i + 8) = Sheets (i).Range (&quot;e44&quot;)</span><br><span class="line"></span><br><span class="line">Next</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<h2 id="处理考生成绩表">3.3 处理考生成绩表</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub 处理考生成绩表 ()</span><br><span class="line">Dim i As Integer</span><br><span class="line">Dim j As Integer</span><br><span class="line"></span><br><span class="line">For j = 1 To Sheets.Count</span><br><span class="line"></span><br><span class="line">    For i = 100 To 2 Step -1</span><br><span class="line">        If Sheets (j).Range (&quot;e&quot; &amp; i) = &quot; 男 & quot; Then</span><br><span class="line">            Sheets (j).Range (&quot;f&quot; &amp; i) = &quot; 先生 & quot;</span><br><span class="line">        Else</span><br><span class="line">            Sheets (j).Range (&quot;f&quot; &amp; i) = &quot; 女士 & quot;</span><br><span class="line">        End If</span><br><span class="line">        </span><br><span class="line">        If Sheets (j).Range (&quot;b&quot; &amp; i) = &quot; 理工 & quot; Then</span><br><span class="line">            Sheets (j).Range (&quot;c&quot; &amp; i) = &quot;LG&quot;</span><br><span class="line">        ElseIf Sheets (j).Range (&quot;b&quot; &amp; i) = &quot; 文科 & quot; Then</span><br><span class="line">            Sheets (j).Range (&quot;c&quot; &amp; i) = &quot;WK&quot;</span><br><span class="line">        Else</span><br><span class="line">            Sheets (j).Range (&quot;c&quot; &amp; i) = &quot;CJ&quot;</span><br><span class="line">        End If</span><br><span class="line">        </span><br><span class="line">        If Sheets (j).Range (&quot;d&quot; &amp; i) = &quot;&quot; Then</span><br><span class="line">            Sheets (j).Range (&quot;d&quot; &amp; i).EntireRow.Delete</span><br><span class="line">        End If</span><br><span class="line">    Next</span><br><span class="line"></span><br><span class="line">Next</span><br><span class="line"></span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>EXCEL&amp;VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>聚类分析</title>
    <url>/2019/07/08/%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>   聚类分析是对没有目标变量的数据集根据数据的相似性给出 “自然的” 分组，目标是类内对象相似性尽量大，类间对象相似性尽量小。</p>
<a id="more"></a>
<h1 id="聚类分析k-means-算法-1">1. 聚类分析：K-Means 算法 <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></h1>
<p>  K-Means 算法的主要步骤如下：<br></p>
<p>  1. 选择 K 个对象作为每个类的初始质心，然后计算其它每个对象与每个质心的距离，与距离最小的质心归为一类。<br></p>
<p>  2. 指派到一个质心的对象集合为一个类，更新每个类的质心。<br></p>
<p>  3. 重复上述指派和更新质心的步骤，直至类不发生变化为止。<br></p>
<h1 id="用-python-实现聚类分析">2. 用 python 实现聚类分析</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.cluster import KMeans</span><br><span class="line"></span><br><span class="line"># 读取原始数据 </span><br><span class="line">X = []</span><br><span class="line">f = open (&apos;D:/ 代码 / 数据 / City.txt&apos;)</span><br><span class="line">for v in f:</span><br><span class="line">    X.append ([float (v.split ()[2][2:6]),float (v.split ()[3][2:8])])</span><br><span class="line"></span><br><span class="line"># 转化为 numpy array</span><br><span class="line">X = np.array (X)</span><br><span class="line">print (X)</span><br><span class="line"></span><br><span class="line"># 类簇的数量 </span><br><span class="line">n_clusters = 5</span><br><span class="line"> </span><br><span class="line"># 开始调用函数聚类 </span><br><span class="line">cls = KMeans (n_clusters).fit (X)</span><br><span class="line"> </span><br><span class="line"># 输出 X 中每项所属分类的一个列表 </span><br><span class="line">print (cls.labels_)</span><br><span class="line"> </span><br><span class="line"># 画图 </span><br><span class="line">markers = [&apos;*&apos;,&apos;o&apos;,&apos;+&apos;,&apos;s&apos;,&apos;v&apos;]</span><br><span class="line"> </span><br><span class="line">for i in range (n_clusters):</span><br><span class="line">    members = cls.labels_ == i#members 是布尔数组 </span><br><span class="line">    # array ([False, False, False, False, False, False, False, False, False,</span><br><span class="line">    #    False, False, False, False, False, False, False, False, False,</span><br><span class="line">    #    False, False,  True, False, False, False, False, False, False,</span><br><span class="line">    #    False,  True,  True,  True,  True, False, False,  True,  True,</span><br><span class="line">    #     True, False,  True, False,  True,  True,  True,  True,  True,</span><br><span class="line">    #     True, False, False, False, False,  True,  True,  True, False,</span><br><span class="line">    #    False, False, False,  True,  True,  True,  True,  True,  True,</span><br><span class="line">    #    ...])</span><br><span class="line">    plt.scatter (X [members,0],X [members,1],s = 60,marker = markers [i],c = &apos;b&apos;,alpha=0.5)# 画与 menbers 数组中匹配的点 </span><br><span class="line"> </span><br><span class="line">plt.title (&apos;China&apos;)</span><br><span class="line">plt.show ()</span><br><span class="line">print (X)</span><br></pre></td></tr></table></figure>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://zh.wikipedia.org/wiki/%%20E8%81%9A%%20E7%%20B1%%20BB%%20E5%88%86%%20E6%9E%90#%%20E7%%20BB%93%%20E6%9E%84%%20E6%80%%20A7%%20E8%81%9A%%20E7%%20B1%%20BB" title="聚类分析" target="_blank" rel="noopener">聚类分析</a>：<a href="https://zh.wikipedia.org/wiki/K-%%20E5%%20B9%%20B3%%20E5%9D%87%%20E7%%20AE%97%%20E6%%20B3%95" title="K-Means 算法" target="_blank" rel="noopener">K-Means 算法</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>stata 基本操作（二）</title>
    <url>/2019/07/07/stata%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="stata-中的命令">1. stata 中的命令</h1>
<h2 id="stata-中的命令结构">1.1 stata 中的命令结构</h2>
<a id="more"></a>
<p>  stata 命令的通用格式: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">command varlist [if] [in] [ , options] // 其中，[if] [in] 用于限制样本范围；[options] “可选项”，增加了命令的弹性 </span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">help command // 对于不熟悉的命令，可以使用此命令查看帮助文件 </span><br></pre></td></tr></table></figure>
<p>   对于命令的帮助文件，主要是看可选项，因为 if 和 in 是通用的。[] 内的内容是可以省略的，其它内容必须填写。</p>
<p>   因此，对于命令的帮助文件，可以直接查看 syntax（语法）中的 options 以及 example。</p>
<h2 id="通配符-和">1.2 通配符：* 和？</h2>
<p>  * 可以表示任何长度的字母或数字，？只能替代一个长度的字母或数字。</p>
<h2 id="自定义分行符">1.3 自定义分行符</h2>
<p>   命令经常过长，因此为了避免自动换行，可以自定义分行符： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#delimit ； // 将；定义为分行符 </span><br><span class="line">#delimit cr</span><br></pre></td></tr></table></figure></p>
<h1 id="修改数据资料">2. 修改数据资料</h1>
<h2 id="数学运算">2.1 数学运算</h2>
<h3 id="关系运算符">2.1.1 关系运算符</h3>
<p>   等于：==; 大于：&gt;; 小于：&lt;; 大于等于：&gt;=; 小于等于：&lt;=; 不等于：!= 和～=。</p>
<h3 id="逻辑运算符">2.1.2 逻辑运算符</h3>
<p>   与：&amp; 和 --&gt;；或：| 和 --&gt;。</p>
<h3 id="算术运算符">2.1.3 算术运算符</h3>
<p>  + - * / ^(幂)</p>
<h1 id="变量的创建和修改">3. 变量的创建和修改</h1>
<h2 id="变量的类型">3.1 变量的类型</h2>
<p>   整数的存储类型包括： |byte | 字节型 |(-100,+100)| |--|--|--| |int | 一般整数型 |(-32000,+32000)| |long | 长整数型 |(-2.14<em>10^10,+2.14</em>10^10)，即，正负 21 亿 |    小数的存储类型包括：浮点型（float）和双精度（double）, 前者表示 8 位有效数字，后者表示 16 位有效数字。</p>
<p>   字符型变量的存储类型是字符串（str）， 还可以指定字符型变量包含的字符多少，方法是 str#。</p>
<h2 id="创建新变量">3.2 创建新变量</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">generate [type] newvar [:lblname] =exp [if] [in] [, before (varname) | after (varname)]  //exp 是表达式的意思 </span><br></pre></td></tr></table></figure>
<h2 id="修改旧变量">3.3 修改旧变量</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rename old_varname new_varname // 单个变量修改 </span><br><span class="line">renvars [varlist] \ newvarlist [ , display test ]</span><br><span class="line">renvars [varlist] , transformation_option [ display test symbol (str) ] //transformation_option 包括：前缀 - prefix (str)、后缀 - postfix (str) 等 </span><br></pre></td></tr></table></figure>
<h2 id="修改观察值">3.4 修改观察值</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replace oldvar =exp [if] [in] [, nopromote]</span><br></pre></td></tr></table></figure>
<h2 id="删除变量和样本值">3.5 删除变量和样本值</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop varlist</span><br><span class="line">drop if exp</span><br><span class="line">drop in range [if exp]</span><br></pre></td></tr></table></figure>
<h2 id="移动变量窗口中变量的位置">3.6 移动变量窗口中变量的位置</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">order varlist [, options]</span><br></pre></td></tr></table></figure>
<h2 id="克隆已有变量">3.7 克隆已有变量</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clonevar newvar = varname [if] [in]</span><br></pre></td></tr></table></figure>
<h2 id="拆分变量">3.8 拆分变量</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">separate varname [if] [in] , by (groupvar | exp) [options]</span><br></pre></td></tr></table></figure>
<h2 id="样本值排序">3.9 样本值排序</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort varlist [in] [, stable] //stable 很少用，此命令只能正序排列 </span><br><span class="line">gsort [+|-] varname [[+|-] varname ...] [, generate (newvar) mfirst] //- 代表逆序排列 </span><br></pre></td></tr></table></figure>
<h1 id="log-文件记录分析过程">4. log 文件：记录分析过程</h1>
<h2 id="使用-log-文件记录分析过程">4.1 使用 log 文件记录分析过程</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log using filename [, append replace [text|smcl] name (logname) nomsg]</span><br><span class="line">log close [logname | _all]</span><br></pre></td></tr></table></figure>
<h2 id="将-log-文件转换为网页">4.2 将 log 文件转换为网页</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log2html smclfile [, replace erase title (string) linesize (#)</span><br><span class="line">                 percentsize (integer) bold</span><br><span class="line">                 scheme (string) css (string)</span><br><span class="line">                 input (string) result (string) error (string) text (string) bg (string) ]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hyperlog do-file [logfile] [, multipass replace]</span><br></pre></td></tr></table></figure>
<h1 id="编写-do-文档高效快捷地执行命令">5. 编写 do 文档：高效快捷地执行命令</h1>
<p>  do 文档的使用使我们的分析工作具有可重复性，基本代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">doedit [filename]             // 打开 do-editor 或者打开一个已经存在的 do 文档 </span><br><span class="line">&#123;do|run&#125; filename [arguments] [, nostop] // 执行 do 文档，也可以打开 do 文档后选中部分代码执行（快捷键：ctrl+d)</span><br></pre></td></tr></table></figure></p>
<p>   编写 do 文档时，为了美观和易读性，+ - 前后要有空格， * / 前后无需空格，还必须要有必要的注释以及断行。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 单行注释 </span><br><span class="line">// 行末注释 </span><br><span class="line">/* 行末注释 */</span><br></pre></td></tr></table></figure></p>
<p>   换行的三种方式：/// 、 /* */ 、 #delimit 命令。</p>
<p>  tips: 当编写大型 do 文档时，可以先设定一个主文件，然后编写若干个相应的子文件，在主文件里面分别设定执行子文件的命令，将主文件和子文件放置在一个文件夹中。</p>
<h1 id="输出">6. 输出</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logout, [options : command]</span><br></pre></td></tr></table></figure>
<h2 id="统计表格矩阵的输出">6.1 统计表格、矩阵的输出</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysuse auto, clear </span><br><span class="line">* 输出基本统计量 </span><br><span class="line">tabstat price wei len mpg rep78,        ///</span><br><span class="line">stats (mean sd min p50 max) c (s) f (%6.2f)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 使用 save (文件名) 保存 </span><br><span class="line">* save () word  保存为 word 文档 </span><br><span class="line">* save () excel 保存为 excel 文档 </span><br><span class="line">logout, save (mytable) word replace:       ///</span><br><span class="line">* 输出基本统计量 </span><br><span class="line">    tabstat price wei len mpg rep78,        ///</span><br><span class="line">    stats (mean sd min p50 max) c (s) f (%6.2f)</span><br></pre></td></tr></table></figure>
<p>   同理，只需更改输出部分，即可将输出部分保存为 word 或 excel 文档。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 输出相关系数矩阵 </span><br><span class="line">pwcorr price wei len mpg rep78 </span><br><span class="line">* 输出矩阵 </span><br><span class="line">mat a = I (10) </span><br><span class="line">mat list a </span><br><span class="line">mat list a, nohalf</span><br></pre></td></tr></table></figure></p>
<h2 id="估计结果的输出">6.2 估计结果的输出</h2>
<h3 id="logout-命令">6.2.1 logout 命令</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 输出估计结果 </span><br><span class="line">logout, save (文件名) 文档格式 (excel/word) dec (3) replace:   ///</span><br><span class="line">* 估计结果 </span><br><span class="line">    reg price weight mpg rep78 foreign</span><br></pre></td></tr></table></figure>
<h3 id="esttab-命令呈现回归结果">6.2.2 esttab 命令：呈现回归结果</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">esttab [ namelist ] [ using filename ] [ , options ]</span><br></pre></td></tr></table></figure>
<p>   基本示例： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 前期准备 </span><br><span class="line">sysuse auto, clear   </span><br><span class="line">reg price wei</span><br><span class="line">  est store m1</span><br><span class="line">reg price wei len</span><br><span class="line">  est store m2</span><br><span class="line">reg price wei len mpg foreign</span><br><span class="line">  est store m3</span><br><span class="line">* 基本用法 </span><br><span class="line">esttab m1 m2 m3</span><br><span class="line">* 常用的选项 </span><br><span class="line">* 以紧凑的方式呈现结果 </span><br><span class="line">esttab m1 m2 m3, compress nogap</span><br><span class="line">* 修改显著水平 </span><br><span class="line">esttab m1 m2 m3, star (* 0.1 ** 0.05 *** 0.01)</span><br><span class="line">* 呈现 R^2</span><br><span class="line">esttab m1 m2 m3, r2</span><br><span class="line">* 呈现调整后的 R^2</span><br><span class="line">esttab m1 m2 m3, ar2</span><br><span class="line">* 呈现 p 值 </span><br><span class="line">esttab m1 m2 m3, b (%6.3f) brackets p // 在 [] 内呈现 p 值， b (%6.3f) 表示对系数设定占 6 位，保留小数点后三位。 </span><br><span class="line">* 呈现标准化系数 </span><br><span class="line">esttab m1 m2 m3, beta</span><br><span class="line">* 呈现变量的标签， 而非变量名 </span><br><span class="line">label var weight &quot; 汽车重量 & quot;</span><br><span class="line">esttab m1 m2 m3, label</span><br><span class="line">* 呈现弹性系数 </span><br><span class="line">esttab m1 m2 m3, margin         // 默认情况下，略去 Constant</span><br><span class="line">esttab m1 m2 m3, margin constant</span><br></pre></td></tr></table></figure></p>
<p>   输出估计结果： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">esttab m1 m2 m3 using myout.html, replace // 网页 </span><br><span class="line">esttab m1 m2 m3 using myout.tex, replace  // TeX 文档 </span><br><span class="line">`* 其它输出类型：smcl, fixed, tab, csv, scsv, </span><br><span class="line">*               rtf, html, tex, and booktabs`</span><br></pre></td></tr></table></figure></p>
<p>   增加估计结果的输出 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 前期准备 </span><br><span class="line">reg price wei, robust</span><br><span class="line">    est store rob01</span><br><span class="line">reg price wei len, robust</span><br><span class="line">    est store rob02</span><br><span class="line">reg price wei len mpg foreign, robust</span><br><span class="line">    est store rob03</span><br><span class="line">* 增加估计结果 </span><br><span class="line">esttab rob01 rob02 rob03 using myout.csv, append</span><br></pre></td></tr></table></figure></p>
<h3 id="专业输出-excel-文档xml_tab">6.2.3 专业输出 Excel 文档：xml_tab</h3>
<p>   基本的语法结构: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xml_tab [namelist] [, options]</span><br></pre></td></tr></table></figure></p>
<p>   示例： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 前期准备 </span><br><span class="line">sysuse nlsw88, clear   </span><br><span class="line">reg wage hours married</span><br><span class="line">  est store m1</span><br><span class="line">reg wage hours married ttl_exp south</span><br><span class="line">  est store m2</span><br><span class="line">xi:reg wage hours married ttl_exp south i.race</span><br><span class="line">  est store m3</span><br><span class="line">xi:reg wage hours married ttl_exp south i.race i.occupation</span><br><span class="line">  est store m4 </span><br><span class="line">* 基本设定 </span><br><span class="line">xml_tab m1 m2 m3 m4, replace</span><br></pre></td></tr></table></figure></p>
<h3 id="outreg2">6.2.4 outreg2</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">outreg2 [varlist] [estlist] using filename [, options] [: command]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 前期准备 </span><br><span class="line">sysuse nlsw88, clear</span><br><span class="line">tab race, gen (d_race)</span><br><span class="line">  drop d_race1</span><br><span class="line">tab occu, gen (d_occu)</span><br><span class="line">  drop d_occu1</span><br><span class="line">reg wage hours ttl_exp married </span><br><span class="line">  est store m1</span><br><span class="line">reg wage hours ttl_exp married d_race*</span><br><span class="line">  est store m2</span><br><span class="line">reg wage hours ttl_exp married d_race* d_occu*   </span><br><span class="line">  est store m3</span><br><span class="line">* 在窗口显示结果 - seeout  </span><br><span class="line">outreg2 [m1 m2 m3] using tab01, see dta replace </span><br><span class="line">* 输出 word 文档 </span><br><span class="line">outreg2 [m1 m2 m3] using tab01, see word replace</span><br><span class="line">* 输出 excel 文档 </span><br><span class="line">outreg2 [m1 m2 m3] using tab01, see excel replace</span><br><span class="line">* 输出 tex 文档 </span><br><span class="line">outreg2 [m1 m2 m3] using tab01, see tex replace</span><br><span class="line">* 呈现 t 值与 p 值 </span><br><span class="line">outreg2 [m1 m2 m3] using tab01, word replace tstat  </span><br><span class="line">outreg2 [m1 m2 m3] using tab01, word replace pvalue //tstat, pvalue, ci, or beta 只能选一个 </span><br><span class="line">* 小数的显示方式 </span><br><span class="line">outreg2 [m1 m2 m3] using tab01, word replace tstat tdec (2)  //t-value 小数点后两位 </span><br><span class="line">outreg2 [m1 m2 m3] using tab01, word replace tstat rdec (3)  // R2 小数点后三位 </span><br><span class="line">* 新结果的追加 </span><br><span class="line">logit union wage married wage d_race* d_occu*</span><br><span class="line">est store logit                                   // 输出新结果 </span><br><span class="line">outreg2 [logit] using tab01, word append          // 追加新结果 </span><br><span class="line">* 有选择的呈现变量 </span><br><span class="line">outreg2 [m1 m2 m3] using tab01, word replace drop (d_occu*) </span><br><span class="line">* tips：(1) 亦可使用 keep () 选项筛选需要呈现的变量；（2) 使用 order () 选项可以改变变量的先后顺序 </span><br><span class="line">* 添加表格的标题 </span><br><span class="line">outreg2 [m1 m2 m3] using tab01, word replace title (&quot;&quot;) // 在双引号内填写标题 </span><br><span class="line">* 更改注释 </span><br><span class="line">outreg2 [m1 m2 m3] using tab01, word replace nonote addnote (&quot;&quot;， &quot;&quot;， &quot;&quot;) // ，表示分行呈现 </span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>stata</category>
      </categories>
      <tags>
        <tag>基本操作</tag>
        <tag>stata</tag>
        <tag>初级</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 if 进行逻辑判断</title>
    <url>/2019/07/06/%E4%BD%BF%E7%94%A8if%E8%BF%9B%E8%A1%8C%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="使用-range-进行相对引用">1. 使用 Range () 进行相对引用</h1>
<a id="more"></a>
<p>   使用 range () 和 for 循环，可以达到相对引用的目的： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dim i As Integar</span><br><span class="line">For i = 1 To 100, Step 1</span><br><span class="line">    Range (&quot;A&quot; &amp; i)</span><br></pre></td></tr></table></figure></p>
<h1 id="使用-if-函数进行逻辑判断">2. 使用 If 函数进行逻辑判断</h1>
<p>   基本代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If 条件 1 Then</span><br><span class="line">    执行 1</span><br><span class="line">ElseIf 条件 2 Then</span><br><span class="line">    执行 2</span><br><span class="line">Else</span><br><span class="line">    执行 3</span><br><span class="line">End If</span><br></pre></td></tr></table></figure></p>
<p>   一段常用的代码：遇到空格就停止执行 for 语句 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If Range (&quot;a&quot; &amp; i) = &quot;&quot; Then</span><br><span class="line">    Exit For</span><br><span class="line">End If</span><br></pre></td></tr></table></figure></p>
<p>   多个逻辑条件：And 和 Or <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If 条件 1 And 条件 2 Then</span><br><span class="line">    执行动作 1</span><br><span class="line">End If</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>EXCEL&amp;VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>基本语句</tag>
      </tags>
  </entry>
  <entry>
    <title>For 循环</title>
    <url>/2019/07/04/For%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<p>  For 循环用于重复执行同一动作，可以节省大量的时间。 <a id="more"></a></p>
<h1 id="宏的录制">1. 宏的录制</h1>
<p>   如果你的 Excel 没有开发工具选项，你首先需要做的就是添加开发工具选项卡，步骤是：文件 - 选项 - 自定义功能区：主选项卡（右侧）。</p>
<p>   宏的录制只需点击开发工具，在左侧找到录制宏选项，点击录制宏，然后开始执行动作即可，执行完后，点击停止录制。</p>
<p>   在录制宏时，使用相对引用意味着会根据你选的位置自动进行动作的执行，比如你选中 A2 单元格，就会以 A2 单元格为基准执行你的动作。</p>
<p>   为了可视化，可以使用按钮运行宏，只需选中开发工具 - 控件：插入 - 表单控件：按钮，然后放置在相应的位置，此时会弹出制定宏的窗口，选中想要执行的宏即可。</p>
<h1 id="for-循环的结构">2. For 循环的结构</h1>
<p>  VBA 语句的结构是： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub 语句名 ()</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure></p>
<p>  For 循环的结构是： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dim i As Integer # 制定变量为整数型 </span><br><span class="line">For i = 1 To 50  # i 是变量名，可以任意制定，50 为循环次数。</span><br><span class="line">Next             # Next 之前为想要重复执行的动作 </span><br></pre></td></tr></table></figure></p>
<h1 id="实例利用-for-循环制作工资条">3. 实例：利用 For 循环制作工资条</h1>
<figure>
<img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/%20制作工资条.gif" title="制作工资条" alt="制作工资条"><figcaption>制作工资条</figcaption>
</figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>EXCEL&amp;VBA</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>VBA</tag>
        <tag>For 循环</tag>
      </tags>
  </entry>
  <entry>
    <title>stata 基本操作（一）</title>
    <url>/2019/06/30/stata%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="数据的调入和调出">1. 数据的调入和调出</h1>
<a id="more"></a>
<h2 id="数据的调入">1.1 数据的调入</h2>
<p>   在 stata 中，数据的调入意味着从本地或网络中将数据放置在 stata 在内存中分配的空间，除非使用 save 命令将其保存到硬盘上，硬盘中数据文件是不受任何影响的。</p>
<h3 id="调入本地数据">1.1.1 调入本地数据</h3>
<p>   本地数据的格式包括标准化的数据文件、ASCII 数据和 Excel 数据</p>
<h4 id="调入本地-stata-格式数据">1.1.1.1 调入本地 stata 格式数据</h4>
<p>   命令： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use [varlist] [if] [in] using filename [, clear nolabel ]</span><br></pre></td></tr></table></figure></p>
<p>   调入全部数据： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use &quot;D:\stata15\auto.dta&quot;, clear</span><br></pre></td></tr></table></figure></p>
<p>   调入数据文件中的部分变量： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use make price using &quot;D:\stata15\auto.dta&quot;, clear</span><br></pre></td></tr></table></figure></p>
<p>   调入数据中的部分样本： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use &quot;D:\stata15\auto.dta&quot; in 5/10 // 不能添加 clear 选项，否则会报错 </span><br></pre></td></tr></table></figure></p>
<p>   调入数据文件中具有某些特征的样本： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use &quot;D:\stata15\auto.dta&quot; if foreign==1, clear</span><br></pre></td></tr></table></figure></p>
<h4 id="调用-stata-内置数据集">1.1.1.2 调用 stata 内置数据集</h4>
<p>   查看 stata 内置数据集的完整列表： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">help dta_examples</span><br></pre></td></tr></table></figure></p>
<p>   调用数据： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysuse &quot;cancer.dta&quot;, clear</span><br></pre></td></tr></table></figure></p>
<h4 id="insheet-命令-读取-ascii-格式的数据">1.1.1.3 insheet 命令 —— 读取 ASCII 格式的数据</h4>
<p>   基本命令如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insheet [varlsit] using filename [,options]</span><br></pre></td></tr></table></figure></p>
<h4 id="infile-命令-读取无固定格式的数据文件">1.1.1.4 infile 命令 —— 读取无固定格式的数据文件</h4>
<p>   基本命令如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">infile str18 make price mpg rep78 str8 foreign using myout，clear</span><br></pre></td></tr></table></figure></p>
<h4 id="infix-命令-读取固定格式数据">1.1.1.5 infix 命令 —— 读取固定格式数据</h4>
<p>   对于下面的数据： <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190630174511.png"></p>
<p>   基本命令如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">infix gender 1 number 3-5 math 7-8 english 10-11 using 文件路径 + 文件名，clear</span><br></pre></td></tr></table></figure></p>
<h4 id="调入-excel-数据-import-excel-xls2dta">1.1.1.6 调入 excel 数据 —— import excel &amp; xls2dta</h4>
<p>  stata 官方提供了导入 excel 数据的命令：import excel，基本语句如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import excel [using] filename [, import_excel_options] //sheetname - 导入哪个工作表； cellrange（[start][:end]）- 数据区域；firstrow - 表头作为变量名。</span><br></pre></td></tr></table></figure></p>
<p>   对于多个 excel 文件的读取，可以使用 <a href="https://stata-club.github.io/stata_article/2017-02-09.html" title="xls2dta 命令" target="_blank" rel="noopener">xls2dta 命令</a></p>
<h3 id="调入在线数据">1.1.2 调入在线数据</h3>
<h4 id="调入-stata-官网的手册">1.1.2.1 调入 stata 官网的手册</h4>
<p>   查看 stata 官网的手册列表： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">help dta_manuals</span><br></pre></td></tr></table></figure></p>
<p>   查看 stata 官网的手册： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webuse lifeexp, clear</span><br></pre></td></tr></table></figure></p>
<p>  webuse 也可以更改下载的网络地址，下载其 stata 格式的数据： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webuse set 网址 </span><br><span class="line">webuse 数据文件名 </span><br></pre></td></tr></table></figure></p>
<h4 id="调用波士顿学院-economics-实验室提供的数据">1.1.2.2 调用波士顿学院 Economics 实验室提供的数据</h4>
<p>   查看能下载的数据集列表： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view browse &quot;http://fmwww.bc.edu/ec-p/data/wooldridge/datasets.list.html&quot;</span><br></pre></td></tr></table></figure></p>
<p>   下载数据： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bcuse 数据文件名，clear // 如果有些命令是以 zip 保存的，只需再文件名后面加上.zip 即可 </span><br></pre></td></tr></table></figure></p>
<h4 id="调用联邦储备经济数据库">1.1.2.3 调用联邦储备经济数据库</h4>
<p>   命令： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import fred series_list [, options]  //or   import fred, serieslist (filename) [options]</span><br></pre></td></tr></table></figure></p>
<h3 id="大杀器-copy-命令">1.1.3 大杀器 copy 命令</h3>
<p>   基本命令如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy filename1 filename2 [, options]</span><br></pre></td></tr></table></figure></p>
<h2 id="数据的调出">1.2 数据的调出</h2>
<p>   数据在调出之前首先需要存储，命令如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 文件名.dta, replace</span><br></pre></td></tr></table></figure></p>
<h3 id="导出为-.raw-文本格式">1.2.1 导出为 .raw 文本格式</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">outfile [varlist] using filename [if] [in] [, options]</span><br></pre></td></tr></table></figure>
<h3 id="导出为--tab--分隔的文本文件">1.2.2 导出为 -Tab- 分隔的文本文件</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">outsheet [varlist] using filename [if] [in] [, options]</span><br></pre></td></tr></table></figure>
<h3 id="导出为-xml-格式">1.2.3 导出为 XML 格式</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlsave filename [if] [in] [, xmlsave_options]</span><br></pre></td></tr></table></figure>
<h3 id="导出为-wordexceltex">1.2.4 导出为 Word,Excel,Tex</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dataout &lt;using filename&gt; [, options]</span><br></pre></td></tr></table></figure>
<h3 id="导出为-.spss-.rats-.limdep-格式">1.2.5 导出为 .spss, .rats, .limdep 格式</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">outdat [varlist] using filename [, replace type (packagelist)] nostring listwise</span><br></pre></td></tr></table></figure>
<h1 id="数据文件的浏览">2. 数据文件的浏览</h1>
<h2 id="变量的命名">2.1 变量的命名</h2>
<p>   变量命名的 stata 基本命令是： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rename old_varname new_varname</span><br></pre></td></tr></table></figure></p>
<p>   变量命名的基本规则是：（1）首字母必须为 字母；（2）由英文字母、数字或 _ 组成，至多不超过 32 个；（3）英文字母的大写和小写具有不同的含义。</p>
<h2 id="查看数据资料的结构">2.1 查看数据资料的结构</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describe</span><br></pre></td></tr></table></figure>
<h2 id="更改变量的存储类型">2.2 更改变量的存储类型</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">recast 修改为的变量类型 变量名称，force</span><br></pre></td></tr></table></figure>
<h2 id="更改变量的显示格式">2.3 更改变量的显示格式</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">format 变量名 格式 </span><br></pre></td></tr></table></figure>
<p>常用的格式：（1）%-18s - 靠左列印于屏幕上；%~18s - 居中；%18s - 靠右。（2）%6.2f - 总共占 6 个空格，小数位占两个空格。</p>
<h2 id="给数据文件或者变量添加标签">2.4 给数据文件或者变量添加标签</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">label data 数据文件标签名 // 中文要用 & quot;&quot; 包裹 </span><br><span class="line">label var 变量名 变量标签名 </span><br></pre></td></tr></table></figure>
<p>   还可以给类别变量进行赋值： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">label define 标签名  数字 &quot; 文字 & quot;  // 数字名和文字名一一对应 </span><br><span class="line">label values 变量名 标签名  // 将变量值和标签联系起来 </span><br></pre></td></tr></table></figure></p>
<p>   注：在 stata 中，数据显示为红颜色表明是文字，显示为蓝颜色表明是文字 - 数字对应。    还可以对标签进行管理： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">labelbook  // 列出所有数字 - 文字对应的标签 </span><br></pre></td></tr></table></figure></p>
<p>   进一步，还可以添加说明： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">note 变量名：说明内容 // 省略变量名时表示为整个数据添加说明 </span><br><span class="line">notes   // 查看说明内容 </span><br></pre></td></tr></table></figure></p>
<p>   当数据比较大，尤其是变量比较多是，可以使用如下命令搜索变量： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lookfor 变量名 // 中文需加 & quot;&quot;</span><br></pre></td></tr></table></figure></p>
<h1 id="数据的基本统计量">3. 数据的基本统计量</h1>
<h2 id="summarize-命令">3.1 summarize 命令</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">summarize [varlist] [if] [in] [weight] [, options]</span><br></pre></td></tr></table></figure>
<h2 id="论文格式的统计表格">3.2 论文格式的统计表格</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tabstat varlist [if] [in] [weight] [, options]</span><br></pre></td></tr></table></figure>
<table>
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">选项（options)</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">by (varname)</td>
<td style="text-align: center;">通过类别变量进行分组</td>
</tr>
<tr class="even">
<td style="text-align: center;">statistics (statname [...])</td>
<td style="text-align: center;">制定要输出的统计值，如:mean - 均值，min - 最小值，max - 最大值，p25-med-p75 - 分位数，sd - 标准差</td>
</tr>
<tr class="odd">
<td style="text-align: center;">columns (statistics)</td>
<td style="text-align: center;">以统计值作为列</td>
</tr>
<tr class="even">
<td style="text-align: center;">columns (variables)</td>
<td style="text-align: center;">以变量作为列</td>
</tr>
<tr class="odd">
<td style="text-align: center;">format [(% fmt)]</td>
<td style="text-align: center;">设置显示格式，默认为 %9.0g</td>
</tr>
</tbody>
</table>
<h2 id="输出统计表格">3.3 输出统计表格</h2>
<h3 id="将统计结果输出到-txt-文档中">3.3.1 将统计结果输出到 txt 文档中</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tabexport varlist [if exp] [in range] [weight] using filename , statistics (statistics_list) [ list (list_options) format (format (s)) by (varlist) cw total noreshape variableorder outfile out_options ]</span><br></pre></td></tr></table></figure>
<p>   实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysuse auto, clear</span><br><span class="line">tabexport turn trunk length using results.txt, s (mean sd) by (foreign) total replace format (%9.1f)</span><br></pre></td></tr></table></figure></p>
<h3 id="将统计结果输入-word-文档中">3.3.2 <a href="https://github.com/arlionn/Stata_Blogs/blob/master/%%20E5%90%9B%%20E7%94%9F%%20E6%88%91%%20E6%9C%%20AA%%20E7%94%9F%%20EF%%20BC%81Stata---%%20E8%%20AE%%20BA%%20E6%96%87%%20E5%9B%9B%%20E8%%20A1%%20A8%%20E4%%20B8%80%%20E9%94%%20AE%%20E5%87%%20BA.md" title="将统计结果输入 word 文档中" target="_blank" rel="noopener">将统计结果输入 word 文档中</a></h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sum2docx varlist [if] [in] [weight] using filename , [options]</span><br></pre></td></tr></table></figure>
<table>
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>选项</th>
<th>描述</th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>replace</td>
<td>覆盖现有的文档</td>
<td></td>
</tr>
<tr class="even">
<td>append</td>
<td>在现有的文档中添加</td>
<td>必须有这个文档</td>
</tr>
<tr class="odd">
<td>title</td>
<td>指定标题</td>
<td>title (&quot;标题名&quot;)</td>
</tr>
<tr class="even">
<td>font</td>
<td>指定字体</td>
<td>fontname[, size [, color]]</td>
</tr>
<tr class="odd">
<td>stats ()</td>
<td>指定输出的统计值</td>
<td>包括 N, mean (fmt), var (fmt), sd (fmt), skewness (fmt), kurtosis (fmt), sum (fmt), sum_w (fmt), min (fmt), median (fmt), max (fmt), p1 (fmt), p5 (fmt), p10 (fmt), p25 (fmt), p75 (fmt), p90 (fmt), p95 (fmt),p99 (fmt)</td>
</tr>
</tbody>
</table>
<h1 id="基本的图形分析">4. 基本的图形分析</h1>
<h2 id="直方图">4.1 直方图</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">histogram varname [if] [in] [weight] [, [continuous_opts | discrete_opts] options]</span><br></pre></td></tr></table></figure>
<p>   常用的 options 有：frequency - 添加频数；normal - 添加正态分布的线条。</p>
<p>  ps: 离散变量必须添加 discrete 选项。</p>
<h2 id="密度函数图">4.2 密度函数图</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kdensity varname [if] [in] [weight] [, options]</span><br></pre></td></tr></table></figure>
<h2 id="散点图">4.3 散点图</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[twoway] scatter varlist [if] [in] [weight] [, options]</span><br></pre></td></tr></table></figure>
<h2 id="相关系数矩阵">4.4 相关系数矩阵</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph matrix varlist [if] [in] [weight] [, options]</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>stata</category>
      </categories>
      <tags>
        <tag>基本操作</tag>
        <tag>stata</tag>
        <tag>初级</tag>
      </tags>
  </entry>
  <entry>
    <title>基本数据统计</title>
    <url>/2019/06/29/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="便捷数据获取">1. 便捷数据获取</h1>
<a id="more"></a>
<h2 id="利用-pandas_datareader-获取金融数据">1.1 利用 pandas_datareader 获取金融数据</h2>
<p>   借助 pandas-datareader 包，可以直接从一些金融数据网站上获取数据，如雅虎和谷歌的金融数据。</p>
<p>   代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas_datareader.data as web</span><br><span class="line">import datetime</span><br><span class="line">from datetime import date</span><br><span class="line">start = datetime.datetime (2018, 6, 28) # or start = &apos;6/28/2016&apos;</span><br><span class="line">end = datetime.date.today ()</span><br><span class="line">prices = web.DataReader (&apos;AAPL&apos;, &apos;yahoo&apos;, start, end)</span><br></pre></td></tr></table></figure></p>
<h1 id="利用-tushare-获取金融数据">1.2 利用 tushare 获取金融数据</h1>
<p>   代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tushare as ts</span><br><span class="line">pro = ts.pro_api (&apos;your token here&apos;)</span><br><span class="line">df = pro.daily (ts_code=&apos; 股票代码 & apos;, start_date=&apos;20180701&apos;, end_date=&apos;20180718&apos;)</span><br></pre></td></tr></table></figure></p>
<h1 id="数据准备">2. 数据准备</h1>
<p>   修改列索引和行索引，代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改列索引 </span><br><span class="line">cols = [&apos; 股票代码 & apos;, &apos; 交易日期 & apos;, &apos; 开盘价 & apos;,]</span><br><span class="line">df.columns = cols</span><br><span class="line"># 修改行索引 </span><br><span class="line">df.index = range (1, len (dataFrame) + 1)</span><br></pre></td></tr></table></figure></p>
<p>   修改日期格式，代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from datetime import date</span><br><span class="line">firstday = date.fromtimestamp (1464010200)</span><br><span class="line">finalday = date.strftime (firstday, &apos;% Y-% m-% d&apos;)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code</span><br></pre></td></tr></table></figure>
<p>   创建时间序列，代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dates = pd.date_range (&apos;20170520&apos;, periods = 7) # 制定起始日期和长度 </span><br></pre></td></tr></table></figure></p>
<h1 id="数据显示">3. 数据显示</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list (df.index) # 行索引 </span><br><span class="line">list (df.columns) # 列索引 </span><br><span class="line">df.values # 查看值 </span><br><span class="line">df.describe # 查看数据描述 </span><br><span class="line">df.head () # 查看前几行的数据 </span><br><span class="line">df.tail () # 查看后几行的数据 </span><br></pre></td></tr></table></figure>
<h1 id="数据选择">4. 数据选择</h1>
<table>
<thead>
<tr class="header">
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>df[col]</td>
<td>根据列名，并以 Series 的形式返回列</td>
</tr>
<tr class="even">
<td>df[[col1, col2]]</td>
<td>以 DataFrame 形式返回多列</td>
</tr>
<tr class="odd">
<td>df.loc[:3,‘a’]</td>
<td>选取 a 列，选择特定行的数据，返回 series 格式</td>
</tr>
<tr class="even">
<td>df.loc[:3,[‘a’]]</td>
<td>基于 a 列，选择特定行的数据，返回 DataFrame 格式</td>
</tr>
<tr class="odd">
<td>df.loc[1:2,[‘a’,‘b’]] &amp; df.loc[1:2,‘a’:‘b’]</td>
<td>基于列 label, 可选取特定行（根据行 index）</td>
</tr>
<tr class="even">
<td>df.iloc[1:3, [1, 2]] &amp; df.iloc[1:3, 1: 3]</td>
<td>基于行 / 列的 position</td>
</tr>
<tr class="odd">
<td>df.at[3, ‘tip’]</td>
<td>根据指定行 index 及列 label, 快速定位 DataFrame 的元素</td>
</tr>
<tr class="even">
<td>df.iat[3, 1]</td>
<td>与 at 类似，不同的是根据 position 来定位的</td>
</tr>
<tr class="odd">
<td>df.iloc[0,:]</td>
<td>返回第一行，[x,y] x 为行，y 为列，：代表所有</td>
</tr>
<tr class="even">
<td>df.iloc[0,0]</td>
<td>返回第一列的第一个元素，直接写入数字代表单点位置</td>
</tr>
<tr class="odd">
<td>s.iloc[0]</td>
<td>按位置选取数据</td>
</tr>
<tr class="even">
<td>s.loc[‘index_one’]</td>
<td>按索引选取数据 / 列名</td>
</tr>
</tbody>
</table>
<h1 id="简单统计与处理">5. 简单统计与处理</h1>
<p>   求平均值 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">df. 开盘价.mean () #数据文件名。索引名.mean ()</span><br></pre></td></tr></table></figure></p>
<p>   条件筛选 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 数据文件名 [(筛选条件 1)&amp;(筛选条件 2)]. 索引名 </span><br></pre></td></tr></table></figure></p>
<p>   排序 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 新数据文件名 = 原数据文件名.sort_values ( by = &apos; 索引名 & apos;, ascending = True)  # True - 从小到大；False - 从大到小 </span><br></pre></td></tr></table></figure></p>
<p>   计数统计 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n = 数据文件名.[(条件 1)&amp;(条件 2)] # 筛选 </span><br><span class="line">len (n)                         # 计数 </span><br></pre></td></tr></table></figure></p>
<h1 id="分组grouping">6. <a href="http://mp.weixin.qq.com/s?__biz=MzAwOTgzMDk5Ng==&amp;mid=2650834895&amp;idx=1&amp;sn=1815e2667787f9a12345c2fbfa71d144&amp;scene=0#wechat_redirect" title="分组：Grouping" target="_blank" rel="noopener">分组：Grouping</a></h1>
<p>   在 Python 中，分组需要使用.groupby () 的方法。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 数据文件名.groupby (&apos; 分组列 & apos;)</span><br></pre></td></tr></table></figure></p>
<p>   分组后，还需进行聚合操作： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 数据文件名.groupby (&apos; 分组列 & apos;).max</span><br><span class="line"> 数据文件名.groupby (&apos; 分组列 & apos;).min</span><br><span class="line"> 数据文件名.groupby (&apos; 分组列 & apos;).median</span><br></pre></td></tr></table></figure></p>
<h1 id="追加merge">7. 追加：Merge</h1>
<p>  append 追加 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 数据文件名.append (数据文件名，ignore_index=True)</span><br></pre></td></tr></table></figure></p>
<p>  conact 连接 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pd.conact ([&apos; 数据文件 1&apos;, &apos; 数据文件 2&apos;], axis=0, ignore_index = True) # axis=0 为默认值，默认按行拼接。</span><br><span class="line">pd.conact ([&apos; 数据文件 1&apos;, &apos; 数据文件 2&apos;], axis=1) # axis=1 表示左右拼接 </span><br><span class="line">pd.conact ([&apos; 数据文件 1&apos;, &apos; 数据文件 2&apos;], axis=1, join=&apos;inner&apos;, sort=True) # join=&apos;inner&apos; 表示按列拼接有相同索引的行； sort=True 表示升序排列。</span><br></pre></td></tr></table></figure></p>
<p>  join 连接 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pd.merge (数据文件 1, 数据文件 2, on = &apos; 连接列 & apos;, sort = true, suffixes = [&apos; 数据文件 1 的后缀名 & apos;, &apos; 数据文件 2 的后缀名 & apos;]) </span><br><span class="line"># 当连接列名不同时，可以使用 left_on 和 right_on 分别设置不同的列名 </span><br><span class="line">pd.merge (数据文件 1, 数据文件 2, left_on = &apos;&apos;, right_on = &apos;&apos;, sort = true, suffixes = [&apos; 数据文件 1 的后缀名 & apos;, &apos; 数据文件 2 的后缀名 & apos;])</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>饼图美化与 PPT 图表</title>
    <url>/2019/06/28/%E9%A5%BC%E5%9B%BE%E7%BE%8E%E5%8C%96%E4%B8%8EPPT%E5%9B%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="双坐标柱形图的补充知识">1. 双坐标柱形图的补充知识</h1>
<a id="more"></a>
<p>   利用空白辅助列和系列重叠，可以达成下图的结果： <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190628223047.png"></p>
<p>   分别在主坐标轴和次坐标轴创建两个辅助列，然后右键：选择数据，调整两个辅助列的数据源的位置，直至出现下图： <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190628223445.png"></p>
<p>   然后设置和调整系列重叠，更改柱形颜色，以及其他美化工作。</p>
<h1 id="饼图美化">2. 饼图美化</h1>
<p>   常用的设置：三维旋转 - 调整饼图的厚度，添加数据标签：调整数据标签显示的元素。</p>
<p>   双层饼图：分别设置主坐标轴和次坐标轴，然后选中上层图表的所有元素，向外拉开，然后分别选中上层图表的每个元素，向内拉重新组成图表，形成双层图表，之后可以做其他相关的美化工作。</p>
<h1 id="ppt-中的图表">3. PPT 中的图表</h1>
<h2 id="图表粘贴">3.1 图表粘贴</h2>
<p>   选择粘贴选项：第一个是使用目标主题和嵌入工作簿，此时颜色会选用 PPT 中本来设置好的颜色；第二个是保留源格式和嵌入工作簿，此时颜色会保持为原来 Excel 中的配色；第三个是使用目标主题和链接数据，此时颜色会选用 PPT 中本来设置好的颜色，并且数据会随着 Excel 中数据的变动而更新，可在图表工具中的设计中点击刷新数据；第四个是保留源格式和链接数据，此时颜色会保持为原来 Excel 中的配色，并且数据会随着 Excel 中数据的变动而更新，可在设计中点击刷新数据。</p>
<p>   如果要实现打开 PPT 自动弹出自动更新的选项，可以选择粘贴 - 选择性粘贴：粘贴链接。</p>
<h2 id="图表动画">3.2 图表动画</h2>
<p>   将 Excel 中的图表作为图表粘贴在 PPT 中，选择选项卡下的动画，选择进入效果可以做一个初步的动画。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>第二十二讲 制作甘特图与动态甘特图</title>
    <url>/2019/06/26/%E7%94%98%E7%89%B9%E5%9B%BE/</url>
    <content><![CDATA[<p>   甘特图是一个表示时间日程的进度图，以发明者亨利・劳伦斯・甘特的名字命名。 <a id="more"></a></p>
<h1 id="普通甘特图的制作">1. 普通甘特图的制作</h1>
<p>   甘特图的制作思路是：利用堆积条形图的特性，将底部的条形 “隐身”，然后调整坐标轴的取值范围，达到 “悬空” 的效果。</p>
<p>   例子：<img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190626213647.png"></p>
<p>   制作步骤：1）选择数据，插入：堆积条形图；2） 将纵坐标轴的坐标轴选项设置为：逆序类别；3) 选中计划开始日的数据系列，设置数据系列格式：无填充，无边框线条，若有阴影，则设置为无阴影；4) 更改横坐标轴的值：在空白单元格处，通过将单元格格式从日期更改为常规，从而将开始日期与结束日期转化为数字格式，此处：2014/5/1：41760，2014/5/26：41785。</p>
<h1 id="动态甘特图的制作">2. 动态甘特图的制作</h1>
<p>   动态甘特图与普通甘特图的区别是数据源是动态的，制作步骤是：利用 if 函数拆分天数为：已完成和未完成，已完成 = IF ($B$12&lt;B2,0,IF ($B$12&gt;B2+C2,C2,$B$12-B2))，未完成 = C2-E2，然后用 = today () 控制 B12 的值。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>第二十一讲 经典动态图表实现原理</title>
    <url>/2019/06/25/%E7%BB%8F%E5%85%B8%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="定义表格区域的名称">1. 定义表格区域的名称</h1>
<p>   在制作动态图表之前，首先需要学习如何定义表格区域的名称，方便后面的引用。方法是：公式 - 定义的名称：定义名称，填写名称和引用位置，引用位置可以使用公式。 <a id="more"></a></p>
<h1 id="表单控件">2. 表单控件</h1>
<p>   动态图表的实现首先可能用到的工具是表单控件，打开文件 - 选项：自定义功能区 - 右侧：主选项卡 - 勾选开发工具，添加开发工具到 Excel 选项卡中。</p>
<p>   动态图表可能用到的表单控件有两个：复选框和滚动条，选择开发工具 - 控件：插入：复选框 / 滚动条。</p>
<p>   复选框的用法是：定义名称:=IF (复选框要链接的单元格，要选择的数据区域，空白数据区域)，插入一个复选框，然后右键：设置控件格式 - 控制：值：已选择：单元格链接，单元格链接选择一个空单元格即可。</p>
<p>   滚动条的用法是：插入一个滚动条，然后右键：设置控件格式 - 控制：最小值 &amp; 最大值，单元格链接选择一个空单元格即可。</p>
<h1 id="offset-函数和-counta-函数">3. OFFSET 函数和 COUNTA 函数</h1>
<p>  OFFSET 函数的用法是：=OFFSET (基准格，向左偏移几行，向下偏移几列，区域有几行，区域有几列)，作用是选择表格区域；COUNTA 函数的用法是：=COUNTA (表格区域)，作用是计算表格区域内非空单元格的数量。</p>
<p>  OFFSET 函数内嵌 COUNTA 函数可以实现表格区域的动态选择，如:=OFFSET (基准格，COUNTA (基准格所在的列)-10,0,10,1), 作用是始终选中基准格所在列的最后 10 个数据。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>PIL 简明课程</title>
    <url>/2019/06/24/PIL%E7%AE%80%E6%98%8E%E8%AF%BE%E7%A8%8B/</url>
    <content><![CDATA[<p>  PIL (Python Image Library) 是 Python 平台处理图片的事实标准，兼具强大的功能和简洁的 API。 <a id="more"></a> # 1. <a href="https://pillow.readthedocs.io/en/stable/reference/Image." title="Image 类" target="_blank" rel="noopener">Image 类</a></p>
<p>  Image 类包含了 PIL 的主要功能，如打开图片、旋转图片以及使用外部查看器显示图片，还可以创建图片的缩略图。</p>
<p>   打开图片的实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">im = Image.open (&quot; 图片名.jpg&quot;)</span><br></pre></td></tr></table></figure></p>
<p>   旋转图片的实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">im.rotate (角度).show ()</span><br></pre></td></tr></table></figure></p>
<p>  Image 类还可以使用给定的模式和大小创建新图像，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PIL.Image.new（模式，大小，颜色 = 0 ）</span><br></pre></td></tr></table></figure></p>
<h1 id="imagedraw-模块">2. ImageDraw 模块</h1>
<p>  ImageDraw 模块为 Image 对象提供简单的 2D 图像，可以使用此模块创建新图像，注释或润饰现有图像，以及动态生成图形以供 Web 使用，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image, ImageDraw</span><br><span class="line">draw = ImageDraw.Draw (img)</span><br></pre></td></tr></table></figure></p>
<h1 id="imagefont-模块与-imagedraw.tex-方法">3. ImageFont 模块与 ImageDraw.tex 方法</h1>
<p>   该 ImageFont 模块定义了一个具有相同名称的类。此类的实例存储位图字体，并与该 PIL.ImageDraw.Draw.text () 方法一起使用，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import ImageFont, ImageDraw</span><br><span class="line">draw = ImageDraw.Draw (img)</span><br><span class="line">font = ImageFont.truetype (路径 + 文件名 - 带后缀， size=)        # use a truetype font</span><br><span class="line">font = ImageFont.load (&quot;arial.pil&quot;)                         # use a bitmap font</span><br><span class="line">draw.text ((宽，高), &quot;Hello, World!&quot;, font=font)</span><br></pre></td></tr></table></figure></p>
<h1 id="imagecolor-模块">4. ImageColor 模块</h1>
<p>   该 ImageColor 模块包含从 CSS3 样式颜色说明符到 RGB 元组的颜色表和转换器，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import ImageColor   </span><br><span class="line"># getrgb (color)      </span><br><span class="line">print (ImageColor.getrgb (&quot;silver&quot;)) #(192,192,192)</span><br><span class="line">print (ImageColor.getrgb (&quot;#f35772&quot;)) #(243,87,114)</span><br><span class="line">print (ImageColor.getrgb (&quot;hsl (137,20%,50%)&quot;))  #(102, 153, 116)</span><br><span class="line">#getcolor (color, mode)</span><br><span class="line">print (ImageColor.getcolor (&quot;red&quot;,&quot;RGBA&quot;))  #(255, 0, 0, 255)</span><br><span class="line">print (ImageColor.getcolor (&quot;red&quot;,&quot;P&quot;)) #(255, 0, 0)</span><br><span class="line">print (ImageColor.getcolor (&quot;red&quot;,&quot;L&quot;))  #76</span><br><span class="line">print (ImageColor.getcolor (&quot;red&quot;,&quot;1&quot;))   #76</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>图片处理</tag>
      </tags>
  </entry>
  <entry>
    <title>一行代码:if __name__ == &quot;__main__&quot;</title>
    <url>/2019/06/24/%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>   在 Python 的代码中，经常会出现一行代码：if __name__ == '__main__':，这一行代码该如何理解？ <a id="more"></a></p>
<h1 id="含义">1. 含义</h1>
<p>  <strong>name</strong> 是当前模块名，当模块被直接运行时模块名为 <strong>main</strong> 。这句话的意思就是，当模块被直接运行时，以下代码块将被运行，当模块是被导入时，代码块不被运行。</p>
<h1 id="一个简单的示例">2. 一个简单的示例</h1>
<p>   首先，我们创建一个 const.py 文件，内容如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PI = 3.14</span><br><span class="line">def main ():</span><br><span class="line">    print &quot;PI:&quot;, PI</span><br><span class="line">main ()</span><br></pre></td></tr></table></figure></p>
<p>   直接在 python 执行这个文件 (python const.py), 会输出： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PI: 3.14</span><br></pre></td></tr></table></figure></p>
<p>   然后，我们再新建一个文件： area.py，用到 const.py 文件中的 PI 变量，从 const.py 中把 PI 变量导入到 area.py 中： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from const import PI</span><br><span class="line">def calc_round_area (radius):</span><br><span class="line">    return PI * (radius ** 2)</span><br><span class="line">def main ():</span><br><span class="line">    print &quot;round area: &quot;, calc_round_area (2)</span><br><span class="line">main ()</span><br></pre></td></tr></table></figure></p>
<p>   接着，运行 area.py，输出结果： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PI: 3.14</span><br><span class="line">round area:  12.56</span><br></pre></td></tr></table></figure></p>
<p>   但是，我们并不想 const.py 中的 main () 函数被运行，此时 if __name__ == '__main__' 就派上了用场。将 const.py 修改为： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PI = 3.14</span><br><span class="line">def main ():</span><br><span class="line">    print &quot;PI:&quot;, PI</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">main ()</span><br></pre></td></tr></table></figure></p>
<p>   再运行 area.py，输出如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">round area:  12.56</span><br></pre></td></tr></table></figure></p>
<p>   运行 area.py, 仍会输出结果： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PI: 3.14</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>DataFrame</title>
    <url>/2019/06/24/DataFrame/</url>
    <content><![CDATA[<p>  DataFrame 是一种表格型数据结构，它包含两列及以上的一组有序的列，DataFrame 大致可看成共享同一个 index 的 Series 集合。 <a id="more"></a></p>
<h1 id="dataframe-的创建">1. DataFrame 的创建</h1>
<h2 id="直接创建">1.1 直接创建</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;import pandas as pd</span><br><span class="line">&gt;&gt;&gt; import numpy as np</span><br><span class="line">&gt;&gt;&gt;df1 = pd.DataFrame (np.random.randn (4,4),index=list (&apos;ABCD&apos;),columns=list (&apos;ABCD&apos;))</span><br><span class="line">&gt;&gt;&gt;df1</span><br><span class="line">          A         B         C         D</span><br><span class="line">A  1.480797  0.105993  1.821411  2.749214</span><br><span class="line">B  1.088816 -0.614638  0.146795  0.978935</span><br><span class="line">C  0.479352  0.964131 -1.668833  0.910711</span><br><span class="line">D -0.352463  0.077050  2.295399  1.231342</span><br></pre></td></tr></table></figure>
<h2 id="根据字典创建">1.2 根据字典创建</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;import pandas as pd</span><br><span class="line">&gt;&gt;&gt;data = &#123;&apos;name&apos;:[&apos;Wangdachui&apos;, &apos;Linling&apos;, &apos;Niuyun&apos;], &apos;pay&apos;:[4000, 5000, 6000]&#125;</span><br><span class="line">&gt;&gt;&gt;frame = pd.DataFrame (data)</span><br><span class="line">&gt;&gt;&gt;frame</span><br><span class="line">        name    pay</span><br><span class="line">0 Wangdachui   4000</span><br><span class="line">1    Linling   5000</span><br><span class="line">2     Niuyun   6000</span><br></pre></td></tr></table></figure>
<h1 id="dataframe-的基本操作">2. DataFrame 的基本操作</h1>
<p>   可以根据列名来选取一列，返回一个 Series: <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;import pandas as pd</span><br><span class="line">&gt;&gt;&gt;data = &#123;&apos;name&apos;:[&apos;Wangdachui&apos;, &apos;Linling&apos;, &apos;Niuyun&apos;], &apos;pay&apos;:[4000, 5000, 6000]&#125;</span><br><span class="line">&gt;&gt;&gt;frame = pd.DataFrame (data)</span><br><span class="line">&gt;&gt;&gt;frame</span><br><span class="line">        name    pay</span><br><span class="line">0 Wangdachui   4000</span><br><span class="line">1    Linling   5000</span><br><span class="line">2     Niuyun   6000</span><br><span class="line">&gt;&gt;&gt;frame [&apos;name&apos;]</span><br><span class="line">0 Wangdachui  </span><br><span class="line">1    Linling  </span><br><span class="line">2     Niuyun</span><br></pre></td></tr></table></figure></p>
<p>   或者根据行名来选取一行，返回一个 Series： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;frame.ix [2]</span><br><span class="line">name Niuyun</span><br><span class="line">pay    6000</span><br></pre></td></tr></table></figure></p>
<p>  DataFrame 可以直接进行对对象的修改，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;frmae [&apos;name&apos;] = &apos;admin&apos;</span><br><span class="line">        name    pay</span><br><span class="line">0      admin   4000</span><br><span class="line">1      admin   5000</span><br><span class="line">2      admin   6000</span><br></pre></td></tr></table></figure></p>
<p>  DataFrame 也可以通过 del 删除行或列，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;del frame [&apos;pay&apos;]</span><br><span class="line">&gt;&gt;&gt;frame</span><br><span class="line">        name   </span><br><span class="line">0      admin   </span><br><span class="line">1      admin   </span><br><span class="line">2      admin</span><br></pre></td></tr></table></figure></p>
<h1 id="dataframes-的-name-属性">3. DataFrames 的 name 属性</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;frame.index.name = &apos;No&apos;</span><br><span class="line">&gt;&gt;&gt;frame</span><br><span class="line">         name    pay</span><br><span class="line">No        </span><br><span class="line">0  Wangdachui   4000</span><br><span class="line">1     Linling   5000</span><br><span class="line">2      Niuyun   6000</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>Pandas</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>第二十讲 图表基础</title>
    <url>/2019/06/24/%E5%9B%BE%E8%A1%A8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="认识图表元素">1. 认识图表元素</h1>
<p>   在 EXcel2016 中，图表元素有：坐标轴、坐标轴标题、图表标题、数据标签、数据表、误差线、网格线、图例、线条、趋势线和涨 / 跌柱线。 <a id="more"></a> # 2. 创建并美化柱形图    坐标轴可以分为主要坐标轴和次要坐标轴，利用主次坐标轴可以美化柱形图，实例如下：    两个数据系列相差过大导致其中一个数据系列难以展示，需要通过次坐标轴进行调账。 <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190624112825.png">    选中指标完成度数据系列，右键 - 设置数据系列格式 - 系列选项 - 系列绘制在：次坐标轴，然后右键 - 更改图标类型 - 选择：簇状柱形图 - 次坐标轴上的折线图。，得到下图： <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190624113615.png">    调整两个坐标轴的边界：最小值和最大值，使两个图表上下分列。 <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190624113933.png">    将图例移至绘图区域左上方，将图表标题改为 “分公司业绩与完成对比图”，将坐标轴：标签和刻度线都选为无，将坐标轴 - 线条：选为无线条，将边框选为无线条，然后将网格线设置为虚线。 <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190624114358.png">    选中折线图的数据系列 - 填充与线条 - 标记 - 标记选项：内置：方块，选择填充，填充颜色为绿色，再选中边框，把颜色改为绿色。再添加图表元素：数据标签，位置为上方。 <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190624115143.png"> # 3. 图表通用设置    可以自建一个图形，复制 - 粘贴后改变默认的柱形，实例如下： <img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190624115909.png">    但是，默认是以伸展模式填充的，可以通过右键 - 设置数据系列格式 - 填充与线条：层叠，将其更改为层叠模式。 # 4. 巧用模板    可以将别人创建的图表另存为模板，以后可以在图表：模板中直接使用。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>变长字典 Series</title>
    <url>/2019/06/23/%E5%8F%98%E9%95%BF%E5%AD%97%E5%85%B8Series/</url>
    <content><![CDATA[<p>  Pandas 中的 Series 的数据结构相当于定长有序的字典，并且它的 index 和 value 是独立的，可以分别设置。 <a id="more"></a></p>
<h1 id="series-的创建">1. Series 的创建</h1>
<p>  Series 具有两个特征：第一，Series 的数据结构类似一维数组对象；第二，Series 由数据和索引组成。</p>
<p>  Series 的创建实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;from pandas import Series</span><br><span class="line">&gt;&gt;&gt;aSer = pd.Series ([1, 2.0, &apos;a&apos;])</span><br><span class="line">&gt;&gt;&gt;aSer</span><br><span class="line">0    1</span><br><span class="line">1    2</span><br><span class="line">2    a</span><br></pre></td></tr></table></figure></p>
<p>  Series 自带索引，在创建时可以指定索引，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bSer = pd.Series ([&apos;apple&apos;, &apos;peach&apos;, &apos;lemon&apos;], index=[1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; bSer</span><br><span class="line">1    apple</span><br><span class="line">2    peach</span><br><span class="line">3    lemon</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></p>
<h1 id="series-的基本运算">2. Series 的基本运算</h1>
<p>  Series 与字典类似，可以通过 index 访问数据，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;from pandas import Series</span><br><span class="line">&gt;&gt;&gt;aSer = pd.Series ([3, 5, 7], index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;])</span><br><span class="line">&gt;&gt;&gt;aSer [&apos;b&apos;]</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p>
<p>  Series 还可以进行基本的加减乘除以及乘方等，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;from pandas import Series</span><br><span class="line">&gt;&gt;&gt;aSer = pd.Series ([3, 5, 7], index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;])</span><br><span class="line">&gt;&gt;&gt;aSer*2 </span><br><span class="line">a     6</span><br><span class="line">b    10</span><br><span class="line">c    14</span><br><span class="line">dtype: int64</span><br><span class="line">&gt;&gt;&gt;import numpy as np</span><br><span class="line">&gt;&gt;&gt;np.exp (aSer) #计算自然对数的 n 次方 </span><br><span class="line">a      20.085537</span><br><span class="line">b     148.413159</span><br><span class="line">c    1096.633158</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p>
<h1 id="series-的数据对齐">3. Series 的数据对齐</h1>
<p>   数据对齐即索引和数据同时处于一行，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;from pandas import Series</span><br><span class="line">&gt;&gt;&gt;data = &#123;&apos;AXP&apos;:&apos;86.40&apos;, &apos;CSCO&apos;:&apos;122.64&apos;, &apos;BA&apos;:&apos;99.44&apos;&#125;</span><br><span class="line">&gt;&gt;&gt;sindex=[&apos;AXP&apos;, &apos;CSCO&apos;, &apos;BA&apos;, &apos;AAPL&apos;]</span><br><span class="line">&gt;&gt;&gt;aSer = pd.Series (data, index=sindex) #注意这里是用字典来定义的，跟前面的 list 定义不一样 </span><br><span class="line">&gt;&gt;&gt;aSer</span><br><span class="line">AXP      86.40</span><br><span class="line">CSCO    122.64</span><br><span class="line">BA       99.44</span><br><span class="line">AAPL       NaN</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></p>
<p>  Series 的算术运算也会有数据对齐，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;from pandas import Series</span><br><span class="line">&gt;&gt;&gt;data = &#123;&apos;AXP&apos;:&apos;86.40&apos;, &apos;CSCO&apos;:&apos;122.64&apos;, &apos;BA&apos;:&apos;99.44&apos;&#125;</span><br><span class="line">&gt;&gt;&gt;sindex=[&apos;AXP&apos;, &apos;CSCO&apos;, &apos;BA&apos;, &apos;AAPL&apos;]</span><br><span class="line">&gt;&gt;&gt;aSer = pd.Series (data, index=sindex)</span><br><span class="line">&gt;&gt;&gt;bSer = &#123;&apos;AXP&apos;: &apos;86.40&apos;, &apos;CSCO&apos;:&apos;122.64&apos;, &apos;CVX&apos;:&apos;23.78&apos;&#125;</span><br><span class="line">&gt;&gt;&gt;cSer = pd.Series (bSer)</span><br><span class="line">&gt;&gt;&gt;aSer + cSer  #注意，只要其中一个 Series 不存在对应的 index，对应的结果就会为 NaN。</span><br><span class="line">AAPL             NaN</span><br><span class="line">AXP       86.4086.40</span><br><span class="line">BA               NaN</span><br><span class="line">CSCO    122.64122.64</span><br><span class="line">CVX              NaN</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure></p>
<h1 id="series-的-name-属性">4. Series 的 name 属性</h1>
<p>  Series 可以为索引和其本身指定一个 name 属性，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;from pandas import Series</span><br><span class="line">&gt;&gt;&gt;data = &#123;&apos;AXP&apos;:&apos;86.40&apos;, &apos;CSCO&apos;:&apos;122.64&apos;, &apos;BA&apos;:&apos;99.44&apos;&#125;</span><br><span class="line">&gt;&gt;&gt;sindex=[&apos;AXP&apos;, &apos;CSCO&apos;, &apos;BA&apos;, &apos;AAPL&apos;]</span><br><span class="line">&gt;&gt;&gt;aSer = pd.Series (data, index=sindex)</span><br><span class="line">&gt;&gt;&gt;aSer.name = &apos;cnames&apos; #指定对象的 name 属性 </span><br><span class="line">&gt;&gt;&gt; aSer.index.name = &apos;valume&apos; #指定索引本身的 name 属性 </span><br><span class="line">&gt;&gt;&gt; aSer</span><br><span class="line">valume</span><br><span class="line">AXP      86.40</span><br><span class="line">CSCO    122.64</span><br><span class="line">BA       99.44</span><br><span class="line">AAPL       NaN</span><br><span class="line">Name: cnames, dtype: object</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>stata 学习资料</title>
    <url>/2019/06/23/stata%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<a id="more"></a>
<p><a href="https://www.jianshu.com/p/567947f53955" title="Stata 中 Do-file 编辑器的使用" target="_blank" rel="noopener">Stata 中 Do-file 编辑器的使用</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>stata 数据</title>
    <url>/2019/06/22/stata%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<a id="more"></a>
<p><a href="https://www.jianshu.com/p/572a777f9659" title="FRED (Federal Reserve Economic Data) 数据库" target="_blank" rel="noopener">FRED (Federal Reserve Economic Data) 数据库</a></p>
<p><a href="https://www.jianshu.com/p/5e97a7c166af" title="徐现祥教授团队 IRE 公开数据：官员交流、方言指数等" target="_blank" rel="noopener">徐现祥教授团队 IRE 公开数据：官员交流、方言指数等</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>stata数据</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>stata</tag>
        <tag>整理</tag>
      </tags>
  </entry>
  <entry>
    <title>第十九讲 Indirect 函数</title>
    <url>/2019/06/22/Indirect%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="indirect-的单元格引用">1. Indirect 的单元格引用</h1>
<p>  Indirect 函数的作用是返回由文本字符串指定的引用，可以应用于需要更改公式中对单元格的引用，而不更改公式本身的情形。 <a id="more"></a></p>
<p>  Indirect 函数的基本形式是：=indirect ()。</p>
<h2 id="indirect-函数-vs-index-函数">1.1 indirect 函数 vs index 函数</h2>
<p>  index 函数是返回表格或区域中的值或值的引用，而 indirect 函数的作用是返回由文本字符串指定的引用.</p>
<h2 id="跨表引用">1.2 跨表引用</h2>
<p>   跨表引用的格式是：表名！位置，如 = indirect ('1 月 '!G2)。</p>
<h2 id="跨表引用时的单引号问题">1.3 跨表引用时的单引号问题</h2>
<p>   如果表名出现空格，不加单引号会出现公式错误，必须加单引号，如: =INDIRECT (&quot;'&quot;&amp;A4&amp;&quot;'!g2&quot;)。</p>
<h1 id="indirect-的区域引用">2. Indirect 的区域引用</h1>
<p>   区域引用首先需要定义数据区域的名称。通过公式 - 定义名称，可以为数据区域定义名称。</p>
<p>   通过定义数据区域，可以方便地制作二级下拉列表，即通过 indirect 函数为序列添加数据区域。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>ndarray</title>
    <url>/2019/06/21/ndarray/</url>
    <content><![CDATA[<h1 id="什么是数组">1. 什么是数组</h1>
<p>   数组数据结构（英语：array data structure），简称数组（英语：Array），是由相同类型的元素（element）的集合所组成的数据结构。 <a id="more"></a></p>
<p>   最简单的数据结构类型是一维数组，如 list = [1, 2, 3, 4]；二维数组则对应着数学上的矩阵概念，如 <span class="math display">\[
a = 
\left [ \begin {matrix}
        3&amp; 6&amp; 2  \\\\
        0&amp; 1&amp; -4 \\\\
        2&amp; -1&amp; 0 \\\\
\end {matrix} \right]
\]</span></p>
<p>   在 Python 中，上述矩阵可以表示为：a = np.array ([[3, 6, 2], [6, 1, -4], [2, -1, 0]])</p>
<h1 id="多维数组的创建">2. 多维数组的创建</h1>
<p>   在 Python 中，多维数组的创建一般需要借助 numpy 的 array 模块。实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from numpy import *</span><br><span class="line">aAarray = array ([1, 2, 3])</span><br></pre></td></tr></table></figure></p>
<p>  numpy 内部提供了许多创建多维数组的函数，如：array,arrange,ones,zeros 等。<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<h1 id="ndarray-的基本运算符">3. ndarray 的基本运算符</h1>
<p>  ndarray 的基本运算符包括 add ()，subtract ()，multiply () 和 divide ()，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from numpy import *</span><br><span class="line">&gt;&gt;&gt; aArray = array ([(5, 5, 5), (5, 5, 5)])</span><br><span class="line">&gt;&gt;&gt; bArray = array ([(2, 2, 2), (2, 2, 2)])</span><br><span class="line">&gt;&gt;&gt; cArray = multiply (aArray, bArray)</span><br><span class="line">&gt;&gt;&gt; cArray</span><br><span class="line">array ([[10, 10, 10],</span><br><span class="line">       [10, 10, 10]])</span><br><span class="line">&gt;&gt;&gt; cArray = add (aArray, bArray)</span><br><span class="line">&gt;&gt;&gt; aArray</span><br><span class="line">array ([[7, 7, 7],</span><br><span class="line">       [7, 7, 7]])</span><br><span class="line">&gt;&gt;&gt; aArray &gt; 5 #每个元素是否大于 5</span><br><span class="line">array ([[ True,  True,  True],</span><br><span class="line">       [ True,  True,  True]], dtype=bool)</span><br></pre></td></tr></table></figure></p>
<h1 id="ndarray-的内建函数">4. ndarray 的内建函数</h1>
<p>  ndarray 有很多内建函数，如 fromfunction。fromfunction 的作用是从函数中创建数组，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from numpy import *</span><br><span class="line">def fun (x, y):</span><br><span class="line">    return (x + 1)*(y + 1)</span><br><span class="line">arr = fromfunction (fun, (9, 9))</span><br><span class="line">print (arr)</span><br></pre></td></tr></table></figure></p>
<p>   除了一般的内建函数，ndarray 还有一种能对数组的每个元素进行操作的函数，称为 ufunc 函数。<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a></p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://www.zmonster.me/2016/02/25/creation-and-io-of-ndarray.html" title="多维数组的创建" target="_blank" rel="noopener">多维数组的创建</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p><a href="https://zhuanlan.zhihu.com/p/33468084" title="Python-NumPy 模块的通用函数" target="_blank" rel="noopener">Python-NumPy 模块的通用函数</a><a href="#fnref2" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>多维数组</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展库 SciPy</title>
    <url>/2019/06/21/%E6%89%A9%E5%B1%95%E5%BA%93SciPy/</url>
    <content><![CDATA[<p><a href="https://wizardforcel.gitbooks.io/scipy-lecture-notes/content/4.html" title="Scipy Lecture Notes 中文版" target="_blank" rel="noopener">Scipy Lecture Notes 中文版</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>第三方库</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2019/06/14/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="什么是集合">1. 什么是集合</h1>
<p>   集合是一个无序不重复的元素的组合，包括可变集合（set）和不可变集合（frozenset）。 <a id="more"></a></p>
<h1 id="集合的比较">2. 集合的比较</h1>
<figure>
<img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190621230637.png" title="集合关系运算 1" alt="&quot;集合关系运算 1&quot;"><figcaption>&quot;集合关系运算 1&quot;</figcaption>
</figure>
<figure>
<img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190621230854.png" title="集合关系运算 2" alt="&quot;集合关系运算 2&quot;"><figcaption>&quot;集合关系运算 2&quot;</figcaption>
</figure>
<h1 id="集合的内建函数">3. 集合的内建函数</h1>
<figure>
<img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190621231014.png" title="面向所有集合" alt="&quot;面向所有集合&quot;"><figcaption>&quot;面向所有集合&quot;</figcaption>
</figure>
<figure>
<img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190621231121.png" title="面向可变集合" alt="&quot;面向可变集合&quot;"><figcaption>&quot;面向可变集合&quot;</figcaption>
</figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>第十八讲 LOOKUP 函数与数组</title>
    <url>/2019/06/14/LOOKUP%E5%87%BD%E6%95%B0%E4%B8%8E%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>   数组就是一组数，既可以是一行的，也可以是一列的。 <a id="more"></a></p>
<h1 id="认识和应用数组">1. 认识和应用数组</h1>
<p>   多条件求和既可以使用 SUMIFS (), 也可以通过数组公式利用 SUM () 函数完成，如 = SUM (($A<span class="math inline">\(2:\)</span>A<span class="math inline">\(22=K15)\*(\)</span>B<span class="math inline">\(2:\)</span>B<span class="math inline">\(22=L15)\*\)</span>E<span class="math inline">\(2:\)</span>E$22), 但是数组公式不能直接使用，必须在完成数组公式的书写后按着 ctrl+shift, 然后按 enter 键。</p>
<h1 id="lookup-函数">2. LOOKUP 函数</h1>
<p>  LOOKUP 函数的基本形式是：=lookup (查找值，查找行，结果行)，同 VLOOKUP 函数相比没有精确查找的选项。但是，LOOKUP 函数可以变相地实行精确查找，基本形似为：=LOOKUP (1,0 / 条件，结果列)，但是值得注意的是，不能选择一整列，只能用绝对引用选择一个区域。</p>
<p>  LOOKUP 函数的精确查找的原理是：满足条件会呈现 TRUE=1，否则会呈现 FALSE=0，0/0 会出错，LOOKUP 会跳过出错的地方，因此就实现了精确查找。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>字典</title>
    <url>/2019/06/14/%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<h1 id="为什么需要字典">1. 为什么需要字典？</h1>
<a id="more"></a>
<h2 id="为什么要使用字典">1.1 为什么要使用字典？</h2>
<p>   一个简单的例子： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;dict = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: &apos;3&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; dict [&apos;b&apos;]</span><br><span class="line">&apos;2&apos;</span><br></pre></td></tr></table></figure></p>
<h2 id="什么是字典">1.2 什么是字典？</h2>
<p>   字典是一种映射类型，使用键 - 值（key-value）存储，其中值（value）可以取任何数据类型，但键（key）必须是不可变的，如字符串，数字或元组。</p>
<h2 id="怎样创建字典">1.3 怎样创建字典？</h2>
<p>   创建字典的方法有两种：一是，直接创建；二是，利用 dict 函数创建。实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;alnfo = &#123;&apos;Wangdachui&apos;:3000, &apos;Niuyun&apos;:2000, &apos;Linling&apos;:4500, &apos;Tianqi&apos;:8000&#125;</span><br><span class="line">&gt;&gt;&gt;info =[(&apos;Wangdachui&apos;:3000), (&apos;Niuyun&apos;:2000), (&apos;Linling&apos;:4500), (&apos;Tianqi&apos;:8000)]</span><br><span class="line">&gt;&gt;&gt;blnfo = dict (info)</span><br><span class="line">&gt;&gt;&gt;clnfo = dict ([[&apos;Wangdachui&apos;:3000], [&apos;Niuyun&apos;:2000], [&apos;Linling&apos;:4500], [&apos;Tianqi&apos;:8000]])</span><br><span class="line">&gt;&gt;&gt;dlnfo = dict (&apos;Wangdachui&apos;:3000, &apos;Niuyun&apos;:2000, &apos;Linling&apos;:4500, &apos;Tianqi&apos;:8000)</span><br><span class="line">&gt;&gt;&gt;d1 = dict (((&apos;Wangdachui&apos;:3000), (&apos;Niuyun&apos;:2000), (&apos;Linling&apos;:4500), (&apos;Tianqi&apos;:8000)))</span><br></pre></td></tr></table></figure></p>
<p>   创建一个新字典，值一样，键不同，如创建员工信息表时将所有员工的工资默认值设置为 3000，可以使用 dict.fromkeys (seq, val)，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;aDict = dict.fromkeys ((&apos;Wangdachui&apos;, &apos;Niuyun&apos;, &apos;Linling&apos;, &apos;Tianqi&apos;), 3000)</span><br></pre></td></tr></table></figure></p>
<h1 id="字典的使用">2. 字典的使用</h1>
<h2 id="字典的基本操作">2.1 字典的基本操作</h2>
<p>   键值查找：alnfo['Niuyun']; 键值更新：alnfo['Niuyun'] = 9999; 键值添加：alnfo['Fuyun'] = 100； 成员判断：'Mayun' in alnfo; 删除字典：del alnfo。</p>
<h2 id="字典的格式化字符串">2.2 字典的格式化字符串</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;alnfo = &#123;&apos;Wangdachui&apos;:3000, &apos;Niuyun&apos;:2000, &apos;Linling&apos;:4500, &apos;Tianqi&apos;:8000&#125;</span><br><span class="line">&gt;&gt;&gt;for key in alnfo.keys ():</span><br><span class="line">       print (&apos;name = % s, salary = % s&apos;%(key, alnfo [key]))</span><br><span class="line">&gt;&gt;&gt;&quot;Niuyun&apos;s salary is %(Niuyun) s.&quot;% alnfo</span><br><span class="line">Niuyun&apos;s salary is 5000.</span><br></pre></td></tr></table></figure>
<p>   输出模板的使用： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;alnfo = &#123;&apos;Wangdachui&apos;:3000, &apos;Niuyun&apos;:2000, &apos;Linling&apos;:4500, &apos;Tianqi&apos;:8000&#125;</span><br><span class="line">&gt;&gt;&gt;template = &apos;&apos;&apos;</span><br><span class="line">   Welcome to the pay wall.</span><br><span class="line">   Niuyun&apos;s salary is %(Niuyun) s.</span><br><span class="line">   Wangdachui&apos;s salary is %(Wangdachui) s.</span><br><span class="line">   &apos;&apos;&apos;</span><br><span class="line">&gt;&gt;&gt;print (template % alnfo)</span><br></pre></td></tr></table></figure></p>
<h2 id="字典的常用内建函数">2.3 字典的常用内建函数</h2>
<p>   以列表返回一个字典所有的键：dict.keys ()；以列表返回字典中的所有值： dict.values ()。</p>
<p>   通过键查找值： dict.get (key, default=None)，其种 default 的值默认为 None, 可省略。</p>
<p>   两个字典合并，可以使用 dict.update (dict2)，把字典 dict2 的键 / 值对更新到 dict 里。</p>
<p>   删除字典内所有元素：dict.clear ()。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>stata 基本操作</title>
    <url>/2019/06/13/stata%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/273ab0a9f3bb" title="Stata 小白系列之一：调入数据" target="_blank" rel="noopener">Stata 小白系列之一：调入数据</a></p>
<a id="more"></a>
<p>   一个问题： <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="string">"C:\data\usaauto.dta"</span> <span class="keyword">in</span> 5\10   # 错误的示范 </span><br><span class="line"><span class="keyword">use</span> <span class="string">"C:\data\usaauto.dta"</span> <span class="keyword">in</span> 5/10   # 正确的示范 </span><br></pre></td></tr></table></figure></p>
<p>stata 导出数据为 excel 格式：export excel using &quot;文件路径和文件名&quot;, firstrow (var)</p>
<p><a href="https://www.jianshu.com/p/8d193ffdde05" title="Stata 小白系列之二：数据拆分与合并" target="_blank" rel="noopener">Stata 小白系列之二：数据拆分与合并</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>stata</category>
      </categories>
      <tags>
        <tag>基本操作</tag>
        <tag>stata</tag>
        <tag>连享会</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 年 5 月金融数据点评</title>
    <url>/2019/06/13/2019%E5%B9%B45%E6%9C%88%E9%87%91%E8%9E%8D%E6%95%B0%E6%8D%AE%E7%82%B9%E8%AF%84/</url>
    <content><![CDATA[<h1 id="事件">1. 事件</h1>
<p>  2019 年 6 月 12 日，央行公布 5 月的货币金融数据，其中社融新增 1.4 万亿元，同比多增 4466 亿元；人民币贷款新增 1.18 万亿元，同比多增 313 亿元。 <a id="more"></a></p>
<h1 id="点评">2. 点评</h1>
<p>   海通证券 - 姜超宏观债券研究认为社融同比多增的主要贡献来自非标融资少减了近 2800 亿元，兴业证券 - 王涵论宏观认为社融同比多增的主要贡献来自于人民币贷款即信贷的反弹。</p>
<p>   从社融结构来看，包括信贷、非标和直接融资。信贷包括人民币贷款和外币贷款，5 月人民币贷款新增 1.18 万亿元，同比多增 313 亿元，比 4 月相比新增贷款多增了 1600 亿元。<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<p>  5 月委托贷款减少 631 亿元，同比少减 939 亿元；信托贷款减少 52 亿元，同比少减 884 亿元；未贴现的银行承兑汇票减少 770 亿元，同比少减 971 亿元。去年同期委托贷款减少 1570 亿元，同比多减 1292 亿元；信托贷款减少 904 亿元，同比多减 2716 亿元；未贴现的银行承兑汇票减少 1741 亿元，同比多减 496 亿元。因此，社融同比多增的主要贡献来自非标融资少减了近 2800 亿元。</p>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190613100222.png"></p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p>4 月份人民币贷款增加 1.02 万亿元，5 月份人民币贷款新增 1.18 万元，1.18-1.02=0.16 (万亿元)=1600 (亿元)。<a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>研报阅读-宏观</category>
      </categories>
      <tags>
        <tag>金融数据</tag>
        <tag>宏观研报</tag>
        <tag>阅读&amp;脱水</tag>
      </tags>
  </entry>
  <entry>
    <title>第十七讲 数学函数与引用</title>
    <url>/2019/06/12/%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0%E4%B8%8E%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="round-函数---四舍五入">1. ROUND 函数 - 四舍五入</h1>
<p>  ROUND 函数的基本格式为：=round (数值，取几位小数)。</p>
<a id="more"></a>
<h1 id="roundup-函数-rounddown-函数">2. ROUNDUP 函数 &amp; ROUNDDOWN 函数</h1>
<p>  ROUNDDOWN 函数的基本格式为：=rounddown (数值，取几位小数)，作用是舍一位，如 roundup (1.24,1)=1.3；ROUNDUP 函数的基本格式为：=roundup (数值，取几位小数), 作用是入一位，如 rounddown (1.25,1)=1.2。</p>
<h1 id="int-函数---取整">3. INT 函数 - 取整</h1>
<p>  INT 函数的作用是进一位，同 ROUNDUP 函数类似，但二者之间的不同体现在对负数的取值中，如 int (-1.4)=-2 ，rounddown (-1.4,0)=-1。</p>
<h1 id="mod-函数---求余">4. MOD 函数 - 求余</h1>
<p>  MOD 函数的基本格式为：MOD (),MOD 函数的一个简单应用是取 0.5，MOD (INT (*2), 2)。</p>
<h1 id="row-行column-列">4. ROW (行)&amp;COLUMN (列)</h1>
<p>   使用 ROW 和 COULUM 函数重要的是要思考如何形成一个完整的数列，和 INDEX 函数结合使用。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>第 6 章 会计与估值</title>
    <url>/2019/06/12/%E4%BC%9A%E8%AE%A1%E4%B8%8E%E4%BC%B0%E5%80%BC/</url>
    <content><![CDATA[<h1 id="一个案例美国钢铁公司">1. 一个案例：美国钢铁公司</h1>
<a id="more"></a>
<p>   美国钢铁公司的 6 项会计操作如下：</p>
<p>  （1）将厂房设备账户减值至负 10 亿美元，不影响当期收益，只会使资本和所有者权益同时减少相同的金额。</p>
<p>  （2）普通股面值减至 0.01 美元，只是会计上的重分类。在所有者权益中，资本金账户与盈余账户此消彼长。</p>
<p>  （3）用认股权证支付所有的薪酬，通过这种操作，把原本应该计入属于当期损益的管理费用和产品成本中的人员工资消化在了资本公积，体现为新资本账户的增加，老资本账户的减少，从而美化和虚增了当期收益，并通过当期收益滚存而虚增了盈余账户。</p>
<p>  （4）把存货转记成 1 美元，同（1）。</p>
<p>  （5）用可以按 50% 折扣赎回的无息债券置换优先股</p>
<p>  （6）设立 10 亿美元的或有准备金，通过从历史盈余中提前、一次性提取准备金，来消化本来应当计入当期损益的各种资产减值损失。</p>
<h1 id="透明盈利">2. 透明盈利</h1>
<p>   巴菲特提出了透明盈利的概念，计算方法为：留存的收益 *（1 - 分派税率）+ 报告的营业利润。巴菲特认为，投资者专注于透视盈利指标可以迫使投资者考虑企业的长期前景，而不是股票市场的短期前景，这是一种很可能提高收益的眼力。</p>
<h1 id="经济商誉">3. 经济商誉</h1>
<p>   基于某一的有形资产净值产生的超额回报的资本化价值，就是经济商誉。有经济商誉的企业，为了维持竞争地位和实际收益（即名义收益扣除通胀后的收益）只需要少量的再投资。</p>
<h1 id="所有者收益">4. 所有者收益</h1>
<p>   所有者收益 =（a) 报告收益 +（b）折旧费用、摊销费用、减值准备、某些其他非现金费用 -(c) 企业为维护其长期竞争地位和单位产量而用于产房、设备的年平均资本化开支以及超额流动资金</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>巴菲特致股东的信：股份公司教程</category>
      </categories>
      <tags>
        <tag>巴菲特</tag>
        <tag>致股东的信</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第 5 章 兼并与收购</title>
    <url>/2019/06/12/%E5%85%BC%E5%B9%B6%E4%B8%8E%E6%94%B6%E8%B4%AD/</url>
    <content><![CDATA[<blockquote>
<p>   对查理和我来说，伯克希尔最令人振奋的活动就是收购一家有杰出经济特性，而且由我们喜欢、信任并且敬佩的人来管理的企业。 <a id="more"></a></p>
</blockquote>
<h1 id="动机">1. 动机</h1>
<p>   巴菲特认为，大部分高溢价兼并的公司接管中，存在三种错误的动机：(1) 企业或其他组织的领导极少缺乏生气，而且常常爱好改进活动与挑战。（2）大多数组织以规模而非其他标准酬报经理。（3）过于乐观，认为自己的管理能增进公司的盈利。</p>
<p>   两类公司值得收购：（1）特别能适应通货膨胀的企业。企业适应通胀的能力体现在两个方面：能够轻易涨价而不丧失市场份额或者单位产量以及微小的额外资本投入可以使业务中容纳巨额资金增长；（2）自己本身特别会管理。</p>
<h1 id="资金">2. 资金</h1>
<p>   收购时，既可以使用现金或债务，也可以使用自己的股票。巴菲特提倡使用现金来进行收购，因为使用自己的股票进行收购容易出现出价过高的情形。<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<h1 id="收购标的">3. 收购标的</h1>
<p>   巴菲特列示了他选择收购标的的标准：(1) 大公司 (至少有 5 千万美元的税后利润) ;(2) 证明有持续的赢利能力 (预测未来我们不感兴趣，“ 扭转” 局面我们也不感兴趣) ;(3) 在少量举债或不举债时，公司的净资产收益状况良好；(4) 管理得当 (我们不可能提供管理);(5) 业务简单 (如果技术太复杂，我们会弄不明白) ;(6) 明确的售价 (我们不想浪费我们的或是卖方的时间，在价格不明朗的时候商讨，甚至是初步商讨交易)。</p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://www.zhongba01.com/kip/essays/e2761gpu.html" title="其中的根本原因在于 —— 价格逻辑与价值逻辑的混淆。当你以自身股份支付并取得被收购企业的股权时，本质上你付出的是你自己股权的价值，得到的是被收购企业的股权价值。如果你认为你付出的是你自己的股权价格，得到的是被收购企业股权的价格，那就大错特错了。不幸的是，常见的股份支付都陷入到错误的 “价格” 逻辑当中：换股比例通常都是基于两边的每股价格，而不是每股价值，似乎大家都认可市场先生的有效性，把价格默认为价值。当自家企业的股价被严重低估，而被收购企业的股权被严重高估 —— 也就是低价增发 + 高价收购时，这种股份支付带来的出价过高问题和价值毁灭会被最大化 —— 权益端由于低价增发每股内在价值被减损和摊薄，同时资产端由于高价收购而再次减损每股内在价值；可谓是错上加错，这也是股份支付收购业务中最惨烈的情况。可现实中这样的惨烈业务比比皆是，对于收购企业的原股东而言无异于一场灾难。" target="_blank" rel="noopener">其中的根本原因在于 —— 价格逻辑与价值逻辑的混淆。当你以自身股份支付并取得被收购企业的股权时，本质上你付出的是你自己股权的价值，得到的是被收购企业的股权价值。如果你认为你付出的是你自己的股权价格，得到的是被收购企业股权的价格，那就大错特错了。不幸的是，常见的股份支付都陷入到错误的 “价格” 逻辑当中：换股比例通常都是基于两边的每股价格，而不是每股价值，似乎大家都认可市场先生的有效性，把价格默认为价值。当自家企业的股价被严重低估，而被收购企业的股权被严重高估 —— 也就是低价增发 + 高价收购时，这种股份支付带来的出价过高问题和价值毁灭会被最大化 —— 权益端由于低价增发每股内在价值被减损和摊薄，同时资产端由于高价收购而再次减损每股内在价值；可谓是错上加错，这也是股份支付收购业务中最惨烈的情况。可现实中这样的惨烈业务比比皆是，对于收购企业的原股东而言无异于一场灾难。</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>巴菲特致股东的信：股份公司教程</category>
      </categories>
      <tags>
        <tag>巴菲特</tag>
        <tag>致股东的信</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第 4 章 普通股</title>
    <url>/2019/06/12/%E6%99%AE%E9%80%9A%E8%82%A1/</url>
    <content><![CDATA[<p>   巴菲特指出，由于频繁地交易以及承担的投资管理成本，股东总体的长期表现必定逊于他们拥有的公司，因此股票绝对不可能表现得比企业更好。</p>
<a id="more"></a>
<h1 id="交易成本">1. 交易成本</h1>
<p>   巴菲特认为，交易成本对活跃的股票来说非常高，常常达到一家公开募股公司盈利的 10% 或更多。在长期内，所有者的税前回报总额将等于公司实现的业务收益减去市场征收的交易成本 —— 也就是，经纪人收取的佣金加上做市商已实现的净价差。</p>
<p>   因此，为了减少股东的交易成本，巴菲特选择让伯克希尔上市，但不希望交易活动过多，长期投资者是其吸引的主要目标。</p>
<h1 id="分红政策与股票回购">2. 分红政策与股票回购</h1>
<p>   巴菲特认为，企业的报告收益（即会计净利润）分为限定用途的收益和非限定用途的收益。对于限定用途的收益，巴菲特认为通货膨胀使部分或全部报告收益成了代用品，为了维持销量、长期竞争力和财务实力必须进行再投资的那部分利润，这些代用品或部分利润必须限定用途，因此成为了限定用途的收益；对于非限定用途的收益，可以留存，也可以派发。对于是否留存非限定用途的收益，巴菲特提出了两个判断的原则：一是，基于历史证据的大力支持或者基于对未来的适当且周密的分析，对于股份公司留存的每一美元，都至少可以为所有者创造一美元的市场价值；二是，资本回报率，即每一项业务的再投资是否都能够创造超额的资本回报，如果可以，则留存。如果不可以，则保留高资本回报率业务的再投资，并停止低资本回报率业务的再投资，并尽快整顿、清算或退出低资本回报率的业务。<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<p>   当股票的价格与价值存在巨大差异时，股票回购具有两个好处：一是，股票回购增加了股票的内在价值；二是，股票回购使股东以及潜在的股东上修了对企业未来回报的估计，使股票的市场价格符合其内在价值。</p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://www.zhongba01.com/kip/essays/e2711max.html" title="巴菲特致股东的信 读书笔记 14—《普通股》章节摘要 1" target="_blank" rel="noopener">巴菲特致股东的信 读书笔记 14—《普通股》章节摘要 1</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>巴菲特致股东的信：股份公司教程</category>
      </categories>
      <tags>
        <tag>巴菲特</tag>
        <tag>致股东的信</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第 3 章 普通股的替代品</title>
    <url>/2019/06/11/%E6%99%AE%E9%80%9A%E8%82%A1%E7%9A%84%E6%9B%BF%E4%BB%A3%E5%93%81/</url>
    <content><![CDATA[<p>   在这一章中，编者回顾了巴菲特所提出的除普通股以外其他投资的方式，包括垃圾债券、零息债券、优先股等。 <a id="more"></a></p>
<h1 id="公司债垃圾债券和零息债券">1. 公司债：垃圾债券和零息债券</h1>
<p>   公司债券相对于股票而言，获利较小，但资本优先级高，收益保障程度也相对较高。巴菲特认为垃圾债券所代表的企业价值很可能是零甚至是负数，因此以任何大于零的价格购买垃圾债券本质上都是投机，且只能以更高价转让给其他接盘者作为唯一的投机盈利模式。巴菲特进一步同格雷厄姆一道强烈反对匕首理论，强调了安全的空间。</p>
<p>   零息债券则不然，在一定的形式和条件下，零息债券是一种有用的和良性的形式，如把半年的息票从标准的政府债券中 “拆离”，创造出具有储蓄债券性质的零息债券。</p>
<h1 id="优先股">2. 优先股</h1>
<p>   优先股同普通股一样，巴菲特说道：伯克希尔能够从有限股权中获得令人满意成果的唯一途径，是让这些被投资公司的普通股表现良好。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>巴菲特致股东的信：股份公司教程</category>
      </categories>
      <tags>
        <tag>巴菲特</tag>
        <tag>致股东的信</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第 2 章 公司财务与投资</title>
    <url>/2019/06/11/%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E4%B8%8E%E6%8A%95%E8%B5%84/</url>
    <content><![CDATA[<p>   巴菲特认为目前市场上存在着忽视企业价值的倾向，因为股票市场很有效率，计算企业价值在投资活动中无足轻重。但是，巴菲特始终认为：成功投资的关键是在一家好企业的市场价格比固有的企业价值大打折扣时买入其股份。</p>
<a id="more"></a>
<h1 id="市场先生的寓言">1. 市场先生的寓言</h1>
<blockquote>
<p>   市场可能会在一段时间内忽视企业的成功，但最终会加以肯定。就像本说的那样；“在短期内，市场是一台投票机，但在长期内，它是一台称重机。”</p>
</blockquote>
<h1 id="套利">2. 套利</h1>
<p>   巴菲特认为评估套利条件应该从以下四个方面考虑：(1) 承诺的事情真正发生的可能性有多大？(2) 你的钱会捆住多久？(3) 出现更好的事情的可能性有多大 - 比如一一个更有竞争力的接管出价？(4) 如果由于反托拉斯诉讼，财务上的假象等等原因，事情没有发生会怎么样？</p>
<h1 id="投资的风险">3. 投资的风险</h1>
<p>   投资者必须确定的真正风险可以从以下几个因素进行估算：(1) 可以评估的企业长期经济特性的可信度；(2) 可以评估的管理人员的可信度，包括他们实现企业所有潜能的能力以及明智地使用现金流的能力；(3) 以股东回报而不是管理者的回报做为衡量标准的可信度；(4) 企业的售价；(5) 将要经历的以及将会决定投资者的购买力回报的削减程度的税收水平和通货膨胀率。因此，投资者面临的风险不是股权价格的波动幅度（β），而是来源于公司的经营情况本身。</p>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190611215541.png" title="投资的选择" alt="投资的选择"><a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://www.zhongba01.com/kip/essays/e2596ouj.html" title="巴菲特致股东的信 读书笔记 10— 公司财务与投资章节摘要及注解 4" target="_blank" rel="noopener">巴菲特致股东的信 读书笔记 10— 公司财务与投资章节摘要及注解 4</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>巴菲特致股东的信：股份公司教程</category>
      </categories>
      <tags>
        <tag>巴菲特</tag>
        <tag>致股东的信</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>第 1 章 公司治理</title>
    <url>/2019/06/11/%E5%85%AC%E5%8F%B8%E6%B2%BB%E7%90%86/</url>
    <content><![CDATA[<p>   公司治理的核心是股东、董事和经理的利益关系如何管理，以及各方内部的利益关系的管理。</p>
<a id="more"></a>
<h1 id="公司治理的基本结构">1. 公司治理的基本结构</h1>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190611192627.png" title="公司治理的基本结构" alt="公司治理的基本结构"><a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<h1 id="股东内部的利益冲突">2. 股东内部的利益冲突</h1>
<p>   对于股东而言，获取收益主要依靠两种手段：一是，经营公司获取利润，通过公司价值的增加来获得股东收益；二是，依靠股份市场进行低买高卖，赚取差价，即从公司的其他股东或市场上参与股份交易的人身上赚钱。<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a></p>
<p>   对于股东利用第二种手段获取收益，主要可以采取以下三种方式：（1）溢价转让自己的股权，即以超出股权内在价值的价格转让股权给其他股东；（2）溢价发行新股，即以超出股权内在价值的价格增发新股，是新股东的财富 “转让” 给老股东；（3）大股东通过欺压小股东，侵犯小股东在上市公司中享有的对应资产权利，如大股东将上市公司的利益通过关联交易 —— 如不合理定价、高买低卖等方式 —— 将本公司的利益转移到与大股东的其他关联公司中。</p>
<p>   因此，股东内部的治理机制尤为重要，必须建立小股东的权益保护机制。</p>
<h1 id="股东和经理ceo之间的冲突">2. 股东和经理（CEO）之间的冲突</h1>
<p>   股东和经理（CEO）之间存在一定的冲突，因为二者的目标不同，股东想要获得股票增值，即公司的成长，经理（CEO）想要获得的只是各种形式的收入，因此经理（CEO）优势会有 “损公肥私” 的行为。</p>
<p>   对于股东而言，如何衡量 CEO 的业绩是一个难题，因为：第一，衡量 CEO 工作业绩的标准几乎不存在；第二，CEO 没有直接的、衡量其业绩的上司。因此，股东只能通过衡量公司来衡量 CEO 的业绩，巴菲特认为 EBITDA (未计利息、税项、折旧及摊销前收益）是附佛那个应该重点关注的对象。</p>
<p>   进一步，巴菲特总结了 13 条与所有者相关的企业原则：</p>
<blockquote>
<p>  1. 尽管我们的形式是法人组织，但我们的经营观念却是合伙制。</p>
</blockquote>
<p>  2. 与伯克希尔面向所有者的方针相一致，我们大多数董事的大部分净资产都投到了这家公司。我们吃自己烧的饭。</p>
<p>  3. 我们的长期经济目标是使伯克希尔公司每股的企业内在价值的平均年增长率最大化。</p>
<p>  4. 我们的首选是通过直接拥有一些可以产生现金而且持续获得高于平均水平的资本回报的多元化企业来达到我们的目的。我们的第二个选择是拥有相似企业的部分股权，这些股权主要通过我们的保险子公司买入可流通的普通股来实现。</p>
<p>  5. 因为我们对企业所有权采用两分法，又因为传统会计的局限性，所以报表中的合并利润相对来说几乎没有揭示我们的真实经济成果。</p>
<p>  6. 会计结论并不能左右我们的营运决策或资产配置决策。.</p>
<p>  7. 我们极少举债，当我们的确需要借钱时，我们尽量使贷款构建在长期固定利率的基础上。</p>
<p>  8. 管理者的 “愿望表”( Wish List) 不能靠花股东的钱来满足。</p>
<p>  9. 我们认为崇高的目标应该定期用结果来检验。1 美元的留存收益是否至少给股东带来了 1 美元的市场价值，我们以此来检验留存收益是否明智。</p>
<p>  10. 只有在得到的企业价值与付出的相等时，我们才发行普通股。</p>
<p>  11. 你们必须明了查理和我共有的一种有损于我们理财业绩的态度：无论价钱如何，我们对出售伯克希尔拥有的任何优秀企业根本不感兴趣，我们也不愿意出售低于标准的企业，只要我们希望它们至少还能产生一些现金，只要我们对它们的经理和劳资关系的感觉尚可。</p>
<p>  12. 我们开诚布公地向你们汇报，强调在评价公司价值时的种种有利因素和不利因素。</p>
<p>  13. 尽管我们有开诚布公的政策，但是我们仅在法律要求的情况下谈论我们对可流通证券的投资活动。</p>
<h1 id="董事会和经理ceo之间的冲突">3. 董事会和经理（CEO）之间的冲突</h1>
<p>   一个公司的董事会有三种情况：一是，没有控股股东的公司的董事会。此时，董事的人数应该相对少一些；二是，控股股东就是经理（CEO）；三是，控股股东不参与经营。</p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://www.zhihu.com/search?q=%%20E5%85%%20AC%%20E5%8F%%20B8%%20E6%%20B2%%20BB%%20E7%90%86&amp;type=content" title="知乎：公司治理" target="_blank" rel="noopener">知乎：公司治理</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p><a href="https://www.zhongba01.com/kip/essays/e2486yjy.html" title="前者称为增量博弈，后者称为存量博弈。" target="_blank" rel="noopener">前者称为增量博弈，后者称为存量博弈。</a><a href="#fnref2" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>巴菲特致股东的信：股份公司教程</category>
      </categories>
      <tags>
        <tag>巴菲特</tag>
        <tag>致股东的信</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>元组</title>
    <url>/2019/06/11/%E5%85%83%E7%BB%84/</url>
    <content><![CDATA[<h1 id="元组的属性不可修改">1. 元组的属性：不可修改</h1>
<a id="more"></a>
<p>   由于元组不可修改，所以 sort 方法不适用于元组，sorted 函数也只是在表面上 “改变” 了元组内部元素的顺序，并没有真正地改变元组内部元素的顺序。</p>
<h1 id="元组的作用">2. 元组的作用</h1>
<p>   元组可以在映射类型中当作键使用，也可以成为函数的特殊类型参数，还可以作为很多内奸函数的返回值。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>列表</title>
    <url>/2019/06/11/%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="列表的定义">1. 列表的定义</h1>
<p>   列表是一种有序的集合，可以包含不同类型的对象，也可以进行扩展。 <a id="more"></a></p>
<h1 id="列表的形式">2. 列表的形式</h1>
<p>   列表内部可以包含不同类型的对象，如数值：alist = [1, 2, 3, 4, 5]; 字符串： alist = ['Zhao', 'Qian', 'Sun', 'Li']; 数值 + 字符串： alist = [3, 2, 1, 'Action']; 元组： [('AXP', 'American Express Company', '86.40'), ('BA', 'The Boeing Company', '122.64'), ('CAT', 'Caterpillar Inc.', '99.44'), ('CSCO', 'Cisco Systems, Inc.', '23.78'), ('CVX', 'Chevron Corporation', '115.91')]。</p>
<h1 id="列表包含的方法">3. 列表包含的方法</h1>
<h2 id="对原列表进行排序">3.1 对原列表进行排序</h2>
<p>   基本方法是：alist.sort (cmp=None, key=None, reverse=False), 实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; numList= [3, 11, 5, 8, 16, 1]</span><br><span class="line">&gt;&gt;&gt; fruit = [&apos;apple&apos;, &apos;banana&apos;, &apos;pear&apos;, &apos;lemon&apos;, &apos;avocado&apos;]</span><br><span class="line">&gt;&gt;&gt; numList.sort (reverse = True)</span><br><span class="line">&gt;&gt;&gt; numList</span><br><span class="line">[16, 11, 8, 5, 3, 1]</span><br><span class="line">&gt;&gt;&gt; fruitList.sort (key = len)</span><br><span class="line">&gt;&gt;&gt; fruitList</span><br><span class="line">[&apos;pear&apos;, &apos;apple&apos;, &apos;lemon&apos;, &apos;banana&apos;, &apos;avocado&apos;]</span><br></pre></td></tr></table></figure></p>
<h2 id="删除和添加元素">3.2 删除和添加元素</h2>
<p>   要删除列表中的元素，可以使用 pop () 方法； 要添加列表中的元素，可以使用 append () 方法或 insert () 方法。实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; classmates = [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;]</span><br><span class="line">&gt;&gt;&gt; classmates.append (&apos;Adam&apos;)                   # 在末尾添加新的元素 </span><br><span class="line">&gt;&gt;&gt; classmates</span><br><span class="line">[&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;, &apos;Adam&apos;]</span><br><span class="line">&gt;&gt;&gt; classmates.insert (1, &apos;Jack&apos;)                # 把元素插入到指定的位置 </span><br><span class="line">&gt;&gt;&gt; classmates</span><br><span class="line">[&apos;Michael&apos;, &apos;Jack&apos;, &apos;Bob&apos;, &apos;Tracy&apos;, &apos;Adam&apos;]</span><br><span class="line">&gt;&gt;&gt; classmates.pop ()                            # 删除末尾的元素 </span><br><span class="line">&apos;Adam&apos;</span><br><span class="line">&gt;&gt;&gt; classmates</span><br><span class="line">[&apos;Michael&apos;, &apos;Jack&apos;, &apos;Bob&apos;, &apos;Tracy&apos;]</span><br><span class="line">&gt;&gt;&gt; classmates.pop (1)                           # 删除制定位置的元素 </span><br><span class="line">&apos;Jack&apos;</span><br><span class="line">&gt;&gt;&gt; classmates</span><br><span class="line">[&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;]</span><br></pre></td></tr></table></figure></p>
<h2 id="应用评分方法---去掉最低分和最高分">3.3 应用：评分方法 - 去掉最低分和最高分</h2>
<p>   某学校组织了一场校园歌手比赛，每个歌手的得分由 10 名评委和观众决定，最终得分的规则是去掉 10 名评委所打分数的一个最高分和一个最低分，再加上所有观众评委分数后的平均值。评委打出的 10 个分数为：9、9、8.5、10、7、8、8、9、8 和 10, 观众评委打出的综合评分为 9 , 请计算该歌手的最终得分。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Filename: scoring.py</span><br><span class="line">jScores= [9, 9, 8.5, 10, 7, 8, 8, 9, 8, 10]</span><br><span class="line">aScore = 9</span><br><span class="line">jScores.sort ()</span><br><span class="line">jScores.pop ()</span><br><span class="line">jScores.pop (0)</span><br><span class="line">jScores.append (aScore)</span><br><span class="line">aveScore = sum (jScores)/len (jScores)</span><br><span class="line">print aveScore</span><br></pre></td></tr></table></figure>
<h1 id="列表解析">4. 列表解析</h1>
<p>   列表解析指列表中的元素可以使用语句进行创建，如 [x**2 for x in range (10) if x**2 &lt; 50], [(x+1, y+1) for x in range (2) for y in range (2)]</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>第十六讲 简单文本函数</title>
    <url>/2019/06/10/%E7%AE%80%E5%8D%95%E6%96%87%E6%9C%AC%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="使用文本函数截取字符串">1. 使用文本函数截取字符串</h1>
<a id="more"></a>
<h2 id="left-函数">1.1 LEFT 函数</h2>
<p>  LEFT 函数的基本格式是：=left (字符，取几位）。</p>
<h2 id="rught-函数">1.2 RUGHT 函数</h2>
<p>  RUGHT 函数的基本格式是：=right (字符，取几位）。</p>
<h2 id="mid-函数">1.3 MID 函数</h2>
<p>  MID 函数的基本格式是：=mid (字符，头，尾）。</p>
<p>   可以利用 RIGHT 函数和 LEFT 函数的结合替代 MID 函数，格式为：=right (left (,),)。</p>
<h1 id="获取文本中的信息">2. 获取文本中的信息</h1>
<p>   查找某个字符在字符串中的位置，可以使用 FIND 函数，基本格式 为：=find (要找的值，寻找区域，开始值）。</p>
<p>  LEN () 函数可以用来计算字符串的字符数，LENB () 函数则可以用来计算字符串的字节数。</p>
<p>  p.s: 一个中文字符等于两个字节。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>导言</title>
    <url>/2019/06/09/%E5%AF%BC%E8%A8%80/</url>
    <content><![CDATA[<p>  《巴菲特致股东的信》包含了巴菲特丰富的投资思想和原则，这本书的编者在导言中总结了本书中的关键内容。 <a id="more"></a></p>
<h1 id="公司治理">1. 公司治理</h1>
<p>   巴菲特认为：管理者（经理）与股东之间的冲突是公司治理的难题。因此，选择一个合适的管理者（经理）是公司治理的关键。巴菲特认为选择能干、诚实而勤勉的的人，远比设人事等级制度、明确汇报关系要重要得多。同时，要培养管理者（经理）的管家意识，在管理者与股东的交流中正直和坦诚最为重要。</p>
<p>   对于如何评估管理者（经理）的绩效，巴菲特认为：</p>
<blockquote>
<p>   举行没有 CEO 出席的例会来评审他的表现，将是公司治理中的一项重大改进。… … 短期成果和潜在的长期成果都必须加以评定。<br></p>
</blockquote>
<p>   三种常见的公司治理模式是：</p>
<p>  （1）控股股东就是经理，董事权力最为弱小。</p>
<p>  （2）控股股东不参与公司管理，董事的权力最为强大。</p>
<p>  （3）没有控股股东，董事必须提供必要的约束，否则公司管理会出现大问题。</p>
<p>   并且，应该强调董事会对 CEO 的监督，而非使用股票期权来酬报管理者（经理），决定主管人员薪酬的依据是其业绩，用公司的盈利能力来衡量，而不是公司股票的增长。</p>
<p>   巴菲特进一步指出：用股票期权来酬报管理者（经理）会存在严重不对称的利益协调机制。这种不对称主要体现为以下三点：</p>
<p>  （1）股票期权会剥夺股东的财富，因为仅凭留存收益并将其用来再投资，，管理人员就可以报告年度收益增长，而一点都不必提高资本的真正回报。</p>
<p>  （2）股票期权的持有者不会暴露在资本并非以最优方式投人所带来的股票下跌风险中，而股东会。</p>
<p>  （3）股票期权对管理者的益处与个人业绩无关，更多基于公司整体的业绩，并且已经授予，无法撤销。</p>
<h1 id="公司财务与投资">2. 公司财务与投资</h1>
<p>   巴菲特认为现代金融理论过于重视贝塔（beta）值和波动性，忽视了对从投资中受损或受伤的可能性，真正应该专注的是投资编结（investment knitthing)。对于许多人而言，可以通过长期投资于指数基金来实现。对于专家而言，</p>
<blockquote>
<p>   评估这种投资风险需要考虑公司的管理层、产品、竞争者和负债水平。这种调查是，一项投资的税后回报是否至少等于最初投资加上公允回报率的购买力。主要相关因素是企业的长期经济特性、管理层的质量与整体性、未来的税率或通货膨胀率水平。</p>
</blockquote>
<p>   因此，巴菲特的投资策略不是去分散风险，而是将投资组合集中化，认识到自己是企业的所有者，而不仅仅是投资者。</p>
<p>   巴菲特还总结了他从格雷厄姆哪里学到的聪明投资板凳的四条腿：市场先生寓言、安全空间理论、能力圈原理和习惯的需要。</p>
<h1 id="普通股的替代品">3. 普通股的替代品</h1>
<p>   巴菲特利用格雷厄姆的观念反驳了为垃圾债券辩护的 “匕首论点”，认为垃圾债券的高违约率远远无法弥补本金全部或部分损失的风险。<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a> 巴菲特进一步指出华尔街错误地忽视了以财务甘为基础的概念。</p>
<h1 id="普通股">4. 普通股</h1>
<p>   巴菲特认为企业的股票在市场中的交易价格应该与其内在价值相关联，这意味着在一个时期的企业成效将使那个时期拥有这家公司的人得益。要想实现上述关联，需要有这样一群股东，他们集体有长期的、面向企业的投资哲学，而不是短期的、面向市场的策略。</p>
<p>   巴菲特认为企业的分红和保留政策应当以一个检验为基础：每一块美元的收益应当留存，如果这种留存会增加至少相似数量的市场价值；否则它就该派发。</p>
<p>   当股票的市场价格过低时，回购股票可以提高公司的价值。</p>
<p>   拆股会带来三个恶性的结果：</p>
<blockquote>
<p>   它们通过促进股票周转率，增加了交易成本；它们吸引了持短期的、面向市场观点的股东，它们过度关注股票市场价格；以及作为这两种效应的结果，它们导致价格与企业内在价值的实质性分离。没有补偿的利益，拆分伯克希尔的股票就太蠢了。</p>
</blockquote>
<h1 id="兼并与收购">5. 兼并与收购</h1>
<blockquote>
<p>   伯克希尔的收购政策是一种双管齐下的方法：购买有杰出经济特性，并由巴菲特和芒格喜欢、信任而且敬佩的经理们运作的企业的部分或全部。</p>
</blockquote>
<p>   支付溢价的两个原因：（1）企业能够只通过少许增量资本来提高销量和市场份额，或者能够提高价格而不损销量和市场份额。（2）企业的经理能够识别运行不佳的企业，并运用非凡的天资开启隐藏着的价值。</p>
<p>   高溢价收购的三种动机：收购的兴奋、规模扩大的兴奋，以及对企业合并后的协力优势的过分乐观。</p>
<blockquote>
<p>   在支付收购时，伯克希尔仅在它得到的企业价值比付出的多时，才发行股票。</p>
</blockquote>
<h1 id="会计与估价">6. 会计与估价</h1>
<blockquote>
<p>   巴菲特强调，有用的财务报表必须能让使用者回答关于该企业的三个基本问题：公司大约值多少钱，满足其未来义务的能力，以及它的经理们在运作这家企业时工作做得有多好。</p>
</blockquote>
<p>   透明盈利 = 净收益 + 被投资公司的未分配利益 - 增加的税金 <a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a></p>
<p>   经济商誉价值的最佳指南是它在无杠杆的有形净资产上能获得多少收益，其特性是：（1）它的价值随着时间的延长而增加，对于中庸的企业来说至少也会随着名义上的通货膨胀率而增加，但对于有稳定经济特性或特许权的企业来说会增加的更多。（2）有更多经济商誉的企业相比于缺少经济商誉的企业，受通货膨胀的影响小。</p>
<p>   巴菲特认为所有者盈利 = 营业收入 + 其他非现金费用 - 对企业必不可少的投资 <a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a></p>
<h1 id="会计政策与纳税问题">7. 会计政策与纳税问题</h1>
<p>   会计商誉的摊销问题：巴菲特提出的解决方案 — 不摊销会计商誉，但要对会计商誉进行减值测试。如减值，则将减值部分计入损益表。</p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p>匕首论点使用了对汽车司机在面对安装在方向盘上的匕首时所具有的过度顾虑为隐喻，过分强调了资本结构中的巨大债务对管理层施加的惩罚影响。<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>该概念适用于 “长期股权投资” 项目及与其相关的投资收益及合并报表有关项目的评估。美国 GAAP 对于长投的处理，类似于国内的成本法和权益法核算，成本法强调分股利才确认损益，权益法则强调盯紧并跟随被投资单位的所有者权益变动，也就是只要被投资企业公布损益表和所有者权益变动表，投资企业即可据此确认损益。当然，权益法还要基于收购时的资产负债的公允价值相应调整被投资企业的利润表。 有别于会计准则对于不同比例股权采用不同的损益确认原则，透视盈利这一概念对不同比例的股权采用一视同仁的损益确认原则，即假设将被投资企业当年的留存收益全部分派给股东，股东确认与此相关的损益。那么，对于股东单位而言，即可在自己的利润表中确认（被投资企业在投资期间的净利润 * 股权比例 - 假设分派股利产生的税金），以此还原股东的真实投资收益。<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>对企业必不可少的投资是指：“厂房和设备等资本化开支的平均数，这是企业用来完全保持其长期竞争地位和单位销量的投资。”<a href="#fnref3" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>巴菲特致股东的信：股份公司教程</category>
      </categories>
      <tags>
        <tag>巴菲特</tag>
        <tag>致股东的信</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/2019/06/08/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="字符串的格式化">1. 字符串的格式化</h1>
<p>   在 Python 中，我们经常会输出类似 ' 亲爱的 xxx 你好！你 xx 月的话费是 xx，余额是 xx' 之类的字符串，而 xxx 的内容都是根据变量变化的，如： <a id="more"></a> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos; 亲爱的 % s 你好！你 % s 月的话费是 % d，余额是 % d。&apos; %(&apos; 周卫东 & apos;, &apos;5&apos;, 39, 1)</span><br></pre></td></tr></table></figure></p>
<p>   常用的格式符如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">符号</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">      % c</td>
<td style="text-align: left;"> 格式化字符及其 ASCII 码</td>
</tr>
<tr class="even">
<td style="text-align: left;">      % s</td>
<td style="text-align: left;"> 格式化字符串</td>
</tr>
<tr class="odd">
<td style="text-align: left;">      % d</td>
<td style="text-align: left;"> 格式化整数</td>
</tr>
<tr class="even">
<td style="text-align: left;">      % u</td>
<td style="text-align: left;"> 格式化无符号整型</td>
</tr>
<tr class="odd">
<td style="text-align: left;">      % o</td>
<td style="text-align: left;"> 格式化无符号八进制数</td>
</tr>
<tr class="even">
<td style="text-align: left;">      % x</td>
<td style="text-align: left;"> 格式化无符号十六进制数</td>
</tr>
<tr class="odd">
<td style="text-align: left;">      % X</td>
<td style="text-align: left;"> 格式化无符号十六进制数（大写）</td>
</tr>
<tr class="even">
<td style="text-align: left;">      % f</td>
<td style="text-align: left;"> 格式化浮点数字，可指定小数点后的精度</td>
</tr>
<tr class="odd">
<td style="text-align: left;">      % e</td>
<td style="text-align: left;"> 用科学计数法格式化浮点数</td>
</tr>
<tr class="even">
<td style="text-align: left;">      % E</td>
<td style="text-align: left;"> 作用同 % e，用科学计数法格式化浮点数</td>
</tr>
<tr class="odd">
<td style="text-align: left;">      % g</td>
<td style="text-align: left;"> % f 和 % e 的简写</td>
</tr>
<tr class="even">
<td style="text-align: left;">      % G</td>
<td style="text-align: left;"> % F 和 % E 的简写</td>
</tr>
<tr class="odd">
<td style="text-align: left;">      % p</td>
<td style="text-align: left;"> 用十六进制数格式化变量的地址</td>
</tr>
</tbody>
</table>
<p>   除此之外，还有一些辅助格式化操作符的指令，如下所示：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">符号</th>
<th style="text-align: left;">功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">*</td>
<td style="text-align: left;">定义宽度或者小数点精度</td>
</tr>
<tr class="even">
<td style="text-align: left;">-</td>
<td style="text-align: left;">用做左对齐</td>
</tr>
<tr class="odd">
<td style="text-align: left;">+</td>
<td style="text-align: left;">在正数前面显示加号 ( + )</td>
</tr>
<tr class="even">
<td style="text-align: left;"><sp></sp></td>
<td style="text-align: left;">在正数前面显示空格</td>
</tr>
<tr class="odd">
<td style="text-align: left;">#</td>
<td style="text-align: left;">在八进制数前面显示零 ('0')，在十六进制前面显示 '0x' 或者 '0X'(取决于用的是 'x' 还是 'X')</td>
</tr>
<tr class="even">
<td style="text-align: left;">0</td>
<td style="text-align: left;">显示的数字前面填充 '0' 而不是默认的空格</td>
</tr>
<tr class="odd">
<td style="text-align: left;">%</td>
<td style="text-align: left;">'%%' 输出一个单一的 '%'</td>
</tr>
<tr class="even">
<td style="text-align: left;">(var)</td>
<td style="text-align: left;">映射变量 (字典参数)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">m.n.</td>
<td style="text-align: left;">m 是显示的最小总宽度，n 是小数点后的位数 (如果可用的话)</td>
</tr>
</tbody>
</table>
<h1 id="字符串的应用">2. 字符串的应用</h1>
<p>   字符串的内建函数如下：</p>
<table>
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">方法</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">string.capitalize ()</td>
<td style="text-align: left;">把字符串的第一个字符大写</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.center (width)</td>
<td style="text-align: left;">返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.count (str, beg=0, end=len (string))</td>
<td style="text-align: left;">返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.decode (encoding='UTF-8', errors='strict')</td>
<td style="text-align: left;">以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 'ignore' 或 者 'replace'</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.encode (encoding='UTF-8', errors='strict')</td>
<td style="text-align: left;">以 encoding 指定的编码格式编码 string，如果出错默认报一个 ValueError 的异常，除非 errors 指定的是 'ignore' 或者 'replace'</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.endswith (obj, beg=0, end=len (string))</td>
<td style="text-align: left;">检查字符串是否以 obj 结束，如果 beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True, 否则返回 False.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.expandtabs (tabsize=8)</td>
<td style="text-align: left;">把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.find (str, beg=0, end=len (string))</td>
<td style="text-align: left;">检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 - 1</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.format ()</td>
<td style="text-align: left;">格式化字符串</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.index (str, beg=0, end=len (string))</td>
<td style="text-align: left;">跟 find () 方法一样，只不过如果 str 不在 string 中会报一个异常.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.isalnum ()</td>
<td style="text-align: left;">如果 string 至少有一个字符并且所有字符都是字母或数字则返</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">回 True, 否则返回 False</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.isalpha ()</td>
<td style="text-align: left;">如果 string 至少有一个字符并且所有字符都是字母则返回 True,</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">否则返回 False</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.isdecimal ()</td>
<td style="text-align: left;">如果 string 只包含十进制数字则返回 True 否则返回 False.</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.isdigit ()</td>
<td style="text-align: left;">如果 string 只包含数字则返回 True 否则返回 False.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.islower ()</td>
<td style="text-align: left;">如果 string 中包含至少一个区分大小写的字符，并且所有这些 (区分大小写的) 字符都是小写，则返回 True，否则返回 False</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.isnumeric ()</td>
<td style="text-align: left;">如果 string 中只包含数字字符，则返回 True，否则返回 False</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.isspace ()</td>
<td style="text-align: left;">如果 string 中只包含空格，则返回 True，否则返回 False.</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.istitle ()</td>
<td style="text-align: left;">如果 string 是标题化的 (见 title ()) 则返回 True，否则返回 False</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.isupper ()</td>
<td style="text-align: left;">如果 string 中包含至少一个区分大小写的字符，并且所有这些 (区分大小写的) 字符都是大写，则返回 True，否则返回 False</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.join (seq)</td>
<td style="text-align: left;">以 string 作为分隔符，将 seq 中所有的元素 (的字符串表示) 合并为一个新的字符串</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.ljust (width)</td>
<td style="text-align: left;">返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.lower ()</td>
<td style="text-align: left;">转换 string 中所有大写字符为小写.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.lstrip ()</td>
<td style="text-align: left;">截掉 string 左边的空格</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.maketrans (intab, outtab])</td>
<td style="text-align: left;">maketrans () 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">max (str)</td>
<td style="text-align: left;">返回字符串 str 中最大的字母。</td>
</tr>
<tr class="even">
<td style="text-align: left;">min (str)</td>
<td style="text-align: left;">返回字符串 str 中最小的字母。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.partition (str)</td>
<td style="text-align: left;">有点像 find () 和 split () 的结合体，从 str 出现的第一个位置起，把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str), 如果 string 中不包含 str 则 string_pre_str == string.</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.replace (str1, str2,  num=string.count (str1))</td>
<td style="text-align: left;">把 string 中的 str1 替换成 str2, 如果 num 指定，则替换不超过 num 次.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.rfind (str, beg=0,end=len (string) )</td>
<td style="text-align: left;">类似于 find () 函数，不过是从右边开始查找.</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.rindex ( str, beg=0,end=len (string))</td>
<td style="text-align: left;">类似于 index ()，不过是从右边开始.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.rjust (width)</td>
<td style="text-align: left;">返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.rpartition (str)</td>
<td style="text-align: left;">类似于 partition () 函数，不过是从右边开始查找</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.rstrip ()</td>
<td style="text-align: left;">删除 string 字符串末尾的空格.</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.split (str=&quot;&quot;, num=string.count (str))</td>
<td style="text-align: left;">以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 num+ 个子字符串</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.splitlines ([keepends])</td>
<td style="text-align: left;">按照行 ('', '', ') 分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.startswith (obj, beg=0,end=len (string))</td>
<td style="text-align: left;">检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果 beg 和 end 指定值，则在指定范围内检查.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.strip ([obj])</td>
<td style="text-align: left;">在 string 上执行 lstrip () 和 rstrip ()</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.swapcase ()</td>
<td style="text-align: left;">翻转 string 中的大小写</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.title ()</td>
<td style="text-align: left;">返回 &quot;标题化&quot; 的 string, 就是说所有单词都是以大写开始，其余字母均为小写 (见 istitle ())</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.translate (str, del=&quot;&quot;)</td>
<td style="text-align: left;">根据 str 给出的表 (包含 256 个字符) 转换 string 的字符，要过滤掉的字符放到 del 参数中</td>
</tr>
<tr class="odd">
<td style="text-align: left;">string.upper ()</td>
<td style="text-align: left;">转换 string 中的小写字母为大写</td>
</tr>
<tr class="even">
<td style="text-align: left;">string.zfill (width)</td>
<td style="text-align: left;">返回长度为 width 的字符串，原字符串 string 右对齐，前面填充 0</td>
</tr>
</tbody>
</table>
<h1 id="转义符">3. 转义符</h1>
<p>   在需要在字符中使用特殊字符时，python 用反斜杠 (\) 转义字符。如下表：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">转义字符</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">\(在行尾时)</td>
<td style="text-align: left;">续行符</td>
</tr>
<tr class="even">
<td style="text-align: left;">\\</td>
<td style="text-align: left;">反斜杠符号</td>
</tr>
<tr class="odd">
<td style="text-align: left;">'</td>
<td style="text-align: left;">单引号</td>
</tr>
<tr class="even">
<td style="text-align: left;">&quot;</td>
<td style="text-align: left;">双引号</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">响铃</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">退格 (Backspace)</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">转义</td>
</tr>
<tr class="even">
<td style="text-align: left;">\000</td>
<td style="text-align: left;">空</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">换行</td>
</tr>
<tr class="even">
<td style="text-align: left;"> 纵向制表符</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">横向制表符</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">回车</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">换页</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">八进制数，yy 代表的字符，例如：12 代表换行</td>
</tr>
<tr class="odd">
<td style="text-align: left;"></td>
<td style="text-align: left;">十六进制数，yy 代表的字符，例如：0a 代表换行</td>
</tr>
<tr class="even">
<td style="text-align: left;"></td>
<td style="text-align: left;">其它的字符以普通格式输出</td>
</tr>
</tbody>
</table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>第十五讲 条件格式与公式</title>
    <url>/2019/06/08/%E6%9D%A1%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%B8%8E%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="使用简单的条件格式">1. 使用简单的条件格式</h1>
<h2 id="为特定范围的数值标记特殊颜色">1.1 为特定范围的数值标记特殊颜色</h2>
<a id="more"></a>
<p>   通过开始选项卡 - 样式 - 条件格式 - 突出显示单元格规则，可以选择为特定范围的数值标记特殊颜色。</p>
<h2 id="查找重复值">1.2 查找重复值</h2>
<p>   通过开始选项卡 - 样式 - 条件格式 - 突出显示单元格规则 - 重复值，可以为重复值标记特殊颜色。</p>
<h2 id="为数据透视表中的数据制作数据条">1.3 为数据透视表中的数据制作数据条</h2>
<p>   通过开始选项卡 - 样式 - 条件格式 - 数据条，可以为数据区域设置数据条。</p>
<h1 id="定义多重条件的条件格式">2. 定义多重条件的条件格式</h1>
<p>   创建多重条件其实就是多次进行条件格式的设置，但必须注意条件格式的优先级问题，即后面做的条件格式是否会覆盖前面做的条件格式。</p>
<p>   对于多重条件，可以使用管理规则对多个条件进行排序，避免优先级不同导致的问题。</p>
<h1 id="使用公式定义条件格式">3. 使用公式定义条件格式</h1>
<p>   使用公式可以对条件格式中的条件进行描述，方便进行条件格式的设置。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excle1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>单元格</tag>
      </tags>
  </entry>
  <entry>
    <title>序列</title>
    <url>/2019/06/07/%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h1 id="序列的类型">1. 序列的类型</h1>
<p>   序列的类型包括：字符串、列表、元组和由元组组成的列表。 <a id="more"></a></p>
<h1 id="序列的访问">2. 序列的访问</h1>
<p>   在 Python 中，可以一次访问一个或多个元素。对于多个元素的访问，可以使用切片的方法。以列表为例： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&apos;Michael&apos;, &apos;Sarah&apos;, &apos;Tracy&apos;, &apos;Bob&apos;, &apos;Jack&apos;]</span><br><span class="line">&gt;&gt;&gt; L [0:3]</span><br><span class="line">[&apos;Michael&apos;, &apos;Sarah&apos;, &apos;Tracy&apos;]</span><br></pre></td></tr></table></figure></p>
<p>   其中，第一个数代表开始取数的位置，也传达了取数的方向（从前往后还是从后往前），第二个数代表最后取数的位置，即从前往后（从后往前）数第几个。</p>
<p>   进一步地，还可以有第三个参数，表示每几个取一个，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = list (range (100))</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[0, 1, 2, 3, ..., 99]</span><br><span class="line">&gt;&gt;&gt; L [::5]</span><br><span class="line">[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]</span><br></pre></td></tr></table></figure></p>
<h1 id="与序列相关的操作">3. 与序列相关的操作</h1>
<h2 id="标准类型运算符">3.1 标准类型运算符</h2>
<h3 id="值比较">3.1.1 值比较</h3>
<table>
<thead>
<tr class="header">
<th>&lt;</th>
<th>&gt;</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>&lt;=</td>
<td>&gt;=</td>
</tr>
<tr class="even">
<td>`==</td>
<td></td>
</tr>
<tr class="odd">
<td>!=</td>
<td>&lt;&gt;</td>
</tr>
</tbody>
</table>
<h3 id="布尔运算">3.1.2 布尔运算</h3>
<p>  not、and 和 or</p>
<h3 id="对象身份比较">3.1.3 对象身份比较</h3>
<p>  is 和 is not</p>
<h2 id="序列类型运算符">3.2 序列类型运算符</h2>
<p>   获取、重复、连接和判断。</p>
<h2 id="内建函数">3.3 内建函数</h2>
<p>   序列类型转换工厂函数主要包括：list ()、str ()、tuple ()、unicode () 和 basestring。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>网络数据获取</title>
    <url>/2019/06/07/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<h1 id="利用-urllib-库获取网络数据">利用 urllib 库获取网络数据</h1>
<p>   利用 urllib 库可以方便地获取网络数据，实例如下：<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a> <a id="more"></a> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">r = urllib.request.urlopen (&apos;http://z.cn/&apos;)</span><br><span class="line">html = r.read ()</span><br><span class="line">html</span><br></pre></td></tr></table></figure></p>
<p>   在 Python2 中，实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib</span><br><span class="line">r = urllib.urlopen (&apos;http://z.cn/&apos;)</span><br><span class="line">html = r.read ()</span><br><span class="line">html</span><br></pre></td></tr></table></figure></p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p>进一步的内容详见：<a href="https://blog.csdn.net/drdairen/article/details/51149498" title="详解：Python2 中的 urllib、urllib2 与 Python3 中的 urllib 以及第三方模块 requests" target="_blank" rel="noopener">详解：Python2 中的 urllib、urllib2 与 Python3 中的 urllib 以及第三方模块 requests</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
        <tag>数据获取</tag>
      </tags>
  </entry>
  <entry>
    <title>本地数据获取</title>
    <url>/2019/06/05/%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<h1 id="文件的打开和关闭">1. 文件的打开和关闭</h1>
<h2 id="文件的打开">1.1 文件的打开</h2>
<a id="more"></a>
<p>   在 Python 中，可以用 Python 内置的 open () 函数打开一个文件，并创建一个文件对象。open 函数基本的语法结构为： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file object = open (file_name [, access_mode][, buffering])</span><br></pre></td></tr></table></figure></p>
<p>   其中，file_name 是一个包含文件名称的字符串；access_mode 决定了打开文件的模式，所有可取值如下：</p>
<table>
<thead>
<tr class="header">
<th>模式</th>
<th>r</th>
<th>r+</th>
<th>w</th>
<th>w+</th>
<th>a</th>
<th>a+</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>读</td>
<td>+</td>
<td>+</td>
<td></td>
<td>+</td>
<td></td>
<td>+</td>
</tr>
<tr class="even">
<td>写</td>
<td></td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
</tr>
<tr class="odd">
<td>创建</td>
<td></td>
<td></td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
</tr>
<tr class="even">
<td>覆盖</td>
<td></td>
<td></td>
<td>+</td>
<td>+</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>指针在开始</td>
<td>+</td>
<td>+</td>
<td>+</td>
<td>+</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>指针在结尾</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>+</td>
<td>+</td>
</tr>
</tbody>
</table>
<p>   具体的解释如下：</p>
<table>
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">模式</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">t</td>
<td style="text-align: left;">文本模式 (默认)。</td>
</tr>
<tr class="even">
<td style="text-align: left;">x</td>
<td style="text-align: left;">写模式，新建一个文件，如果该文件已存在则会报错。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">b</td>
<td style="text-align: left;">二进制模式。</td>
</tr>
<tr class="even">
<td style="text-align: left;">+</td>
<td style="text-align: left;">打开一个文件进行更新 (可读可写)。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">U</td>
<td style="text-align: left;">通用换行模式（不推荐）。</td>
</tr>
<tr class="even">
<td style="text-align: left;">r</td>
<td style="text-align: left;">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rb</td>
<td style="text-align: left;">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td>
</tr>
<tr class="even">
<td style="text-align: left;">r+</td>
<td style="text-align: left;">打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rb+</td>
<td style="text-align: left;">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td>
</tr>
<tr class="even">
<td style="text-align: left;">w</td>
<td style="text-align: left;">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">wb</td>
<td style="text-align: left;">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr class="even">
<td style="text-align: left;">w+</td>
<td style="text-align: left;">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">wb+</td>
<td style="text-align: left;">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr class="even">
<td style="text-align: left;">a</td>
<td style="text-align: left;">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ab</td>
<td style="text-align: left;">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr class="even">
<td style="text-align: left;">a+</td>
<td style="text-align: left;">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ab+</td>
<td style="text-align: left;">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody>
</table>
<p>  buffering 则决定了缓存的大小，0 代表无缓存，负值代表默认缓存值，大于 1 的整数代表缓存值的大小。</p>
<h2 id="文件的关闭">1.2 文件的关闭</h2>
<p>   在 Python 中，可以使用 fileObject.close () 刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。</p>
<p>   当文件读写出错时，后面的 f.close () 就不会调用，为了保证无论是否出错都能正确地关闭文件，可以使用 try ... finally 来实现： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    f = open (&apos;/path/to/file&apos;, &apos;r&apos;)</span><br><span class="line">    print (f.read ())</span><br><span class="line">finally:</span><br><span class="line">    if f:</span><br><span class="line">        f.close ()</span><br></pre></td></tr></table></figure></p>
<p>   但是，上述写法比较繁琐，以，Python 引入了 with 语句来自动帮我们调用 close () 方法： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open (&apos;/path/to/file&apos;, &apos;r&apos;) as f:</span><br><span class="line">    print (f.read ())</span><br></pre></td></tr></table></figure></p>
<p>  ** 值得注意的是，上述的斜杠号都是反斜杠：/。**</p>
<h1 id="文件的读写">2. 文件的读写</h1>
<h2 id="读文件">2.1 读文件</h2>
<p>   在 Python 中，使用 read（）方法从一个打开的文件中读取一个字符串。基本的语法如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fileObject.read ([count])</span><br></pre></td></tr></table></figure></p>
<p>  [count] 代表从已打开文件中读取的字节计数，默认值为读取文件的全部内容。</p>
<h2 id="写文件">2.2 写文件</h2>
<p>   在 Python 中，可以使用 write () 函数将任何字符串写入一个打开的文件。但是，write () 函数不会在字符串的结尾添加换行符 ('')，因此必须手动添加换行符 ('')。实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"> </span><br><span class="line"># 打开一个文件 </span><br><span class="line">fo = open (&quot;foo.txt&quot;, &quot;w&quot;)</span><br><span class="line">fo.write ( &quot;www.runoob.com!\nVery good site!\n&quot;)</span><br><span class="line"> </span><br><span class="line"># 关闭打开的文件 </span><br><span class="line">fo.close ()</span><br></pre></td></tr></table></figure></p>
<p>   但是，值得注意的是：以 'w' 模式写入文件时，如果文件已存在，会直接覆盖（相当于删掉后新写入一个文件）。如果我们希望追加到文件末尾怎么办？可以传入 'a' 以追加（append）模式写入。</p>
<h1 id="其他与文件相关的函数">3. 其他与文件相关的函数</h1>
<p>   为了正确地对文件读和写，可以使用 seek（offset [,from]）方法改变当前文件的位置。offset 变量表示要移动的字节数，from 变量指定开始移动字节的参考位置：0 - 文件头部，1 - 当前位置，2 - 文件尾部。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
        <tag>数据获取</tag>
      </tags>
  </entry>
  <entry>
    <title>变量作用域</title>
    <url>/2019/06/05/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h1 id="全局变量和局部变量">1. 全局变量和局部变量</h1>
<p>   全局变量是指在程序代码主体部分中的变量，局部变量是指在函数部分的变量。对于局部变量而言，只能在所在函数内部生效</p>
<a id="more"></a>
<h1 id="同名变量">2. 同名变量</h1>
<p>   当全局变量和局部变量同名时，生效的规则是：内层屏蔽外层。</p>
<h1 id="局部变量转为全局变量global-语句">3. 局部变量转为全局变量：global 语句</h1>
<p>   在函数内部，变量默认为局部变量，但可以通过 global 语句将其转换为全局变量。实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f (x)：</span><br><span class="line">  global a</span><br><span class="line">  print (a)</span><br><span class="line">  a = 5</span><br><span class="line">  print (a+x)</span><br><span class="line"></span><br><span class="line">a = 3</span><br><span class="line">f (8)    # 输出结果为 5+8=13</span><br><span class="line">print (a)   #输出结果为 5</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>中美贸易战</title>
    <url>/2019/06/04/%E4%B8%AD%E7%BE%8E%E8%B4%B8%E6%98%93%E6%88%98/</url>
    <content><![CDATA[<h1 id="年中美贸易战简史-1">1. 2018-2019 年中美贸易战简史 <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></h1>
<a id="more"></a>
<p>  2018 年 3 月 22 日美国总统特朗普签署了总统备忘录，宣布将依据 1974 年贸易法第 301 条，对总计达 600 亿美元的中国出口到美国的商品征收关税，“在 15 天内制定征税货物列表，此后还有 30 天征询公众意见的公示期”。作为回应，中国于 2018 年 3 月 23 日发布了针对美国进口钢铁和铝产品 232 措施的中止减让产品清单并征求公众意见。<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a> 2018 年 4 月 2 日，中国正式决定对原产于美国的部分进口商品中止关税减让义务。<a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a></p>
<p>  2018 年 4 月 4 日，美国政府发布了加征关税的商品清单，将对中输美的 1333 项 500 亿美元的商品加征 25% 的关税。<a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a> 中国随之做出回应，原产于美国的大豆、汽车、化工品等 14 类 106 项商品加征 25% 的关税，<a href="#fn5" class="footnote-ref" id="fnref5"><sup>5</sup></a> 中国表态实施日期视美国政府对中国商品加征关税。2018 年 4 月 5 日，特朗普要求美国贸易代表办公室依据 “301 调查”，额外对 1000 亿美元中国进口商品加征关税。<a href="#fn6" class="footnote-ref" id="fnref6"><sup>6</sup></a></p>
<p>  2018 年 4 月 16 日，美国宣布中国电信设备商中兴通讯将被禁止从美国市场上购买零部件产品，期限为 7 年。</p>
<p>  2018 年 5 月 17 日至 18 日，中美双方就贸易问题进行了磋商，5 月 19 日，中美两国发表《中美贸易磋商联合声明》。<a href="#fn7" class="footnote-ref" id="fnref7"><sup>7</sup></a> 但 5 月 29 日，美国白宫宣布仍将对 500 亿中国商品征收 25% 的关税。5 月 30 日，中美两国就具体落实中美双方联合声明共识展开磋商。随后，在 6 月 2 日至 3 日，中美双方对贸易问题又进行了进一步的磋商。</p>
<p>  2018 年 6 月 5 日，中国中兴公司与美国政府签署原则性协议，美国商务部取消针对中兴通讯向美国供应商采购零部件的禁令，从而阶段性结束了中兴事件。作为条件，协议里也列出了对中兴的处罚措施。<a href="#fn8" class="footnote-ref" id="fnref8"><sup>8</sup></a></p>
<p>  </p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="https://zh.wikipedia.org/wiki/2018%%20EF%%20BC%8D2019%%20E5%%20B9%%20B4%%20E4%%20B8%%20AD%%20E7%%20BE%8E%%20E8%%20B4%%20B8%%20E6%98%93%%20E6%88%98" title="维基百科词条：2018－2019 年中美贸易战" target="_blank" rel="noopener">维基百科词条：2018－2019 年中美贸易战</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p><a href="http://www.gov.cn/xinwen/2018-03/23/content_5276807.htm" title="商务部发布终止减让产品清单 涉美对华出口约 30 亿美元" target="_blank" rel="noopener">商务部发布终止减让产品清单 涉美对华出口约 30 亿美元</a><a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p><a href="http://gss.mof.gov.cn/zhengwuxinxi/zhengcefabu/201804/t20180401_2857769.html" title="对原产于美国的部分进口商品中止关税减让义务的通知" target="_blank" rel="noopener">对原产于美国的部分进口商品中止关税减让义务的通知</a><a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p><a href="https://ustr.gov/about-us/policy-offices/press-office/press-releases/2018/april/under-section-301-action-ustr" title="Under Section 301 Action, USTR Releases Proposed Tariff List on Chinese Products" target="_blank" rel="noopener">Under Section 301 Action, USTR Releases Proposed Tariff List on Chinese Products</a><a href="#fnref4" class="footnote-back">↩</a></p></li>
<li id="fn5"><p><a href="http://www.gov.cn/xinwen/2018-04/04/content_5280196.htm" title="中国拟对美国大豆、汽车、化工品等 14 类 106 项商品加征 25% 关税" target="_blank" rel="noopener">中国拟对美国大豆、汽车、化工品等 14 类 106 项商品加征 25% 关税</a><a href="#fnref5" class="footnote-back">↩</a></p></li>
<li id="fn6"><p><a href="https://www.whitehouse.gov/briefings-statements/statement-president-donald-j-trump-additional-proposed-section-301-remedies/" title="Statement from President Donald J. Trump on Additional Proposed Section 301 Remedies" target="_blank" rel="noopener">Statement from President Donald J. Trump on Additional Proposed Section 301 Remedies</a><a href="#fnref6" class="footnote-back">↩</a></p></li>
<li id="fn7"><p><a href="http://www.xinhuanet.com/fortune/2018-05/20/c_1122857979.htm" title="中美就经贸磋商发表联合声明" target="_blank" rel="noopener">中美就经贸磋商发表联合声明</a><a href="#fnref7" class="footnote-back">↩</a></p></li>
<li id="fn8"><p><a href="https://zh.wikipedia.org/wiki/%%20E7%%20BE%8E%%20E5%9B%%20BD%%20E5%%20B0%81%%20E6%9D%80%%20E4%%20B8%%20AD%%20E5%85%%20B4%%20E4%%20BA%8B%%20E4%%20BB%%20B6" title="维基百科词条：美国封杀中兴事件" target="_blank" rel="noopener">维基百科词条：美国封杀中兴事件</a><a href="#fnref8" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>第十四讲 日期函数</title>
    <url>/2019/06/04/%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="日期和时间">1. 日期和时间</h1>
<p>   将分钟转换为小时 <a id="more"></a></p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">开始时间</th>
<th style="text-align: center;">分钟</th>
<th style="text-align: center;">结束时间 (公式)</th>
<th style="text-align: center;">结束时间 (数值)</th>
<th style="text-align: center;">结束时间 (单元格格式 - 时间)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">9:00</td>
<td style="text-align: center;">90</td>
<td style="text-align: center;">=D4+E4/24/60</td>
<td style="text-align: center;">0.4375</td>
<td style="text-align: center;">10:30</td>
</tr>
<tr class="even">
<td style="text-align: center;">12:20</td>
<td style="text-align: center;">70</td>
<td style="text-align: center;">=D5+E5/24/60</td>
<td style="text-align: center;">0.5625</td>
<td style="text-align: center;">13:30</td>
</tr>
<tr class="odd">
<td style="text-align: center;">18:40</td>
<td style="text-align: center;">150</td>
<td style="text-align: center;">=D6+E6/24/60</td>
<td style="text-align: center;">0.8819444</td>
<td style="text-align: center;">21:10</td>
</tr>
</tbody>
</table>
<p>   将小时转换为分钟</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">开始时间</th>
<th style="text-align: center;">结束时间</th>
<th style="text-align: center;">持续时间 (分钟)(公式)</th>
<th style="text-align: center;">持续时间 (分钟)(常规)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">9:00</td>
<td style="text-align: center;">12:00</td>
<td style="text-align: center;">=(E9-D9)*60*24</td>
<td style="text-align: center;">180</td>
</tr>
<tr class="even">
<td style="text-align: center;">12:20</td>
<td style="text-align: center;">18:00</td>
<td style="text-align: center;">=(E10-D10)*60*24</td>
<td style="text-align: center;">340</td>
</tr>
<tr class="odd">
<td style="text-align: center;">18:40</td>
<td style="text-align: center;">20:30</td>
<td style="text-align: center;">=(E11-D11)*60*24</td>
<td style="text-align: center;">110</td>
</tr>
</tbody>
</table>
<p>   将天数转换为日期</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">开始日期</th>
<th style="text-align: center;">天数</th>
<th style="text-align: center;">结束日期 (公式)</th>
<th style="text-align: center;">结束日期 (数值)</th>
<th style="text-align: center;">结束日期 (单元格格式 - 时间)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">2013/6/16</td>
<td style="text-align: center;">70</td>
<td style="text-align: center;">=D14+E14</td>
<td style="text-align: center;">41511</td>
<td style="text-align: center;">2013/8/25</td>
</tr>
<tr class="even">
<td style="text-align: center;">2012/8/8</td>
<td style="text-align: center;">90</td>
<td style="text-align: center;">=D15+E15</td>
<td style="text-align: center;">41219</td>
<td style="text-align: center;">2012/11/6</td>
</tr>
</tbody>
</table>
<p>   将日期转换为天数</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">开始日期</th>
<th style="text-align: center;">结束日期</th>
<th style="text-align: center;">间隔天数</th>
<th style="text-align: center;">间隔天数 (常规)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">2013/6/16</td>
<td style="text-align: center;">2013/8/24</td>
<td style="text-align: center;">=E18-D18</td>
<td style="text-align: center;">69</td>
</tr>
<tr class="even">
<td style="text-align: center;">2012/8/8</td>
<td style="text-align: center;">2013/1/1</td>
<td style="text-align: center;">=E19-D19</td>
<td style="text-align: center;">146</td>
</tr>
</tbody>
</table>
<h1 id="推算日期">2. 推算日期</h1>
<p>   计算本月第几天的日期：=date (year (),month (),day ())</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">开始日期</th>
<th style="text-align: center;">本月最后一天</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">2013/6/16</td>
<td style="text-align: center;">=DATE (YEAR (B13),MONTH (B13)+1,0)</td>
</tr>
<tr class="even">
<td style="text-align: center;">2012/8/8</td>
<td style="text-align: center;">=DATE (YEAR (B13),MONTH (B13)+1,1)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2008/2/11</td>
<td style="text-align: center;">=DATE (YEAR (B13),MONTH (B13)+1,2)</td>
</tr>
<tr class="even">
<td style="text-align: center;">2009/2/11</td>
<td style="text-align: center;">=DATE (YEAR (B13),MONTH (B13)+1,3)</td>
</tr>
</tbody>
</table>
<p>   计算本月有多少天：=day (year (),month ()+1,0)</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">开始日期</th>
<th style="text-align: center;">本月天数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">2013/6/16</td>
<td style="text-align: center;">=DAY (DATE (YEAR (B21),MONTH (B21)+1,0))</td>
</tr>
<tr class="even">
<td style="text-align: center;">2012/8/8</td>
<td style="text-align: center;">=DAY (DATE (YEAR (B21),MONTH (B21)+1,1))</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2008/2/11</td>
<td style="text-align: center;">=DAY (DATE (YEAR (B21),MONTH (B21)+1,2))</td>
</tr>
<tr class="even">
<td style="text-align: center;">2009/2/11</td>
<td style="text-align: center;">=DAY (DATE (YEAR (B21),MONTH (B21)+1,3))</td>
</tr>
</tbody>
</table>
<h1 id="计算两个日期之间的间隔">3. 计算两个日期之间的间隔</h1>
<p>   计算两个日期之间的间隔需要使用的函数为：=datedir (前，后，间隔单位）</p>
<table>
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th>入职日期</th>
<th>离职日期</th>
<th>间隔</th>
<th>去掉前面的算后面的</th>
<th>公式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2002/9/10</td>
<td>2008/7/5</td>
<td>5 年 9 月 25 天</td>
<td>ym</td>
<td>=DATEDIF (B13,C13,&quot;y&quot;)&amp;&quot;年&quot;&amp;DATEDIF (B13,C13,&quot;ym&quot;)&amp;&quot;月&quot;&amp;DATEDIF (B13,C13,&quot;md&quot;)&amp;&quot;天&quot;</td>
</tr>
<tr class="even">
<td>2004/5/16</td>
<td>2009/2/21</td>
<td>4 年 9 月 5 天</td>
<td>md</td>
<td>=DATEDIF (B14,C14,&quot;y&quot;)&amp;&quot;年&quot;&amp;DATEDIF (B14,C14,&quot;ym&quot;)&amp;&quot;月&quot;&amp;DATEDIF (B14,C14,&quot;md&quot;)&amp;&quot;天&quot;</td>
</tr>
<tr class="odd">
<td>2010/5/16</td>
<td>2010/9/10</td>
<td>0 年 3 月 25 天</td>
<td>yd</td>
<td>=DATEDIF (B15,C15,&quot;y&quot;)&amp;&quot;年&quot;&amp;DATEDIF (B15,C15,&quot;ym&quot;)&amp;&quot;月&quot;&amp;DATEDIF (B15,C15,&quot;md&quot;)&amp;&quot;天&quot;</td>
</tr>
</tbody>
</table>
<h1 id="星期计算">4. 星期计算</h1>
<p>   第几周：=WEEKNUM (值，返回类型)；周几：=WEEKDAY (值，返回类型)</p>
<h1 id="整容函数">5. 整容函数</h1>
<p>   利用 text 函数可以转换单元格的格式：=TEXT（值，转换类型）。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>递归</title>
    <url>/2019/06/03/%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h1 id="什么是递归-1">1. 什么是递归 <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></h1>
<p>   递归指的是一个函数在内部调用自身本身，相对于循环而言，递归的效率并不高，因此它并不是解决问题的首要选择。但是递归函数也有自己独特的优点，即定义简单，逻辑清晰。实例如下： <a id="more"></a> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># the nth Fibonacci number      # 计算斐波那契数列 </span><br><span class="line">def fib (n):</span><br><span class="line">  a, b = 0, 1</span><br><span class="line">  count = 1</span><br><span class="line">  while count &lt; n:              # 循环 - while 语句 </span><br><span class="line">    a, b = b, a+b</span><br><span class="line">    count = count + 1</span><br><span class="line">  print (a, end = &quot; &quot;)</span><br><span class="line">for i in range (1,101):</span><br><span class="line">  fib (i)</span><br><span class="line"></span><br><span class="line"># the nth Fibonacci number</span><br><span class="line">def fib (n):</span><br><span class="line">  if n == 0 or n == 1:         </span><br><span class="line">    return n</span><br><span class="line">  else:</span><br><span class="line">    return (fib (n - 1) + fib (n - 2))  # 递归 </span><br><span class="line">for i in range (1,101):</span><br><span class="line">  print (i, end = &quot; &quot;)</span><br></pre></td></tr></table></figure></p>
<h1 id="进一步理解递归汉诺塔的递归算法">2. 进一步理解递归：汉诺塔的递归算法</h1>
<p>   汉诺塔问题：有 a、b、c 三个柱子，其中一个柱子 a 上从下往上按照大小顺序摞着 n 片黄金圆盘，把柱子 a 上的 n 个圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，任何时候，在小圆盘上都不能放大圆盘，且在三根柱子之间一次只能移动一个圆盘。问应该如何操作？</p>
<p>   假设将所用圆盘从 a 移到 c,a 的底部是最大的黄金圆盘，因此从 a 的圆盘移动顺序来看，最大的黄金圆盘排在最后。但是，从 c 来看，最大的黄金圆盘处于底部，因此必须首先放置。考虑到上述两种情况，必须首先将柱子 a 顶部的 n-1 个黄金圆盘移到 b 上面，然后将第 n 个黄金圆盘放在 c 上面；紧接着成为了从 b 到 c 的圆盘移动问题，将剩下的 n-1 个圆盘移动到 c 处。</p>
<p>   具体的逻辑结构如下图所示：</p>
<figure>
<img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190603211503.png" title="汉诺塔算法的逻辑" alt="汉诺塔算法的逻辑"><figcaption>汉诺塔算法的逻辑</figcaption>
</figure>
<p>   代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def move (n, a, b, c):</span><br><span class="line">    if n==1:</span><br><span class="line">        print a,&apos;--&gt;&apos;,c</span><br><span class="line">        return</span><br><span class="line">    else:</span><br><span class="line">        move (n-1,a,c,b)  #首先需要把 (N-1) 个圆盘移动到 b</span><br><span class="line">        move (1,a,b,c)    #将 a 的最后一个圆盘移动到 c</span><br><span class="line">        move (n-1,b,a,c)  #再将 b 的 (N-1) 个圆盘移动到 c，a,b 位置互换了。</span><br><span class="line">move (4, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;)</span><br></pre></td></tr></table></figure></p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://luxiangqiang.xn--6qq986b3xl/2019/05/12/%%20E6%95%%20B0%%20E6%8D%%20AE%%20E7%%20BB%93%%20E6%9E%84%%20E4%%20B8%8E%%20E7%%20AE%97%%20E6%%20B3%95%%20E4%%20B9%8B%%20E9%80%92%%20E5%%20BD%92%%20E7%%20B3%%20BB%%20E5%88%97/" title="对递归的详细解读" target="_blank" rel="noopener">对递归的详细解读</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>第十三讲 邮件合并</title>
    <url>/2019/06/03/%E9%82%AE%E4%BB%B6%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<h1 id="简单的邮件合并">1. 简单的邮件合并</h1>
<h2 id="批量生成多个文档">1.1 批量生成多个文档</h2>
<a id="more"></a>
<p>   点开邮件，再点击开始邮件合并右下角的下拉菜单，最后点击邮件合并分步向导。第一步是选择邮件合并的文档类型，包括信函、电子邮件、信封、标签和目录，前三种最后显示为每个邮件单独的一页，后两种显示为每页多个邮件。第二步是选择开始文档的格式，一般不需要设置，使用当前文档即可。第三步是选择收件人，在这一步需要导入 excel 文档，以便确定插入的域的内容。第四步是撰写信函，可以插入域。第五步是预览文档，可以查看文档输出格式是否正确。第六步则是完成并开始合并，可以将结果输出到新文档中，或者发送邮件。</p>
<h2 id="邮件发送">1.2 邮件发送</h2>
<p>   选择文档类型为：电子邮件，最后在完成并合并下拉列表里选择发送电子邮件即可。</p>
<h2 id="每页显示多条记录">1.3 每页显示多条记录</h2>
<p>   只需选择目录这一文档类型即可。</p>
<h2 id="邮件合并的数字格式问题">1.4 邮件合并的数字格式问题</h2>
<p>  Excel 中的数字格式在 word 的邮件合并中会失效，需要手动添加，添加方式是：alt+F4 组合键将值转为域代码，然后在 {} 内添加 \#&quot;数字格式&quot;, 其中数字格式可以在 excel 中设置单元格格式的自定义格式中查看。</p>
<h1 id="复杂的邮件合并">2. 复杂的邮件合并</h1>
<h2 id="利用邮件合并批量生成单个的文档-1">2.1 利用邮件合并批量生成单个的文档 <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></h2>
<p>   第一步：在使用的模板表中，添加一行作为新的第一行，然后插入域，并将其设置为大纲级别 1。p.s：如果最后不需要显示域的值，可以将其颜色设置为跟背景颜色一致的颜色，将其行距设为固定值 1 磅。</p>
<p>   第二步，然后只需进行正常的邮件合并即可，将结果输出到新的文档。</p>
<p>   第三步，在输出的新文档中，点击视图 - 大纲视图 - 显示级别 - 1 级，然后选中全部。选中全部后，点击显示文档，再点击创建。之后，找一个文件夹保存文档即可。</p>
<h2 id="为不同的邮件插入不同的附件">2.2 为不同的邮件插入不同的附件</h2>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p><a href="http://blog.sina.com.cn/s/blog_4a8e22d40102wvqa.html" title="也可以使用 VBA 进行操作。" target="_blank" rel="noopener">也可以使用 VBA 进行操作。</a><a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>第十二讲 MATCH 和 INDEX 函数</title>
    <url>/2019/06/02/MATCH%E5%92%8CINDEX%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="match-和-index-函数的语法">1. MATCH 和 INDEX 函数的语法</h1>
<a id="more"></a>
<p>  MATCH 函数的语法是：MATCH (lookup_value,lookup_array,[match_type])，其中 lookup_value 是查找值，lookup_array 是查找区域，match_type 则是查找方式：0 代表精确查找，1 代表模糊查找。</p>
<p>  INDEX 函数的语法是：INDEX (array,row_num,[column_num])，其中 array 是查找区域，row_num 则是查找行。</p>
<h1 id="match-和-index-函数的优势">2. MATCH 和 INDEX 函数的优势</h1>
<p>  MATCH 和 INDEX 函数可以搭配起来，即 = INDEX (,MATCH (,,))，MATCH 查找数值所在的行，INDEX 负责抓取相应的数据。</p>
<p>   相比 VLOOKUP 函数，MATCH 和 INDEX 函数具有更多的灵活性，VLOOKUP 函数只能从左向右查找，不能反过来从右向左查找。</p>
<h1 id="返回多列结果">3. 返回多列结果</h1>
<p>  VLOOKUP 函数能够实现连续多列的结果，但不能返回非连续的多列结果，MATCH 函数和 VLOOKUP 函数的搭配则不受该限制。</p>
<p>  VLOOKUP 函数可以搭配 COLUMN 函数，因为 COLUMN 函数能够跟随位置的移动提供不同的列数，因此能够解决 VLOOKUP 函数中列的位置固定的缺点，基本语法是：=VLOOKUP (,,COLUMN (),)。</p>
<p>  MATCH 函数和 VLOOKUP 函数的搭配能够更好地解决这个问题，基本语法是：=VLOOKUP (,,MATCH (,,),)。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义函数</title>
    <url>/2019/06/02/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="基本语法">1. 基本语法</h1>
<p>   自定义函数的基本语法是： <a id="more"></a> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def functionname ( parameters ):        # 括号是必须的，即使没有参数 </span><br><span class="line">   &quot; 函数_文档字符串 & quot;                    #  使用 print (函数名.__doc__) 可以打印函数的文档信息（语法、描述等）</span><br><span class="line">   function_suite</span><br><span class="line">   return [expression]</span><br></pre></td></tr></table></figure></p>
<h1 id="调用">2. 调用</h1>
<p>   当函数定义好之后，可以直接使用 function_name (参数) 来调用自定义函数，示例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Filename: prime.py           # 计算 1~100 之间的素数 </span><br><span class="line">from math import sqrt</span><br><span class="line">def isprime (x):                # 自定义函数：确定一个数是否为素数 </span><br><span class="line">  if x == 1:</span><br><span class="line">    return False</span><br><span class="line">  k = int (sqrt (x))</span><br><span class="line">  for j in range (2, k+1):</span><br><span class="line">    if x% j == 0:</span><br><span class="line">      return False</span><br><span class="line">  return True                  </span><br><span class="line">for i in range (2, 101):       </span><br><span class="line">  if isprime (i):               #  调用 isprime 函数 </span><br><span class="line">    print (i, end=&apos; &apos;)</span><br></pre></td></tr></table></figure></p>
<h1 id="参数">3. 参数</h1>
<p>   在 Python 的自定义函数中，调用自定义函数必须传入一个参数，使用的参数包括两种：默认参数和关键字参数。</p>
<h2 id="默认参数">3.1 默认参数</h2>
<p>   在函数的定义中，默认参数以赋值语句的形式呈现，它可以简化函数的调用。示例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;def f (x = True):                              # x 的默认参数为 True</span><br><span class="line">       &apos;whether x is a correct word or not&apos;</span><br><span class="line">       if x:                                     # 如果 x 为 True，则输出：x is correct word  </span><br><span class="line">           print (&apos;x is a correct word&apos;)</span><br><span class="line">       print (&apos;OK&apos;)                               # 无论 x 的值是什么，都输出：OK</span><br><span class="line">&gt;&gt;&gt;f ()                                           # 此时，默认 x 为 True</span><br><span class="line">x is a correct word</span><br><span class="line">OK</span><br><span class="line">&gt;&gt;&gt;f (False)</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></p>
<p>   使用默认参数时，必须注意默认参数后面也必须是默认参数。</p>
<p>   默认参数的坑 <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>:</p>
<p>   先定义一个函数，传入一个 list，添加一个 END 再返回： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def add_end (L=[]):</span><br><span class="line">    L.append (&apos;END&apos;)</span><br><span class="line">    return L</span><br></pre></td></tr></table></figure></p>
<p>   当你正常调用时，结果似乎不错： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end ([1, 2, 3])</span><br><span class="line">[1, 2, 3, &apos;END&apos;]</span><br><span class="line">&gt;&gt;&gt; add_end ([&apos;x&apos;, &apos;y&apos;, &apos;z&apos;])</span><br><span class="line">[&apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;END&apos;]</span><br></pre></td></tr></table></figure></p>
<p>   当你使用默认参数调用时，一开始结果也是对的： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end ()</span><br><span class="line">[&apos;END&apos;]</span><br></pre></td></tr></table></figure></p>
<p>   但是，再次调用 add_end () 时，结果就不对了： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end ()</span><br><span class="line">[&apos;END&apos;, &apos;END&apos;]</span><br><span class="line">&gt;&gt;&gt; add_end ()</span><br><span class="line">[&apos;END&apos;, &apos;END&apos;, &apos;END&apos;]</span><br></pre></td></tr></table></figure></p>
<p>   原因是默认参数是一个列表，而列表是可变的，因此每添加一个 'END',L 也会相应添加一个 'END'。要想解决上述问题，必须使用一个不变的对象作为默认参数，如 None, 代码如下：<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def add_end (L=None):</span><br><span class="line">    if L is None:</span><br><span class="line">        L = []</span><br><span class="line">    L.append (&apos;END&apos;)</span><br><span class="line">    return L</span><br></pre></td></tr></table></figure></p>
<p>   此时，无论调用多少次，都不会有问题： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end ()</span><br><span class="line">[&apos;END&apos;]</span><br><span class="line">&gt;&gt;&gt; add_end ()</span><br><span class="line">[&apos;END&apos;]</span><br></pre></td></tr></table></figure></p>
<h1 id="关键字参数">3.2 关键字参数</h1>
<p>   关键字参数的使用可以不按照参数的顺序，因为 Python 解释器能够用参数名匹配参数值。实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"> </span><br><span class="line"># 可写函数说明 </span><br><span class="line">def printinfo (name, age):</span><br><span class="line">   &quot; 打印任何传入的字符串 & quot;</span><br><span class="line">   print (&quot;Name:&quot;, name)</span><br><span class="line">   print (&quot;Age:&quot;, age)</span><br><span class="line">   return</span><br><span class="line"> </span><br><span class="line"># 调用 printinfo 函数 </span><br><span class="line">printinfo ( age=50, name=&quot;miki&quot; )  # 调用函数时，关键字参数的使用并未按照参数的顺序。</span><br></pre></td></tr></table></figure></p>
<h1 id="传递函数-递归函数">4. 传递函数 / 递归函数</h1>
<p>   传递函数 / 递归函数是指函数可以像参数一样，传递给另外一个参数。实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;def addMe2Me (x):</span><br><span class="line">       return (x+x)</span><br><span class="line">&gt;&gt;&gt;def self (f,y):</span><br><span class="line">       print (f (y)) </span><br><span class="line">&gt;&gt;&gt;self (addMe2Me, 2.2)</span><br><span class="line">4.4</span><br></pre></td></tr></table></figure></p>
<h1 id="匿名-lambda-函数">5. 匿名 (lambda) 函数</h1>
<p>   在 Python 中，使用 lambda 来创建匿名函数。lambda 函数的语法只包含一个语句，即 <code>lambda [arg1 [,arg2,.....argn]]:expression</code>。实例如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"> </span><br><span class="line"># 可写函数说明 </span><br><span class="line">sum = lambda arg1, arg2: arg1 + arg2;</span><br><span class="line"> </span><br><span class="line"># 调用 sum 函数 </span><br><span class="line">print (&quot; 相加后的值为 : &quot;, sum ( 10, 20 ))</span><br><span class="line">print (&quot; 相加后的值为 : &quot;, sum ( 20, 20 ))</span><br></pre></td></tr></table></figure></p>
<h1 id="return-语句">6. return 语句</h1>
<p>  return 语句表示退出函数，没有参数值时默认为 None。在编写代码时，可以优先写将 return 写上，如： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def  </span><br><span class="line">  return</span><br></pre></td></tr></table></figure></p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p>[廖雪峰老师的 Python 课程](https://www.liaoxuefeng.com/wiki/1016959663602400/1017261630425888 ' 廖雪峰老师的 Python 课程 ')<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>廖雪峰老师的建议：为什么要设计 str、None 这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。<a href="#fnref2" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>第十一讲 VLOOKUP 函数</title>
    <url>/2019/06/02/VLOOKUP%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="vlookup-函数的基本语法">1. VLOOKUP 函数的基本语法</h1>
<a id="more"></a>
<p>  VLOOKUP 函数的基本语法是：=VLOOKUP (lookup_value,table_array,col_index_num,[range_lookup]) 。其中，lookup_value 是要寻找的值，table_array 是以寻找值的列开始，包含填入值所在列的区域范围，col_index_num 是填入值所在的列在区域范围内排在第几列，[range_lookup] 则包含两个值：1 和 0，其中 1 代表模糊查找，0 代表精确查找。</p>
<h1 id="vlookup-函数中使用通配符">2. VLOOKUP 函数中使用通配符</h1>
<p>   当所要查找的值和所选区域范围的值相比，并不完全，如红星和红星有限公司，这时可以使用通配符 *,=VLOOKUP (lookup_value&amp;&quot;*&quot;,table_array,col_index_num,[range_lookup])。</p>
<h1 id="vlookup-函数的模糊查找">3. VLOOKUP 函数的模糊查找</h1>
<p>   模糊匹配意味着表里没有但还是要找接近的，但是模糊查找仍然有一定的规则：小于等于自己的最大值。</p>
<h1 id="使用-isna-函数处理数字格式引起的错误">4. 使用 isna 函数处理数字格式引起的错误</h1>
<p>   寻找值和匹配值的数字格式可能不一致，如数值格式和文本格式，此时 Excel 会显示 N/A。因此，要想解决数字格式不一致的问题，必须统一格式。此时，可以使用 isna 函数，基本语法结构为 = IF (ISNA (VLOOKUP (lookup_value+0/*1,table_array,col_index_num,[range_lookup])),VLOOKUP (lookup_value&amp;&quot;&quot;,table_array,col_index_num,[range_lookup]))。</p>
<h1 id="hlookvp-函数">5. HLOOKVP 函数</h1>
<p>   当 EXCEL 的数据结构呈现横排时，可以使用 HLOOKUP 函数，同 VLOOKUP 函数一致，只是将第几列改为第几行。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>循环中的 break，continue 和 else</title>
    <url>/2019/06/01/%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84break%EF%BC%8Ccontinue%E5%92%8Celse/</url>
    <content><![CDATA[<h1 id="break-语句">1. break 语句</h1>
<p>  break 语句的功能是跳出当前所在的循环结构。比如： <a id="more"></a> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"> </span><br><span class="line">for letter in &apos;Python&apos;:     # 第一个实例 </span><br><span class="line">   if letter == &apos;h&apos;:</span><br><span class="line">      break</span><br><span class="line">   print (&apos; 当前字母 :&apos;, letter)</span><br><span class="line">  </span><br><span class="line">var = 10                    # 第二个实例 </span><br><span class="line">while var &gt; 0:              </span><br><span class="line">   print (&apos; 当前变量值 :&apos;, var)</span><br><span class="line">   var = var -1</span><br><span class="line">   if var == 5:   # 当变量 var 等于 5 时退出循环 </span><br><span class="line">      break</span><br><span class="line"> </span><br><span class="line">print (&quot;Good bye!&quot;)</span><br></pre></td></tr></table></figure></p>
<p>  break 语句可以用于计算素数，代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"></span><br><span class="line">from math import sqrt      # 第一个实例： while 循环 </span><br><span class="line">j = 2</span><br><span class="line">while j &lt;= 100:</span><br><span class="line">  i = 2 </span><br><span class="line">  k = sqrt (j)              # sqrt 是对数字进行开方运算，根据素数的确定型算法 —— 试除法，尝试从 2 到 sqrt (N) 的整数是否整除 N，如果能整除，则 N 不是素数，反之 N 则是素数 </span><br><span class="line">  while i &lt;= k:            # 循环结构中可以嵌套循环           </span><br><span class="line">    if j% i == 0: break</span><br><span class="line">    i += 1</span><br><span class="line">  if i &gt; k:</span><br><span class="line">    print (j),</span><br><span class="line">  j += 1</span><br><span class="line"></span><br><span class="line">from math import sqrt      # 第二个实例： for 循环 </span><br><span class="line">for i in range (2,101):</span><br><span class="line">  flag = 1                 # flag=1 和 flag=0 是必要的判断条件，否则 print 的输出结果就与 break 语句无关。</span><br><span class="line">  k = int (sqrt (i))</span><br><span class="line">  for j in range (2,k+1):</span><br><span class="line">    if i% j == 0:</span><br><span class="line">      flag = 0</span><br><span class="line">      break</span><br><span class="line">  if flag:</span><br><span class="line">    print (i, end=&apos; &apos;)</span><br></pre></td></tr></table></figure></p>
<p>   这里存在一个问题：在 python3 中，print 是一个函数，默认自动换行，需要添加 end 参数，其中 end='' 会自动换行，end='' 不会换行，间隔由 '' 的内容提供。在 Python2 中，则是通过添加逗号的方式解决，但只能添加一个逗号，即只能间隔一个空格，因为 print 只是一个语句。</p>
<h1 id="continue-语句">2. continue 语句</h1>
<p>  continue 语句的功能是跳过当前的这次循环，直接开始下一次循环。比如： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"> </span><br><span class="line">for letter in &apos;Python&apos;:     # 第一个实例 </span><br><span class="line">   if letter == &apos;h&apos;:</span><br><span class="line">      continue</span><br><span class="line">   print (&apos; 当前字母 :&apos;, letter)</span><br><span class="line"> </span><br><span class="line">var = 10                    # 第二个实例 </span><br><span class="line">while var &gt; 0:              </span><br><span class="line">   var = var -1</span><br><span class="line">   if var == 5:</span><br><span class="line">      continue</span><br><span class="line">   print (&apos; 当前变量值 :&apos;, var)</span><br><span class="line">print (&quot;Good bye!&quot;)</span><br></pre></td></tr></table></figure></p>
<p>   利用 continue 语句可以打印 0~10 之间的素数，代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"></span><br><span class="line">n = 0</span><br><span class="line">while n &lt; 10:</span><br><span class="line">    n = n + 1</span><br><span class="line">    if n % 2 == 0:      # 如果 n 是偶数，执行 continue 语句 </span><br><span class="line">        continue        # continue 语句会直接继续下一轮循环，后续的 print () 语句不会执行 </span><br><span class="line">    print (n)</span><br></pre></td></tr></table></figure></p>
<h1 id="else-语句">3. else 语句</h1>
<p>   在循环结构中，else 语句会在循环正常结束后触发，但是用 break 关键字终止当前循环就不会触发 else 语句。例子如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"></span><br><span class="line">list = [1,2,3,4,5]     # 第一个实例 </span><br><span class="line">for x in list:</span><br><span class="line">    print (x)</span><br><span class="line">    break              # break 关键字终止了当前循环，else 语句不会执行。</span><br><span class="line">else:</span><br><span class="line">    print (&quot;else&quot;)</span><br><span class="line"></span><br><span class="line">list = [1,2,3,4,5]     # 第二个实例 </span><br><span class="line">for x in list:</span><br><span class="line">    print (x)</span><br><span class="line">else:                  # 循环正常结束，执行 else 语句。</span><br><span class="line">    print (&quot;else&quot;)</span><br></pre></td></tr></table></figure></p>
<h1 id="猜数字游戏">4. 猜数字游戏</h1>
<p>   代码如下： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Filename：guessnum3.py</span><br><span class="line"></span><br><span class="line">from random import randint</span><br><span class="line">x = randint (0, 300)</span><br><span class="line">go = &apos;y&apos;</span><br><span class="line">while go == &apos;y&apos;:</span><br><span class="line">  print (&apos;Please input a number betwenn 0~300:&apos;)</span><br><span class="line">  digit = int (input ())</span><br><span class="line">  if digit == x:</span><br><span class="line">    print (&apos;Bingo!&apos;)</span><br><span class="line">    break</span><br><span class="line">  elif digit &gt; x:</span><br><span class="line">    print (&apos;Too large, please try again.&apos;)</span><br><span class="line">  else:</span><br><span class="line">    print (&apos;Too small, please try again.&apos;)</span><br><span class="line">  print (&apos;If you do not want to continue, input n, or input y.&apos;) # 这一行代码如何理解？</span><br><span class="line">  go = input ()</span><br><span class="line">  print (go)</span><br><span class="line">else:</span><br><span class="line">  print (&apos;Goodbye!&apos;)</span><br></pre></td></tr></table></figure></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>第十讲 SUMIF 函数</title>
    <url>/2019/06/01/SUMIF%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="sumif-函数的基本语法">1. SUMIF 函数的基本语法</h1>
<p>  SUMIF 函数的基本语法是：=sumif (range,criteria,[sum_range])，其中 range 是判断区域，criteria 是判断条件，sum_range 是求和区域。 <a id="more"></a></p>
<h1 id="sumif-函数超过-15-位字符">2. SUMIF 函数超过 15 位字符</h1>
<p>   同 COUNTIF 函数，当文本类型的数据超过 15 位字符后，必须在判断条件后加上 &amp;&quot;*&quot;, 即 = sumif (range,criteria&amp;&quot;*&quot;,[sum_range])。</p>
<h1 id="在多列中使用-sumif-函数">3. 在多列中使用 SUMIF 函数</h1>
<p>   判断区域（range) 和求和区域（sum_range）都应该选择多列，但必须注意的是，判断区域和求和区域会默认最左边的列的开头为查找值，因此选中区域最右列的表头必须和想要寻找或判断的条件一致。</p>
<h1 id="使用辅助列处理多条件的-sumif-函数">4. 使用辅助列处理多条件的 SUMIF 函数</h1>
<p>   当 SUMIF 函数中需要处理多条件时，可以使用辅助列，将多列的条件使用 &amp; 连接，转换成一列，即辅助列，然后使用 SUMIF 函数。</p>
<h1 id="sumifs-函数">5. SUMIFS 函数</h1>
<p>  SUMIFS 函数的基本语法是：=sumif (sum_range, range1, criteria1, …)，即求和区域成为了第一个需要输入的条件。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>第九讲 COUNTIF 函数</title>
    <url>/2019/05/31/COUNTIF%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="基本格式">1. 基本格式</h1>
<p>  COUNTIF 函数的基本格式是：countif (引用区域，判断准则)。</p>
<p>   值得注意的是，判断准则如果是类似 &gt;= 这种的，要用双引号对其进行包裹，即 &quot;&gt;=&quot;。 <a id="more"></a> # 2. 对文本的判断</p>
<p>   如果引用区域是文本，即对文本进行判断时，Excel 默认只判断前 15 位，因此如果文本超过 15 位，必须用 countif (区域，判断条件 &amp;&quot;*&quot;)。</p>
<h1 id="在条件格式中使用公式---countif">3. 在条件格式中使用公式 - COUNTIF</h1>
<p>   条件格式 - 新建规则 - 使用公式设置。</p>
<h1 id="多个判断条件">4. 多个判断条件</h1>
<p>  countifs (引用区域 1, 判断准则 1,[引用区域 2, 判断准则 2], …)</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>循环语句</title>
    <url>/2019/05/31/%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="range">1. range</h1>
<p>   在 Python3 中，提供了一个 range () 函数，可以用于生成一个整数序列。但是值得注意的是 range () 函数的结果是一个生成器，不是列表，只能通过 list () 函数将其转换成列表，即 list (range ()).<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<a id="more"></a>
<p>  range () 函数的语法结构为：range (start, end, step), 值得注意的是，range () 函数输出的结果包含 start，不包含 end。在 range () 函数中，可以省略 start 和 step，但是不能省略 end，其中，start 默认为 0，step 默认为 1，但是 step 不能是 0。</p>
<h1 id="while-语句">2. while 语句</h1>
<p>  while 语句的基本结构是： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while 判断条件：</span><br><span class="line">    执行语句……</span><br></pre></td></tr></table></figure></p>
<p>   值得注意的是，使用 while 语句必须定义起始值以及执行语句每执行一次起始值都要随之发生变化，否则就成了无限循环。即完整的 while 语句结构是： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while (count &lt; 9):</span><br><span class="line">   print &apos;The count is:&apos;, count</span><br><span class="line">   count = count + 1</span><br></pre></td></tr></table></figure></p>
<p>   不完整的 while 语句结构会造成无限循环： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var = 1</span><br><span class="line">while var == 1 :  # 该条件永远为 true，循环将无限执行下去 </span><br><span class="line">   num = raw_input (&quot;Enter a number  :&quot;)</span><br><span class="line">   print &quot;You entered: &quot;, num</span><br></pre></td></tr></table></figure></p>
<h1 id="for-语句">3. for 语句</h1>
<p>  for 语句的优点是它可以明确循环的次数，其基本结构是： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for iterating_var in sequence:</span><br><span class="line">   statements (s)</span><br></pre></td></tr></table></figure></p>
<p>   其中，sequence 可以是字符串（str)、列表（list)、元组（tuple）、字典（dictionary）和文件（file）。</p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p>在 python2 中，range () 函数会直接生成一个列表，而 xrange () 函数才会生成一个生成器。<a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>条件语句</title>
    <url>/2019/05/31/%E6%9D%A1%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="if-语句">1. if 语句</h1>
<p>  Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。其基本形式为：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 判断条件：</span><br><span class="line">    执行语句……</span><br><span class="line">else：</span><br><span class="line">    执行语句……</span><br></pre></td></tr></table></figure>
<p>  if 语句的判断条件可以用 &gt;（大于）、&lt;(小于)、==（等于）、&gt;=（大于等于）、&lt;=（小于等于）来表示其关系。</p>
<h1 id="elif-语句">2. elif 语句</h1>
<p>   当判断条件为多个值时，可以使用以下形式： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 判断条件 1:</span><br><span class="line">    执行语句 1……</span><br><span class="line">elif 判断条件 2:</span><br><span class="line">    执行语句 2……</span><br><span class="line">elif 判断条件 3:</span><br><span class="line">    执行语句 3……</span><br><span class="line">else:</span><br><span class="line">    执行语句 4……</span><br></pre></td></tr></table></figure></p>
<h1 id="多个判断条件and-和-or">3. 多个判断条件：and 和 or</h1>
<p>   如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 判断条件 A and/or 判断条件 B：</span><br><span class="line">    执行语句……</span><br><span class="line">else：</span><br><span class="line">    执行语句……</span><br></pre></td></tr></table></figure></p>
<h1 id="判断条件的数据类型问题再议-input">4. 判断条件的数据类型问题：再议 input</h1>
<p>   在 Python 中，不同类型的数据不能直接进行比较，如下述条件判断： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">birth = input (&apos;birth: &apos;)</span><br><span class="line">if birth &lt; 2000:</span><br><span class="line">    print (&apos;00 前 & apos;)</span><br><span class="line">else:</span><br><span class="line">    print (&apos;00 后 & apos;)</span><br></pre></td></tr></table></figure></p>
<p>   因为 input 内部的数据类型为字符串，因此 birth 的数据类型为字符串，而数字 2000 的数据类型为数值，不能直接比较，python 会报出下述错误信息： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unorderable types: str () &gt; int ()</span><br></pre></td></tr></table></figure></p>
<p>  TypeError 表示类型错误，解决方法是将字符串转为数值。在 Python 中，int () 函数可以完成这件事情： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s = input (&apos;birth: &apos;)</span><br><span class="line">birth = int (s)</span><br><span class="line">if birth &lt; 2000:</span><br><span class="line">    print (&apos;00 前 & apos;)</span><br><span class="line">else:</span><br><span class="line">    print (&apos;00 后 & apos;)</span><br></pre></td></tr></table></figure></p>
<p>   但是，值得注意的是，输入的必须是数字，否则 int () 函数无法完成转换，如输入 abc,python 会报出下述错误信息： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: invalid literal for int () with base 10: &apos;abc&apos;</span><br></pre></td></tr></table></figure></p>
<p>  ValueError 表示值错误。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>用Python玩转数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>第八讲 IF 函数逻辑判断</title>
    <url>/2019/05/30/F%E5%87%BD%E6%95%B0%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="if-函数的基本用法">1. IF 函数的基本用法</h1>
<p>  IF 函数的语法是：IF (logical_test,[value_if_true],[value_if_false])。</p>
<p>   值得注意的是，所有标点符号（逗号和双引号）都应该是英文半角符号。</p>
<a id="more"></a>
<h1 id="if-函数的嵌套">2. IF 函数的嵌套</h1>
<p>  IF 函数的嵌套是指在 IF 函数中，继续使用 IF 函数，即对于 IF (logical_test,[value_if_true],[value_if_false])，可以将 [value_if_true] 或 [value_if_false] 换为 IF (logical_test,[value_if_true],[value_if_false])。如 = IF (B7=&quot;理工&quot;, &quot;LG&quot;,IF (B7=&quot;文科&quot;, &quot;WK&quot;, &quot;CJ&quot;))。</p>
<p>   但是，要尽量避免 IF 函数的多层嵌套，一般而言不能多于四层，超过四层就要考虑使用其他函数。</p>
<p>   对于多层嵌套，也可能使用 +（数值）或 &amp;（文本）进行连接，使得多层嵌套变成多个 IF 函数的连接，即 IF (,(,(,,),),) 变成 IF ()+IF ()+IF () 或 IF ()&amp;IF ()&amp;IF ()。</p>
<h1 id="利用-if-函数处理函数错误">3. 利用 IF 函数处理函数错误</h1>
<p>   如 IF (ISERROR (D35/C35),,D35/C35)，当 C35 为 0 或空值时，D35/C35 会报错，使用上述 IF 函数能够忽略其错误，显示结果为 0，而非 ISERROR。</p>
<h1 id="and-函数和-or-函数">4. AND 函数和 OR 函数</h1>
<p>  AND 表示且，两个条件都要满足，OR 表示或，只需满足一个条件即可。</p>
<p>   例子：IF (AND (,),,)，IF (OR (,),,)。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>第七讲 认识公式与函数</title>
    <url>/2019/05/28/%E8%AE%A4%E8%AF%86%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="运算符">1. 运算符</h1>
<a id="more"></a>
<h2 id="基本的运算符">1.1 基本的运算符</h2>
<table>
<thead>
<tr class="header">
<th>运算符符号</th>
<th>运算符含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>－</td>
<td>负号</td>
</tr>
<tr class="even">
<td>%</td>
<td>百分比</td>
</tr>
<tr class="odd">
<td>^</td>
<td>求幂</td>
</tr>
<tr class="even">
<td>* /</td>
<td>乘和除</td>
</tr>
<tr class="odd">
<td>+ -</td>
<td>加和减</td>
</tr>
<tr class="even">
<td>&amp;</td>
<td>文本连接</td>
</tr>
<tr class="odd">
<td>=,&lt;,&gt;,&lt;=,&gt;=,&lt;&gt;</td>
<td>比较</td>
</tr>
</tbody>
</table>
<h2 id="运算符-的用法">1.2 运算符 &amp; 的用法</h2>
<p>  &amp; 用来连接文本或数值，但是值得注意的是，用 &amp; 连接数值后，会将其转换为文本类型。</p>
<p>  &amp; 同样，当文本被强制 + - * / 后，会被强制转换为数值。</p>
<p>  p.s: 当不是使用 &amp; 符号连接文本时，对文本的引用需要加上 &quot;&quot;。</p>
<h2 id="比较运算符">1.3 比较运算符</h2>
<p>   比较运算符只会输出两个结果：TRUE 和 FASLE，其中 TRUE 的数值等于 1，FASLE 的数值等于 0。</p>
<h2 id="跳跃式求和">1.4 跳跃式求和</h2>
<p>   第一种情形：一列中有多个求和项，需要分别对包含不同数量单元格的多个区域分别进行求和，可以使用定位条件 + 自动求和。</p>
<p>   第二种情形：对包含相同数量单元格的多个区域分别进行相同的操作，如根据数量和总价求单价，可以使用定位条件 + 自动填充（ctrl+enter）。注意，这里输入公式可以直接在上方输入栏中进行输入，不能选中单元格进行输入。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>入门</tag>
        <tag>Excel1800分钟</tag>
      </tags>
  </entry>
  <entry>
    <title>自我介绍</title>
    <url>/2019/05/28/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="密码是什么？" />
    <label for="pass">密码是什么？</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>Python 的基础知识</title>
    <url>/2019/05/25/Python%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="第一个-python-程序">1. 第一个 Python 程序</h1>
<h2 id="python-的两种运行方式">1.1 Python 的两种运行方式</h2>
<p>   一般而言，Python 的运行有两种方式：Shell 方式和文件方式</p>
<a id="more"></a>
<h3 id="shell-方式">1.1.1 Shell 方式</h3>
<p>  Shell 方式就是 Python 的交互模式，所谓交互模式是指：输入一行命令，解释器就结束并运行出相应的结果。</p>
<p>   进入 Shell 方式，只需在命令行中敲击命令 python，其提示符是 &gt;&gt;&gt; 。</p>
<p>   退出 Shell 方式只需在 Python 的交互模式下敲击 exit () 并回车，即可。</p>
<h3 id="文件方式">1.1.2 文件方式</h3>
<p>   文件方式是指：在 Python 的 IDE 环境中，创建一个以 py 为扩展名的文件，然后用 Python 解释器在 Shell 中运行出结果。</p>
<h2 id="输入与输出">1.2 输入与输出</h2>
<h3 id="输入">1.2.1 输入</h3>
<p>   在 Python3 中，输入字符所使用的命令是 input ()<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>, 通过这一命令，可以让用户输入字符串，并存放到一个变量里，如 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; name = input ()</span><br><span class="line">Michael # 输入你想输入的内容，比如 Michael</span><br></pre></td></tr></table></figure></p>
<h3 id="输出">1.2.2 输出</h3>
<p>   在 Python3 中，输出字符所使用的命令是 print ()。<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a></p>
<h2 id="注释">1.3 注释</h2>
<p>   在 Python 中，注释所采用的符号是 #，一直到这一行结束。</p>
<h2 id="续行">1.4 续行</h2>
<p>   在 Python 中，续行所采用的符号是: , 但是在两种情形下无需使用续行符号，Python 会默认所有内容为一行。第一种情形是小括号、中括号和花 (大) 括号内部的内容；第二种情形是三引号内部的字符串。</p>
<h2 id="一行书写多语句">1.5 一行书写多语句</h2>
<p>   在 Python 中，可以在一行内进行多语句的书写，只需用；隔开。</p>
<h2 id="缩进">1.6 缩进</h2>
<p>   在 Python 中，增加缩进表示语句块的开始，减少缩进表示语句块的结束，相同的缩进表示同级别的语句块。</p>
<p>   比较常用的四个缩进，但不必可以如此，有些编辑器会有默认的缩进格式，此时只需使用编辑器默认的缩进即可。</p>
<h1 id="python-语法基础">2. Python 语法基础</h1>
<h2 id="变量">2.1 变量</h2>
<p>   变量是指没有固定的值，可以改变的数。在 Python 中，变量既可以是数字，也可以是其他任意的数据类型。</p>
<h3 id="变量名">2.1.1 变量名</h3>
<p>   在 Python 中，变量的命名具有一定的规则：首字符必须是字母或下划线，其余字符可以是字母、下划线和数字，但有一些关键字不可以随便作为变量名或变量名的一部分。</p>
<p>   在 Python 中，变量的命名对大小写具有敏感性，因此 PI 和 pi 是不同的标识符（变量名）。</p>
<table>
<tr>
<td>
and
</td>
<td>
as
</td>
<td>
assert
</td>
<td>
break
</td>
<td>
class
</td>
<td>
continue
</td>
<td>
def
</td>
<td>
del
</td>
</tr>
<tr>
<td>
elif
</td>
<td>
else
</td>
<td>
except
</td>
<td>
exec
</td>
<td>
finally
</td>
<td>
for
</td>
<td>
from
</td>
<td>
global
</td>
</tr>
<tr>
<td>
if
</td>
<td>
import
</td>
<td>
in
</td>
<td>
is
</td>
<td>
lambda
</td>
<td>
not
</td>
<td>
or
</td>
<td>
pass
</td>
</tr>
<tr>
<td>
print
</td>
<td>
raise
</td>
<td>
return
</td>
<td>
try
</td>
<td>
while
</td>
<td>
with
</td>
<td>
yield
</td>
<td>
None
</td>
</tr>
</table>
<h3 id="变量的赋值">2.1.2 变量的赋值</h3>
<p>   变量通过 “=” 来赋值，格式为 <code>变量名 = 值</code>。变量的类型会根据值的类型自动确定，在变量第一次赋值时，会同时获得类型和值。</p>
<p>   在 Python 中，变量的赋值支持增量赋值和多元赋值。多元赋值的格式是 <code>a,b = 2,1</code> , 利用多元赋值，可以轻易地交换两个变量的值，如 <code>a,b = b,a</code>。增量赋值则支持以下所有的赋值格式：</p>
<table>
<tr>
<td>
运算符
</td>
<td>
描述
</td>
<td>
实例
</td>
</tr>
<tr>
<td colspan="3" align="center">
算术运算符
</td>
</tr>
<tr>
<td>
+=
</td>
<td>
加法赋值运算符
</td>
<td>
c += a 等效于 c = c + a
</td>
</tr>
<tr>
<td>
-=
</td>
<td>
减法赋值运算符
</td>
<td>
c -= a 等效于 c = c - a
</td>
</tr>
<tr>
<td>
*=
</td>
<td>
乘法赋值运算符
</td>
<td>
c <em>= a 等效于 c = c </em> a
</td>
</tr>
<tr>
<td>
/=
</td>
<td>
除法赋值运算符
</td>
<td>
c /= a 等效于 c = c /a
</td>
</tr>
<tr>
<td>
%=
</td>
<td>
取模赋值运算符
</td>
<td>
c %= a 等效于 c = c % a（取余）
</td>
</tr>
<tr>
<td>
**=
</td>
<td>
幂赋值运算符
</td>
<td>
c **= a 等效于 c = c ** a (c 的 a 次方）
</td>
</tr>
<tr>
<td>
//=
</td>
<td>
取整除赋值运算符
</td>
<td>
c //= a 等效于 c = c //a
</td>
</tr>
<tr>
<td colspan="3" align="center">
位运算符
</td>
</tr>
<tr>
<td>
&amp;=
</td>
<td>
按位与运算符：参与运算的两个值，如果两个相应位都为 1, 则该位的结果为 1, 否则为 0
</td>
<td>
a=60, 二进制为 0011 1100，b=13, 二进制为 0000 1101，则 a&amp;b=12，二进制为 0000 1100
</td>
</tr>
<tr>
<td>
|=
</td>
<td>
按位或运算符：只要对应的二个二进位有一个为 1 时，结果位就为 1。
</td>
<td>
a=60, 二进制为 0011 1100，b=13, 二进制为 0000 1101，则 a|=61，二进制为 0011 1101
</td>
</tr>
<tr>
<td>
^=
</td>
<td>
按位异或运算符：当两对应的二进位相异时，结果为 1
</td>
<td>
a=60, 二进制为 0011 1100，b=13, 二进制为 0000 1101，则 a^b=49，二进制为 0011 0001
</td>
</tr>
<tr>
<td>
~=
</td>
<td>
按位取反运算符：对数据的每个二进制位取反，即把 1 变为 0, 把 0 变为 1 。~x  类似于 &amp; nbsp;-x-1
</td>
<td>
a=60, 二进制为 0011 1100，~a=-61, 二进制为 1100 0011
</td>
</tr>
<tr>
<td>
&lt;&lt;=
</td>
<td>
左移动运算符：运算数的各二进位全部左移若干位，由 &amp; nbsp;&lt;&lt;  右边的数字指定了移动的位数，高位丢弃，低位补 0。
</td>
<td>
a=60, 二进制为 0011 1100，a &lt;&lt; 2 = 240 ，二进制解释： 1111 0000
</td>
</tr>
<tr>
<td>
&gt;&gt;=
</td>
<td>
右移动运算符：运算数的各二进位全部右移若干位，由 &gt;&gt;  右边的数字指定了移动的位数，高位丢弃，低位补 0.
</td>
<td>
a=60, 二进制为 0011 1100，a &gt;&gt; 2 = 15 ，二进制解释： 0000 1111
</td>
</tr>
</table>
<h3 id="其他的变量运算符">2.1.3 其他的变量运算符</h3>
<p>   比较运算符：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">运算符</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">==</td>
<td style="text-align: left;">等于 - 比较对象是否相等</td>
</tr>
<tr class="even">
<td style="text-align: left;">!=</td>
<td style="text-align: left;">不等于 - 比较两个对象是否不相等</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&lt;&gt;</td>
<td style="text-align: left;">不等于 - 比较两个对象是否不相等</td>
</tr>
<tr class="even">
<td style="text-align: left;">&gt;</td>
<td style="text-align: left;">大于 - 返回 x 是否大于 y</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&lt;</td>
<td style="text-align: left;">小于 - 返回 x 是否小于 y。所有比较运算符返回 1 表示真，返回 0 表示假。这分别与特殊的变量 True 和 False 等价。</td>
</tr>
<tr class="even">
<td style="text-align: left;">&gt;=</td>
<td style="text-align: left;">大于等于 - 返回 x 是否大于等于 y。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&lt;=</td>
<td style="text-align: left;">小于等于 - 返回 x 是否小于等于 y。</td>
</tr>
</tbody>
</table>
<p>   逻辑运算符：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">运算符</th>
<th style="text-align: left;">逻辑表达式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">and</td>
<td style="text-align: left;">x and y</td>
</tr>
<tr class="even">
<td style="text-align: left;">or</td>
<td style="text-align: left;">x or y</td>
</tr>
<tr class="odd">
<td style="text-align: left;">not</td>
<td style="text-align: left;">not x</td>
</tr>
</tbody>
</table>
<h2 id="语句和表达式">2.2 语句和表达式</h2>
<p>   表达式是用运算符连接各种类型数据的数字，而语句是完整执行一个任务的一行逻辑代码。因此，表达式只是语句的一部分。</p>
<h1 id="python-的数据类型">3. Python 的数据类型</h1>
<h2 id="数字">3.1 数字</h2>
<p>   在 Python 中，数字数据类型用于存储数值。Python 支持四种不同的数字类型：int - 整型 / 长整型 <a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a>、float - 浮点型、complex - 复数型和 boolean - 布尔型（整型的子类）。</p>
<p>   浮点型其实就是数学中实数的概念，可以用科学计数法表示。</p>
<p>   复数型数值由两部分组成：实数 + 虚数（j)，复数型数值可以分离成实数（.real）和虚数（.imag）两部分。复数型数值还可以进行共轭运算，只需在其后加上.conjugate。</p>
<p>   布尔型数值可以用 and、or 和 not 运算，其结果只有两个：True 和 False。</p>
<p>  p.s：在 Python 中，存在一个特殊的值 - 空值，用 None 表示。None 不能理解为 0，因为 0 是有意义的，而 None 只是一个特殊的空值，本身没有任何意义。</p>
<h2 id="字符串">3.2 字符串</h2>
<p>   字符串或串 (String) 是由数字、字母、下划线组成的一串字符。在 Python 中，字符串需要用英文的单引号、双引号或三引号（三个单引号）括起来，其中三引号内可以自由地使用单引号和双引号。</p>
<p>   在 Python 中，如果想要取字符串中某一个字符，可以使用索引操作符 []。在 Python 中，字符串列表有两种取值顺序：（1）从左到右索引默认 0 开始的，最大范围是字符串长度少 1；（2）从右到左索引默认 - 1 开始的，最大范围是字符串开头。</p>
<p>   索引操作符有三个参数，[头下标：尾下标：间隔数 ]，其中间隔数默认为 1，头下标表示取值范围从哪里开始，尾下标表示取值范围从哪里结束。</p>
<h2 id="列表">3.3 列表</h2>
<p>   列表用 [] 标识，是 Python 最通用的复合数据类型，它支持字符，数字，字符串甚至可以包含列表（即嵌套）。</p>
<p>   列表中的元素可以进行增加和删减，列表中元素的增加需要使用 append 函数，即 num.append（），列表中元素的删减需要使用 del 函数，即 del ()。但是，一次只能在列表中增加一个元素，一次能在列表中删减多个元素，列表也算一个元素。</p>
<p>   列表中值的切割也可以用到变量 [头下标：尾下标 ] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。</p>
<h2 id="元组">3.4 元组</h2>
<p>   元组类似于列表，用 () 表示，内部元素用逗号隔开。但是，与列表不同，元组不能二次赋值，即不能增减元素，相当于只读列表。同样，元素也可以使用 [头下标：尾下标 ] 进行截取。</p>
<h2 id="字典">3.5 字典</h2>
<p>   字典是用 {} 进行标识的，与列表不同，字典是由键值对，而非元素组成的，格式是 {：，：，}。</p>
<h1 id="python-基本运算">4. Python 基本运算</h1>
<h2 id="算术运算">4.1 算术运算</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">运算符</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">+</td>
<td style="text-align: left;">加 - 两个对象相加</td>
</tr>
<tr class="even">
<td style="text-align: left;">-</td>
<td style="text-align: left;">减 - 得到负数或是一个数减去另一个数</td>
</tr>
<tr class="odd">
<td style="text-align: left;">*</td>
<td style="text-align: left;">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>
</tr>
<tr class="even">
<td style="text-align: left;">/</td>
<td style="text-align: left;">除 - x 除以 y</td>
</tr>
<tr class="odd">
<td style="text-align: left;">%</td>
<td style="text-align: left;">取模 - 返回除法的余数</td>
</tr>
<tr class="even">
<td style="text-align: left;">**</td>
<td style="text-align: left;">幂 - 返回 x 的 y 次幂</td>
</tr>
<tr class="odd">
<td style="text-align: left;">//</td>
<td style="text-align: left;">取整除 - 返回商的整数部分（向下取整）</td>
</tr>
</tbody>
</table>
<h2 id="比较运算">4.2 比较运算</h2>
<p>   比较运算只会返回两个值：True 和 False。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">运算符</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">==</td>
<td style="text-align: left;">等于 - 比较对象是否相等</td>
</tr>
<tr class="even">
<td style="text-align: left;">!=</td>
<td style="text-align: left;">不等于 - 比较两个对象是否不相等</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&lt;&gt;</td>
<td style="text-align: left;">不等于 - 比较两个对象是否不相等</td>
</tr>
<tr class="even">
<td style="text-align: left;">&gt;</td>
<td style="text-align: left;">大于 - 返回 x 是否大于 y</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&lt;</td>
<td style="text-align: left;">小于 - 返回 x 是否小于 y。所有比较运算符返回 1 表示真，返回 0 表示假。这分别与特殊的变量 True 和 False 等价。</td>
</tr>
<tr class="even">
<td style="text-align: left;">&gt;=</td>
<td style="text-align: left;">大于等于 - 返回 x 是否大于等于 y。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&lt;=</td>
<td style="text-align: left;">小于等于 - 返回 x 是否小于等于 y。</td>
</tr>
</tbody>
</table>
<h2 id="逻辑运算">4.3 逻辑运算</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">运算符</th>
<th style="text-align: left;">逻辑表达式</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">and</td>
<td style="text-align: left;">x and y</td>
<td style="text-align: left;">布尔 &quot;与&quot; - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td>
</tr>
<tr class="even">
<td style="text-align: left;">or</td>
<td style="text-align: left;">x or y</td>
<td style="text-align: left;">布尔 &quot;或&quot; - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">not</td>
<td style="text-align: left;">not x</td>
<td style="text-align: left;">布尔 &quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>
</tr>
</tbody>
</table>
<h2 id="字符运算">4.4 字符运算</h2>
<p>   原始字符操作符：R/r, 表示不希望转义字符起作用。Unicode 字符串操作符：U/u, 表示转换成 Unicode 字符串。</p>
<p>  <code># -*- coding: UTF-8 -*-</code> 表示将文档的编码转为 UTF-8 的中文编码，** 表示重复操作。</p>
<h2 id="运算的优先级">4.5 运算的优先级</h2>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">运算符</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">**</td>
<td style="text-align: left;">指数 (最高优先级)</td>
</tr>
<tr class="even">
<td style="text-align: left;">~ + -</td>
<td style="text-align: left;">按位翻转，一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">* / % //</td>
<td style="text-align: left;">乘，除，取模和取整除</td>
</tr>
<tr class="even">
<td style="text-align: left;">+ -</td>
<td style="text-align: left;">加法减法</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&gt;&gt; &lt;&lt;</td>
<td style="text-align: left;">右移，左移运算符</td>
</tr>
<tr class="even">
<td style="text-align: left;">&amp;</td>
<td style="text-align: left;">位 'AND'</td>
</tr>
<tr class="odd">
<td style="text-align: left;">^ |</td>
<td style="text-align: left;">位运算符</td>
</tr>
<tr class="even">
<td style="text-align: left;">&lt;= &lt; &gt; &gt;=</td>
<td style="text-align: left;">比较运算符</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&lt;&gt; == !=</td>
<td style="text-align: left;">等于运算符</td>
</tr>
<tr class="even">
<td style="text-align: left;">= %= /= //= -= += *= **=</td>
<td style="text-align: left;">赋值运算符</td>
</tr>
<tr class="odd">
<td style="text-align: left;">is is not</td>
<td style="text-align: left;">身份运算符</td>
</tr>
<tr class="even">
<td style="text-align: left;">in not in</td>
<td style="text-align: left;">成员运算符</td>
</tr>
<tr class="odd">
<td style="text-align: left;">not and or</td>
<td style="text-align: left;">逻辑运算符</td>
</tr>
</tbody>
</table>
<h1 id="python-的函数模块和包">5. Python 的函数、模块和包</h1>
<h2 id="函数">5.1 函数</h2>
<p>  Python 中的函数既有内建函数，也有非内建函数。内建函数可以直接使用，非内建函数则需要导入函数所在的模块，导入方式为： import 模块名。</p>
<h2 id="模块">5.2 模块</h2>
<p>  Python 模块 (Module) 是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和 Python 语句。模块让你能够有逻辑地组织你的 Python 代码段，把相关的代码分配到一个模块里能让你的代码更好用，更易懂。</p>
<p>   引入模块的方式是：import module1 [, module2 [,... moduleN]]，调用模块中的函数则需要这样引用：模块名。函数名。导入在模块里指定的模块属性的方式则是：from 模块名 import 模块属性。</p>
<h2 id="包">5.3 包</h2>
<p>   包是一个有层次的文件目录结构。</p>
<h2 id="库">5.4 库</h2>
<p>   库是一组具有相关功能的模块的集合。</p>
<section class="footnotes">
<hr>
<ol>
<li id="fn1"><p>在 Python3 中，input 得到的为 str (字符串) 型；在 Python2 中的 input 的到的为 int（整数）型，raw_input 得到的为 str (字符串) 型。<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>在 Python3 中，输出字符所使用的命令是 print ()；在 Python2 中，输出字符所使用的命令是 print。<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>在 Python3 中，整型和长整型的字节长度趋于一致，因此长整型已经不存在，被整型所替代。<a href="#fnref3" class="footnote-back">↩</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>用Python玩转数据</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>第五讲 分类汇总和数据验证</title>
    <url>/2019/05/23/%E5%88%86%E7%B1%BB%E6%B1%87%E6%80%BB%E5%92%8C%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h1 id="分类汇总">1. 分类汇总</h1>
<p>   分类汇总的准备工作：排序。分类汇总之前必须排序，否则无法进行分类汇总。</p>
<a id="more"></a>
<h2 id="利用分类汇总合并相同内容的单元格">1.1 利用分类汇总合并相同内容的单元格</h2>
<p>   第一步：排序。</p>
<p>   第二步：分类汇总。</p>
<p>   第三步：定位到空白单元格，合并单元格。</p>
<p>   第四步：利用格式刷，将汇总列的格式复制到所属区域列。</p>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/%20合并相同内容的单元格.gif"></p>
<h1 id="数据验证">2. 数据验证</h1>
<p>   数据验证使用自定义时，用英文（半角）逗号分隔内容。</p>
<p>   出错时可以选择停止和警告两种模式，在停止模式下，用户无法修改所选区域的内容；在警告模式下，用户会受到警告，是 / 否输入内容，选择是即可输入内容。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>王佩丰</tag>
        <tag>入门</tag>
        <tag>Excel1800分钟</tag>
      </tags>
  </entry>
  <entry>
    <title>第四讲 排序与筛选</title>
    <url>/2019/05/22/%E6%8E%92%E5%BA%8F%E4%B8%8E%E7%AD%9B%E9%80%89/</url>
    <content><![CDATA[<h1 id="排序">1. 排序</h1>
<p>   排序时也可以使用自定义序列，来自己规定排序的顺序。<br></p>
<a id="more"></a>
<p>   利用排序可以很方便的制作工资条，步骤如下：</p>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190522142503.png" title="第一步：在左侧新起一列添加从 0 到 11 的数字"></p>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190522144205.png" title="第二步：在下方添加 10 行跟工资条表格顶部标题栏相同的内容，并添加从 1.5 到 10.5 的数字"></p>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190522144517.png" title="第三步：选中数字所在的那一列，点击排序 —— 升序"></p>
<h1 id="筛选">2. 筛选</h1>
<p>   可以利用定位 —— 可见表格，对筛选后的表格内容完美地进行复制和粘贴。<br></p>
<h1 id="高级筛选">3. 高级筛选</h1>
<p>   利用不重复记录的高级筛选的选项，可以很快地得到某行或某列不同元素的种类和内容。</p>
<p>   高级筛选的条件区域：同行的表示且，不同行的表示或。</p>
<h1 id="一个打印表格的小技巧">4. 一个打印表格的小技巧</h1>
<p>   通过页面布局 —— 打印标题 —— 顶端标题行，选中标题行所在的区域，可以使所打印的表格的每一页都有标题行内容。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>入门</tag>
        <tag>Excel1800分钟</tag>
      </tags>
  </entry>
  <entry>
    <title>第三讲 查找、替换和定位</title>
    <url>/2019/05/21/%E6%9F%A5%E6%89%BE%E3%80%81%E6%9B%BF%E6%8D%A2%E5%92%8C%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h1 id="查找和替换">1. 查找和替换</h1>
<h2 id="单元格匹配">1.1 单元格匹配</h2>
<h3 id="三个符号的作用">1.1.1 三个符号的作用</h3>
<p>  * 表示多个字符。<br>   英文半角符号？表示一个字符。<br>  ~ 让后面的字符不生效。 <a id="more"></a></p>
<h4 id="一个小技巧">1.1.1.1 一个小技巧</h4>
<p>   背景颜色的替换可以使用从单元格选择格式，弥补人工识别的不足。</p>
<h1 id="定位">2. 定位</h1>
<p>   给单元格 / 单元格区域起名的作用：快速定位，以及公式使用中直接引用。<br></p>
<p>   给单元格 / 单元格区域起名的注意事项：必须全部使用中文或英文单词，避免使用数字。<br></p>
<p>   使用定位到对象，可以快速定位到所有图片，进行删除。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>基本操作</tag>
        <tag>Excel1800分钟</tag>
      </tags>
  </entry>
  <entry>
    <title>第二讲 Excle 单元格格式设置</title>
    <url>/2019/05/20/%E5%8D%95%E5%85%83%E6%A0%BC%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="合并单元格">1. 合并单元格</h1>
<p>   跨越合并：在选中的每一行都进行单元格的合并。</p>
<h1 id="斜线表头一条斜线">2. 斜线表头（一条斜线）</h1>
<h2 id="插入斜线">2.1 插入斜线</h2>
<p>   选中单元格，按 alt+enter 组合键即可。</p>
<a id="more"></a>
<h2 id="强制表内换行">2.2 强制表内换行</h2>
<p>   同样是按 alt+enter 组合键，但是只有输入光标出现的情况下才起作用。</p>
<p>  p.s: 一个小技巧：先左对齐，然后进行调整.</p>
<h1 id="单元格数字格式">3. 单元格数字格式</h1>
<h2 id="会计格式和货币格式的区别">3.1 会计格式和货币格式的区别</h2>
<p>   会计格式的钱币符号始终在最左边。</p>
<h2 id="文本格式">3.2 文本格式</h2>
<p>   在输入身份证时，由于身份证的数字格式是 18 位，而 Excel 的数字格式不能超过 15 位，所以只能用文本格式。</p>
<h2 id="常用的自定义格式">3.3 常用的自定义格式</h2>
<table>
<thead>
<tr class="header">
<th>要求</th>
<th>设置自定义格式</th>
<th>原数值</th>
<th>自定义格式后的数值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>显示 4 个字节的意义</td>
<td>&quot;正数&quot;;&quot;负数&quot;;&quot;零值&quot;;&quot;文本&quot;</td>
<td>752</td>
<td>正数</td>
</tr>
<tr class="even">
<td>原有文本后面加上新文本或数字</td>
<td>@&quot;市&quot;</td>
<td>广州</td>
<td>广州市</td>
</tr>
<tr class="odd">
<td>数值大写格式 1</td>
<td>[DBNum1] G / 通用格式</td>
<td>1254</td>
<td>一千二百五十四</td>
</tr>
<tr class="even">
<td>数值大写格式 2</td>
<td>[DBNum2] G / 通用格式</td>
<td>1254</td>
<td>壹仟贰佰伍拾肆</td>
</tr>
<tr class="odd">
<td>隐藏单元格所有值</td>
<td>;;;</td>
<td>124635</td>
<td></td>
</tr>
<tr class="even">
<td>带单位的值</td>
<td>00.00&quot;公斤&quot;</td>
<td>58.12</td>
<td>58.12 公斤</td>
</tr>
<tr class="odd">
<td>将 1234.59 显示为 1234.6</td>
<td>####.#</td>
<td>100.2</td>
<td>100.2</td>
</tr>
<tr class="even">
<td>将 8.9 显示为 8.900</td>
<td>#.000</td>
<td>0.88</td>
<td>.880</td>
</tr>
<tr class="odd">
<td>将 .631 显示为 0.6</td>
<td>0.#</td>
<td>12</td>
<td>12.</td>
</tr>
<tr class="even">
<td>12 显示为 12.0；4.568 显示为 4.57</td>
<td>#.0#</td>
<td>12</td>
<td>12.0</td>
</tr>
<tr class="odd">
<td>对齐小数点</td>
<td>???.???</td>
<td>1</td>
<td>1.</td>
</tr>
<tr class="even">
<td>分数时除号对齐</td>
<td># ???/???</td>
<td>2.25</td>
<td>2 1/4</td>
</tr>
<tr class="odd">
<td>科学计数法</td>
<td>#.###E+00</td>
<td>3456</td>
<td>3.456E+03</td>
</tr>
<tr class="even">
<td>千位分隔符 若要放大显示可灵活设置。</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>千位分隔符</td>
<td>#,###</td>
<td>12000</td>
<td>12,000</td>
</tr>
<tr class="even">
<td>千位分隔符 [将数字放大 1000 倍]</td>
<td>#,</td>
<td>12000</td>
<td>12</td>
</tr>
<tr class="odd">
<td>千位分隔符 [以百万为单位]</td>
<td>0.0,,</td>
<td>12000000</td>
<td>12.0</td>
</tr>
<tr class="even">
<td>颜色 若要设置格式中某一部分的颜色，请在该部分对应位置用方括号键入下列八种颜色名称之一。 颜色代码必须为该部分的第一项。</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>[黑色]</td>
<td>[蓝色]</td>
<td>[洋红色]</td>
<td>[红色]</td>
</tr>
<tr class="even">
<td>[青色]</td>
<td>[绿色]</td>
<td>[白色]</td>
<td>[黄色]</td>
</tr>
<tr class="odd">
<td>数值范围用颜色区分</td>
<td>[红色][&lt;=100];[蓝色][&gt;100]</td>
<td>99</td>
<td>99</td>
</tr>
<tr class="even">
<td>日 [d]、月 [m]、年 [y]、小时 [h]、分钟 [m]、秒 [s]</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>将月份显示为 1–12</td>
<td>m</td>
<td>=NOW ()</td>
<td>5</td>
</tr>
<tr class="even">
<td>将月份显示为 01–12</td>
<td>mm</td>
<td>=NOW ()</td>
<td>05</td>
</tr>
<tr class="odd">
<td>将月份显示为 Jan–Dec</td>
<td>mmm</td>
<td>=NOW ()</td>
<td>May</td>
</tr>
<tr class="even">
<td>将月份显示为 January–December</td>
<td>mmmm</td>
<td>=NOW ()</td>
<td>May</td>
</tr>
<tr class="odd">
<td>将月份显示为该月份的第一个字母</td>
<td>mmmmm</td>
<td>=NOW ()</td>
<td>M</td>
</tr>
<tr class="even">
<td>将日期显示为 1–31</td>
<td>d</td>
<td>=NOW ()</td>
<td>20</td>
</tr>
<tr class="odd">
<td>将日期显示为 01–31</td>
<td>dd</td>
<td>=NOW ()</td>
<td>20</td>
</tr>
<tr class="even">
<td>将日期显示为 Sun–Sat</td>
<td>ddd</td>
<td>=NOW ()</td>
<td>Mon</td>
</tr>
<tr class="odd">
<td>将日期显示为 Sunday–Saturday</td>
<td>dddd</td>
<td>=NOW ()</td>
<td>Monday</td>
</tr>
<tr class="even">
<td>将年份显示为 00–99</td>
<td>yy</td>
<td>=NOW ()</td>
<td>99</td>
</tr>
<tr class="odd">
<td>将年份显示为 1900–9999</td>
<td>yyyy</td>
<td>=NOW ()</td>
<td>2019</td>
</tr>
<tr class="even">
<td>将小时显示为 0–23</td>
<td>H</td>
<td>=NOW ()</td>
<td>19</td>
</tr>
<tr class="odd">
<td>将小时显示为 00–23</td>
<td>hh</td>
<td>=NOW ()</td>
<td>19</td>
</tr>
<tr class="even">
<td>将分钟显示为 0–59</td>
<td>m</td>
<td>m 或 mm 必须紧跟在 h 或 hh 代码之后，或后面紧接 ss 代码 否则，将显示月而不是分</td>
<td></td>
</tr>
<tr class="odd">
<td>将分钟显示为 00–59</td>
<td>mm</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>将秒显示为 0–59</td>
<td>s</td>
<td>=NOW ()</td>
<td>7</td>
</tr>
<tr class="odd">
<td>将秒显示为 00–59</td>
<td>ss</td>
<td>=NOW ()</td>
<td>07</td>
</tr>
<tr class="even">
<td>使小时显示类似于 4 AM</td>
<td>h AM/PM</td>
<td>=NOW ()</td>
<td>7 PM</td>
</tr>
<tr class="odd">
<td>使时间显示类似于 4:36 pm</td>
<td>h:mm AM/PM</td>
<td>=NOW ()</td>
<td>7:06 PM</td>
</tr>
<tr class="even">
<td>使时间显示类似于 下午 4 时 36 分</td>
<td>上午 / 下午 h&quot;时&quot;mm&quot;分&quot;</td>
<td>=NOW ()</td>
<td>下午 7 时 06 分</td>
</tr>
<tr class="odd">
<td>使时间显示类似于 4:36:03 P</td>
<td>h:mm:ss A/P</td>
<td>=NOW ()</td>
<td>7:06:07 P</td>
</tr>
<tr class="even">
<td>按小时计算的一段时间</td>
<td>[h]:mm</td>
<td>1</td>
<td>24:00</td>
</tr>
<tr class="odd">
<td>按分钟计算的一段时间</td>
<td>[mm]:ss</td>
<td>1</td>
<td>1440:00</td>
</tr>
<tr class="even">
<td>按秒计算的一段时间</td>
<td>[ss]</td>
<td>1</td>
<td>86400</td>
</tr>
<tr class="odd">
<td>百分之几秒</td>
<td>h:mm:ss.00</td>
<td>=NOW ()</td>
<td>19:06:06.68</td>
</tr>
<tr class="even">
<td>显示数据意义</td>
<td>0.00 &quot;剩余&quot;;-0.00 &quot;短缺&quot;”</td>
<td>-112</td>
<td>-112.00 短缺</td>
</tr>
<tr class="odd">
<td>正数与括号内负数对齐</td>
<td>#,##0_);(#,##0);-0-_)</td>
<td>4</td>
<td>4</td>
</tr>
<tr class="even">
<td>页码格式</td>
<td>&quot;-&quot;??0&quot;-&quot;</td>
<td>56</td>
<td>- 56-</td>
</tr>
<tr class="odd">
<td>将日期显示为年月日（数字）</td>
<td>yyyy&quot;年&quot;m&quot;月&quot;d&quot;日&quot;</td>
<td>2005/5/10</td>
<td>2005 年 5 月 10 日</td>
</tr>
<tr class="even">
<td>将日期显示为年月日 (全中文）</td>
<td>[DBNum1] yyyy&quot;年&quot;m&quot;月&quot;d&quot;日&quot;</td>
<td>2005/12/1</td>
<td>二○○五年十二月一日</td>
</tr>
<tr class="odd">
<td>将月份显示为 一月～十二月</td>
<td>[$-804] mmmm</td>
<td>=NOW ()</td>
<td>5 月</td>
</tr>
<tr class="even">
<td>将日期显示为 &quot;一～日&quot;</td>
<td>aaa</td>
<td>=NOW ()</td>
<td>一</td>
</tr>
<tr class="odd">
<td>将日期显示为 &quot;星期一～日&quot;</td>
<td>aaaa</td>
<td>=NOW ()</td>
<td>星期一</td>
</tr>
<tr class="even">
<td>添加空格</td>
<td>_ ￥* #,##0_ ;_ ￥* -#,##0_ ;_ ￥* &quot;-&quot;_ ;_ <span class="citation" data-cites="_">@_</span></td>
<td>89</td>
<td>¥89</td>
</tr>
<tr class="odd">
<td>英寸（分数）</td>
<td># ##/##!&quot;</td>
<td>2.25</td>
<td>2 1/2&quot;</td>
</tr>
<tr class="even">
<td>角度显示</td>
<td>[hh]°m!'s!&quot;</td>
<td>56:12:34</td>
<td>56°12'34&quot;</td>
</tr>
<tr class="odd">
<td>角度计算</td>
<td>[hh]°m′s″</td>
<td>23:54:45</td>
<td>80°7′19″</td>
</tr>
<tr class="even">
<td>角度转换为秒</td>
<td>[ss]!&quot;</td>
<td>23:54:45</td>
<td>86085&quot;</td>
</tr>
</tbody>
</table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excle1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>单元格</tag>
      </tags>
  </entry>
  <entry>
    <title>第一讲 认识 Excel</title>
    <url>/2019/05/19/%E8%AE%A4%E8%AF%86Excel/</url>
    <content><![CDATA[<h1 id="excel-隐藏功能">1.Excel 隐藏功能</h1>
<h2 id="转换-lotus-1-2-3-公式">1.1 转换 Lotus 1-2-3 公式</h2>
<p>  Lotus 1-2-3 公式是 Excel 的一个隐藏选项，打开方式是点开文件，进入到选项页面，再点开高级设置，拉到最低部，就能看到转换 Lotus 1-2-3 公式选项，直接勾选即可。</p>
<p>   勾选后，可以不用直接输入等号，就能输入公式，如原来需要输入 = 2+3，现在可以直接输入 2+1-2-3 公式选项，直接勾选即可。</p>
<p>   建议：不必一直打开此选项，只需在大量输入简单公式，类似于 = 2+3 这种时，打开即可。 <a id="more"></a></p>
<h1 id="excel-的功能">2.Excel 的功能</h1>
<p>  Excel 的功能是：数据存储、数据处理、数据分析和数据呈现。</p>
<h1 id="使用-excel-的价格小技巧">3. 使用 Excel 的价格小技巧</h1>
<h2 id="插入-删除多个工作表">3.1 插入 / 删除多个工作表</h2>
<p>   利用 shift 键连续选中多个工作表，即可插入或者删除与选中数量相同的工作表。</p>
<p>  p.s: 插入的工作表始终在选中的工作表中最后一个的前一个位置。</p>
<h2 id="两行-列之间进行交换">3.2 两行 / 列之间进行交换</h2>
<p>   仍然需要利用 shift 键，首先需要选中行 / 列，然后将鼠标移到行 / 列的边框线上，直至鼠标变为呈现上下左右四个方向的箭头，然后按住 shift 键进行交换即可。</p>
<h2 id="自定义序列的使用">3.3 自定义序列的使用</h2>
<p>   在使用自动填充的功能中，我们可以自定义填充的序列，如张三，李四，王五，赵六。</p>
<p>   使用自定义序列的方法是：打开选项，选中高级，拉到底部，选中编辑自定义列表，进入自定义序列编辑页面。</p>
<p>  p.s：自定义列表中每个元素的分割是用 Enter 键转到下一行，而不是用逗号。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Excel1800分钟</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>王佩丰</tag>
        <tag>Excle1800分钟</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 中 Markdown 简要语法手册</title>
    <url>/2019/05/16/Markdown%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="密码是什么？" />
    <label for="pass">密码是什么？</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Markdown 语法</category>
      </categories>
      <tags>
        <tag>手册</tag>
      </tags>
  </entry>
  <entry>
    <title>2018 年 12 月 PMI 数据点评</title>
    <url>/2019/01/03/2018%E5%B9%B412%E6%9C%88PMI%E6%95%B0%E6%8D%AE%E7%82%B9%E8%AF%84/</url>
    <content><![CDATA[###
<center>
<ol type="1">
<li>总体形势
</li></ol></center>

<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190103115637.png"><br></p>
<p>   中国 12 月官方制造业 PMI 49.4%，前值 50.0%。中国 12 月官方非制造业 PMI53.8%，前值 53.4%。中国 12 月官方综合 PMI 52.6%，前值 52.8%。</p>
<p><a id="more"></a></p>
###
<center>
<ol start="2" type="1">
<li>制造业形势
</li></ol></center>

<p>  2018 年 12 月中国制造业 PMI 为 49.4%，跌破荣枯线，为 2016 年 7 月以来首次，创 2016 年 3 月以来新低，较 11 月回落 0.6 个百分点。2017 年和 2016 年 12 月 PMI 较 11 月分别回落 0.2 和 0.3 个百分点，因此从季节性来看 2018 年 12 月强于 2017 年和 2016 年 12 月，反映经济边际恶化显著加剧。<br></p>
<p>   分项来看，拖累制造业 PMI 指数的主要力量是生产、新订单、采购量和价格指数，表明供需、价格指标继续大幅走弱：<br></p>
<p>  （1）总体供需缺口进一步收窄。从生产端来看，PMI 生产指数为 50.8，较上月回落 1.1 个百分点；生产经营活动预期指数为 52.7, 较上月回落 1.5 个百分点。从需求端来看，PMI 新订单指数为 49.7，较上月回落 0.7 个百分点；新出口订单指数为 46.6，较上月回落 0.4 个百分点，表明外需走弱。供需缺口进一步收窄，表明经济正在走弱。<br></p>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190103115847.png"><br></p>
<p>  （2）价格指数明显走弱。PMI 价格指数包括两大价格指数：出厂价格指数和主要原材料购进价格指数，2018 年 12 月出厂价格指数为 43.3，较上月回落 3.1 个百分点；主要原材料购进价格指数为 44.8，较上月回落 5.5 个百分点。<br></p>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190103120002.png"><br></p>
<p>  (3) 库存指数下降，企业主动去库存。2018 年 12 月，PMI 库存指数下降，产成品库存和原材料库存指数较上月分别回落 0.4 和 0.1 个百分点，表明企业正在去库存，结 合供需缺口和价格指数的趋势，表明企业去库存的行为是主动的。<br></p>
<p><img src="https://blog-1258437747.cos.ap-chengdu.myqcloud.com/20190103120117.png"><br></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>数据点评</category>
      </categories>
      <tags>
        <tag>PMI</tag>
      </tags>
  </entry>
  <entry>
    <title>2018 中央经济工作会议</title>
    <url>/2018/12/31/2018%E4%B8%AD%E5%A4%AE%E7%BB%8F%E6%B5%8E%E5%B7%A5%E4%BD%9C%E4%BC%9A%E8%AE%AE/</url>
    <content><![CDATA[<p>   中央经济工作会议于 2018 年 12 月 19 日至 21 日在北京举行。习近平在会上发表重要讲话，总结 2018 年经济工作，分析当前经济形势，部署 2019 年经济工作。李克强在讲话中对明年经济工作作出具体部署，并作了总结讲话。<br></p>
<a id="more"></a>
####
<center>
<ol type="1">
<li>强化逆周期调控
</li></ol></center>

<blockquote>
<p>会议指出，宏观政策要强化逆周期调节，继续实施积极的财政政策和稳健的货币政策，适时预调微调，稳定总需求。<br></p>
</blockquote>
<p>   从财政政策来看，主要的着力点是减税降费，同时会议指出要较大幅度增加地方政府专项债券规模。<br></p>
<p>   从货币政策来看，主要的着力点是改善货币政策传导机制，提高直接融资比重，解决民营企业和小微企业融资难融资贵的问题。</p>
####
<center>
<ol start="2" type="1">
<li>主要任务依然围绕 “三大攻坚站” 展开
</li></ol></center>

<p>  “三大攻坚战” 是指防范化解重大风险攻坚战、精准脱贫攻坚战和污染防治攻坚战。</p>
<blockquote>
<p>会议指出，今年三大攻坚战初战告捷，明年要针对突出问题，打好重点战役。</p>
</blockquote>
####
<center>
<ol start="3" type="1">
<li>抓好 7 项重点任务
</li></ol></center>

<blockquote>
<p>会议提出，明年要抓好 7 项重点工作任务，分别是：推动制造业高质量发展、促进形成强大国内市场、扎实推进乡村振兴战略、促进区域协调发展、加快经济体制改革、推动全方位对外开放、加强保障和改善民生。</p>
</blockquote>
<p>   主要的变化是前两项，即从 “深化供给侧结构改革” 变为 “推动制造业高质量发展”；以及提出 “促进形成强大国内市场”。前者主要是发展技术，后者主要是发展市场，反映在贸易摩擦尚待明朗、外部环境有所变化背景下的政策思路，即制造业从做大变为做强，国内市场要起着托底的作用。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>会议</category>
      </categories>
      <tags>
        <tag>宏观经济</tag>
        <tag>会议</tag>
        <tag>年度</tag>
      </tags>
  </entry>
</search>
